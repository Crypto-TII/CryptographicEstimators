Search.setIndex({"docnames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "LEEstimator/LEAlgorithms/bbps", "LEEstimator/LEAlgorithms/beullens", "LEEstimator/LEAlgorithms/leon", "LEEstimator/le_algorithm", "LEEstimator/le_constants", "LEEstimator/le_estimator", "LEEstimator/le_helper", "LEEstimator/le_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/booleansolve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "MREstimator/MRAlgorithms/big_k", "MREstimator/MRAlgorithms/bruteforce", "MREstimator/MRAlgorithms/kernel_search", "MREstimator/MRAlgorithms/minors", "MREstimator/MRAlgorithms/support_minors", "MREstimator/mr_algorithm", "MREstimator/mr_constants", "MREstimator/mr_estimator", "MREstimator/mr_helper", "MREstimator/mr_problem", "PEEstimator/PEAlgorithms/beullens", "PEEstimator/PEAlgorithms/leon", "PEEstimator/PEAlgorithms/ssa", "PEEstimator/pe_algorithm", "PEEstimator/pe_constants", "PEEstimator/pe_estimator", "PEEstimator/pe_helper", "PEEstimator/pe_problem", "PKEstimator/PKAlgorithms/kmp", "PKEstimator/PKAlgorithms/sbc", "PKEstimator/pk_algorithm", "PKEstimator/pk_constants", "PKEstimator/pk_estimator", "PKEstimator/pk_helper", "PKEstimator/pk_problem", "RegSDEstimator/RegSDAlgorithms/ccj", "RegSDEstimator/RegSDAlgorithms/regisd_enum", "RegSDEstimator/RegSDAlgorithms/regisd_perm", "RegSDEstimator/RegSDAlgorithms/regisd_rep", "RegSDEstimator/RegSDAlgorithms/sd_attack", "RegSDEstimator/regsd_algorithm", "RegSDEstimator/regsd_constants", "RegSDEstimator/regsd_estimator", "RegSDEstimator/regsd_helper", "RegSDEstimator/regsd_problem", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/bjmm_plus", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "SDFqEstimator/SDFqAlgorithms/leebrickell", "SDFqEstimator/SDFqAlgorithms/prange", "SDFqEstimator/SDFqAlgorithms/stern", "SDFqEstimator/sdfq_algorithm", "SDFqEstimator/sdfq_constants", "SDFqEstimator/sdfq_estimator", "SDFqEstimator/sdfq_helper", "SDFqEstimator/sdfq_problem", "UOVEstimator/UOVAlgorithms/collision_attack", "UOVEstimator/UOVAlgorithms/direct_attack", "UOVEstimator/UOVAlgorithms/intersection_attack", "UOVEstimator/UOVAlgorithms/kipnis_shamir", "UOVEstimator/uov_algorithm", "UOVEstimator/uov_constants", "UOVEstimator/uov_estimator", "UOVEstimator/uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "index", "references"], "filenames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "LEEstimator/LEAlgorithms/bbps.rst", "LEEstimator/LEAlgorithms/beullens.rst", "LEEstimator/LEAlgorithms/leon.rst", "LEEstimator/le_algorithm.rst", "LEEstimator/le_constants.rst", "LEEstimator/le_estimator.rst", "LEEstimator/le_helper.rst", "LEEstimator/le_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/booleansolve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "MREstimator/MRAlgorithms/big_k.rst", "MREstimator/MRAlgorithms/bruteforce.rst", "MREstimator/MRAlgorithms/kernel_search.rst", "MREstimator/MRAlgorithms/minors.rst", "MREstimator/MRAlgorithms/support_minors.rst", "MREstimator/mr_algorithm.rst", "MREstimator/mr_constants.rst", "MREstimator/mr_estimator.rst", "MREstimator/mr_helper.rst", "MREstimator/mr_problem.rst", "PEEstimator/PEAlgorithms/beullens.rst", "PEEstimator/PEAlgorithms/leon.rst", "PEEstimator/PEAlgorithms/ssa.rst", "PEEstimator/pe_algorithm.rst", "PEEstimator/pe_constants.rst", "PEEstimator/pe_estimator.rst", "PEEstimator/pe_helper.rst", "PEEstimator/pe_problem.rst", "PKEstimator/PKAlgorithms/kmp.rst", "PKEstimator/PKAlgorithms/sbc.rst", "PKEstimator/pk_algorithm.rst", "PKEstimator/pk_constants.rst", "PKEstimator/pk_estimator.rst", "PKEstimator/pk_helper.rst", "PKEstimator/pk_problem.rst", "RegSDEstimator/RegSDAlgorithms/ccj.rst", "RegSDEstimator/RegSDAlgorithms/regisd_enum.rst", "RegSDEstimator/RegSDAlgorithms/regisd_perm.rst", "RegSDEstimator/RegSDAlgorithms/regisd_rep.rst", "RegSDEstimator/RegSDAlgorithms/sd_attack.rst", "RegSDEstimator/regsd_algorithm.rst", "RegSDEstimator/regsd_constants.rst", "RegSDEstimator/regsd_estimator.rst", "RegSDEstimator/regsd_helper.rst", "RegSDEstimator/regsd_problem.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/bjmm_plus.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "SDFqEstimator/SDFqAlgorithms/leebrickell.rst", "SDFqEstimator/SDFqAlgorithms/prange.rst", "SDFqEstimator/SDFqAlgorithms/stern.rst", "SDFqEstimator/sdfq_algorithm.rst", "SDFqEstimator/sdfq_constants.rst", "SDFqEstimator/sdfq_estimator.rst", "SDFqEstimator/sdfq_helper.rst", "SDFqEstimator/sdfq_problem.rst", "UOVEstimator/UOVAlgorithms/collision_attack.rst", "UOVEstimator/UOVAlgorithms/direct_attack.rst", "UOVEstimator/UOVAlgorithms/intersection_attack.rst", "UOVEstimator/UOVAlgorithms/kipnis_shamir.rst", "UOVEstimator/uov_algorithm.rst", "UOVEstimator/uov_constants.rst", "UOVEstimator/uov_estimator.rst", "UOVEstimator/uov_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "estimation_renderer.rst", "helper.rst", "index.rst", "references.rst"], "titles": ["dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "bbps", "beullens", "leon", "le_algorithm", "le_constants", "le_estimator", "le_helper", "le_problem", "bjorklund", "booleansolve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "big_k", "bruteforce", "kernel_search", "minors", "support_minors", "mr_algorithm", "mr_constants", "mr_estimator", "mr_helper", "mr_problem", "beullens", "leon", "ssa", "pe_algorithm", "pe_constants", "pe_estimator", "pe_helper", "pe_problem", "kmp", "sbc", "pk_algorithm", "pk_constants", "pk_estimator", "pk_helper", "pk_problem", "ccj", "regisd_enum", "regisd_perm", "regisd_rep", "sd_attack", "regsd_algorithm", "regsd_constants", "regsd_estimator", "regsd_helper", "regsd_problem", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "bjmm_plus", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "leebrickell", "prange", "stern", "sdfq_algorithm", "sdfq_constants", "sdfq_estimator", "sdfq_helper", "sdfq_problem", "collision_attack", "direct_attack", "intersection_attack", "kipnis_shamir", "uov_algorithm", "uov_constants", "uov_estimator", "uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "CryptographicEstimators Library", "References"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112], "cryptographic_estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113], "dummyestim": [0, 1, 2, 3], "dummyalgorithm": [0, 1], "dummyalgorithm1": [0, 113], "problem": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 114], "dummyproblem": [0, 1, 3, 113], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112], "construct": [0, 2, 3, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 33, 34, 35, 36, 37, 40, 42, 48, 50, 55, 57, 58, 59, 60, 61, 62, 65, 67, 70, 71, 76, 77, 88, 90, 91, 92, 93, 98, 99, 100, 101, 102, 105, 106, 109, 110], "an": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 114], "instanc": [0, 2, 3, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 42, 48, 50, 55, 57, 58, 59, 60, 61, 62, 65, 67, 70, 71, 76, 77, 88, 90, 91, 92, 93, 98, 99, 100, 101, 102, 105, 106, 109, 110], "estim": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 111, 112, 113, 114], "add": [0, 88], "refer": [0, 72, 73, 113], "correpond": 0, "paper": 0, "here": [0, 88], "input": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112], "object": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 30, 31, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 102, 103, 107, 109, 110, 111], "includ": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "all": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 102, 103, 105, 107, 109, 111], "necessari": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 102, 103, 107], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111], "memory_access": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 113], "specifi": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 114], "access": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "cost": [0, 1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "model": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "default": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111], "0": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 112, 114], "choic": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "constant": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "1": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 111, 112, 114], "logarithm": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110], "2": [0, 1, 2, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 85, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 114], "squar": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "root": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "3": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 114], "cube": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "deploi": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "custom": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "function": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "which": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "take": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "total": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "usag": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 109], "complexity_typ": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 113], "complex": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 114], "type": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "consid": [0, 1, 2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 40, 48, 55, 65, 88, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "tild": [0, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 94, 99, 100, 101, 102, 103, 105, 107, 109, 112], "o": [0, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 31, 94, 99, 100, 101, 102, 103, 105, 107, 109, 112, 114], "exampl": [0, 4, 5, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 48, 51, 52, 55, 58, 59, 60, 61, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 91, 92, 93, 96, 99, 101, 102, 105, 113], "sage": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107], "from": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 113, 114], "import": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 113], "dummy_problem": [0, 113], "e": [0, 2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 33, 34, 35, 36, 37, 38, 40, 48, 50, 55, 57, 65, 88, 96, 99, 101, 105, 106, 109, 114], "100": [0, 5, 6, 42, 43, 44, 45, 48, 51, 55, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 91, 92, 93, 96], "50": [0, 5, 6, 30, 43, 44, 45, 51, 55, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 91, 92, 93, 96], "dummi": [0, 1], "algorithm": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 113, 114], "properti": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109], "attack_typ": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 107, 111, 113], "return": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110], "attack": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 114], "attribut": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "_complexity_typ": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "get_optimal_parameters_dict": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "optim": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111], "dictionari": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 111], "has_optimal_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "true": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 107, 112], "ha": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "test": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107], "basealgorithm": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 109, 113], "baseproblem": [0, 1, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113], "fals": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 105, 107, 109, 111], "_memory_access": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "memory_access_cost": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "mem": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "float": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 106, 107, 110, 112], "scale": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 107], "per": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "basic": [0, 1, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 106, 107, 110], "oper": [0, 1, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110], "consumpt": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "memory_complex": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "optimal_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "each": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "valu": [0, 1, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 87, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 107, 112], "i": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 112, 113, 114], "provid": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "comput": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 56, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 106, 107, 114], "done": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "those": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "optimization_parameter_1": [0, 113], "25": [0, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 48, 70, 88, 96, 105], "optimization_parameter_2": [0, 113], "optimization_parameter_3": [0, 113], "10": [0, 4, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 52, 55, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 91, 92, 93, 96, 99, 100, 101, 102, 103, 105, 114], "parameter_nam": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "list": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 32, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 107, 109, 112, 113], "name": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 86, 89, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 107, 114], "parameter_rang": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "set": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 107, 114], "rang": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "ar": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "search": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113, 114], "us": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 86, 88, 90, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 113, 114], "onli": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 109], "reset": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 113], "intern": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "state": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109], "set_parameter_rang": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "str": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 112], "min_valu": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "max_valu": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "specif": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "alreadi": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "must": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "fall": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "lowerbound": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "inclus": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "upperbound": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "set_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "dict": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 110, 111], "predifin": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107], "subset": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 114], "time_complex": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 91, 92, 93, 94, 99, 100, 101, 102, 103, 107, 113], "time": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 109, 111, 114], "problem_parameter1": [2, 3], "problem_parameter2": [2, 3], "memory_bound": [2, 9, 11, 27, 29, 40, 42, 48, 50, 55, 65, 67, 88, 90, 96, 105, 106, 110], "inf": [2, 9, 27, 29, 40, 42, 48, 55, 65, 88, 96, 105, 106, 110], "baseestim": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 113], "first": [2, 3, 15, 16, 24, 30, 112], "second": [2, 3, 17, 71, 112], "nsolut": [2, 3, 9, 11, 16, 27, 29, 42, 48, 50, 55, 57, 65, 67, 88, 90, 96, 98, 100, 110], "number": [2, 3, 6, 9, 11, 12, 13, 16, 24, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 40, 42, 44, 48, 49, 50, 55, 57, 65, 67, 85, 88, 90, 96, 98, 99, 100, 105, 106, 109, 110, 111, 112], "solut": [2, 3, 9, 11, 12, 15, 16, 18, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 48, 50, 55, 57, 65, 67, 88, 90, 96, 98, 100, 106, 110], "algorithm_nam": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 113], "bit_complex": [2, 9, 27, 40, 48, 55, 65, 88, 94, 96, 99, 100, 102, 103, 105, 107, 109, 113], "describ": [2, 9, 22, 27, 40, 48, 55, 65, 88, 96, 105, 109], "its": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 114], "estimator_typ": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 113], "either": [2, 9, 15, 27, 37, 40, 48, 55, 65, 88, 96, 105, 109, 112], "scheme": [2, 9, 27, 40, 48, 55, 65, 88, 96, 102, 105, 109, 114], "excluded_algorithms_by_default": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 113], "fastest_algorithm": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 113], "use_tilde_o_tim": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109], "smallest": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109], "\u014d": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "ignor": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109], "polynomi": [2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 40, 48, 55, 65, 88, 96, 99, 102, 105, 106, 109, 114], "factor": [2, 9, 27, 28, 29, 33, 34, 35, 36, 37, 40, 42, 48, 55, 65, 88, 96, 105, 106, 109], "nalgorithm": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 113], "tabl": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111, 112], "show_quantum_complex": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "show_tilde_o_tim": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "show_all_paramet": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "precis": [2, 9, 27, 30, 40, 48, 55, 65, 88, 96, 105, 109, 111, 112, 113], "truncat": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111, 112], "print": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "show": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111, 113], "quantum": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "decim": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "digit": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111, 112], "output": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "rather": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "than": [2, 9, 24, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111], "round": [2, 9, 27, 40, 48, 55, 65, 88, 96, 105, 109, 111, 112], "contain": [3, 42], "over": [3, 13, 14, 15, 16, 17, 20, 21, 22, 24, 29, 30, 31, 42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 91, 92, 93, 94, 98, 114], "expected_number_solut": [3, 11, 27, 29, 42, 50, 57, 67, 90, 98, 100, 106, 110, 113], "expect": [3, 11, 29, 42, 50, 57, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 90, 91, 92, 93, 98, 100, 106, 110], "exist": [3, 11, 29, 42, 50, 56, 57, 67, 90, 98, 100, 106, 110], "get_paramet": [3, 11, 29, 42, 50, 57, 67, 90, 98, 106, 110, 113], "to_bitcomplexity_memori": [3, 11, 29, 42, 50, 57, 67, 90, 98, 106, 110, 113], "elements_to_stor": [3, 11, 29, 42, 50, 57, 67, 90, 98, 106, 110], "bit": [3, 11, 27, 29, 42, 50, 57, 67, 75, 90, 94, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110], "associ": [3, 11, 29, 42, 50, 57, 67, 90, 98, 100, 106, 110], "given": [3, 11, 15, 22, 24, 28, 29, 31, 42, 50, 57, 67, 90, 94, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111], "element": [3, 11, 29, 42, 50, 51, 52, 53, 55, 57, 67, 90, 98, 106, 110], "store": [3, 11, 13, 29, 42, 50, 57, 67, 90, 98, 106, 110], "to_bitcomplexity_tim": [3, 11, 29, 42, 50, 57, 67, 90, 98, 106, 110, 113], "basic_oper": [3, 11, 29, 42, 50, 57, 67, 90, 98, 106, 110], "correspond": [3, 11, 29, 42, 50, 57, 67, 90, 98, 106], "certain": [3, 42, 67, 106], "amount": [3, 42, 67, 106], "leestim": [4, 5, 6, 7, 8, 9, 10, 11], "lealgorithm": [4, 5, 6, 7], "leproblem": [4, 5, 6, 7, 11, 51, 52, 53, 113], "bbps20": [4, 45, 114], "adapt": [4, 5, 6, 43, 44, 51, 52, 56, 86], "version": [4, 5, 6, 43, 44, 51, 52], "script": [4, 5, 6, 43, 44], "deriv": [4, 5, 6, 43, 44], "code": [4, 5, 6, 9, 10, 11, 43, 44, 48, 49, 50, 51, 52, 65, 67, 70, 75, 88, 90, 96, 98, 99, 114], "http": [4, 5, 6, 43, 44, 51, 52, 114], "github": [4, 5, 6, 43, 44, 51, 52], "com": [4, 5, 6, 43, 44, 51, 52, 114], "paolo": [4, 114], "santini": [4, 114], "less_project": 4, "peproblem": [4, 6, 43, 44, 45, 46, 50, 113], "sd_paramet": [4, 5, 6, 43, 44, 48, 55], "sdfqestim": [4, 5, 6, 43, 44, 91, 92, 93, 94, 95, 96, 97, 98], "subroutin": [4, 5, 6, 43, 44, 48], "30": [4, 9, 27, 61, 88], "20": [4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 37, 40, 44, 48, 52, 65, 88, 114], "251": [4, 9], "permut": [4, 5, 6, 43, 44, 45, 48, 50, 51, 52, 53, 55, 57, 87, 95, 113, 114], "equival": [4, 5, 6, 9, 11, 43, 44, 45, 48, 50, 102, 114], "n": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 114], "k": [4, 5, 6, 9, 10, 11, 13, 14, 15, 20, 27, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 50, 56, 58, 59, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 96, 97, 98, 101, 105, 113, 114], "q": [4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 55, 56, 57, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 105, 106, 114], "w": [4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 43, 44, 48, 49, 52, 55, 56, 58, 59, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 105, 113, 114], "A": [4, 5, 6, 9, 14, 40, 43, 44, 48, 51, 52, 55, 58, 59, 60, 61, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 88, 91, 93, 96, 105, 114], "12": [4, 9, 12, 13, 15, 16, 17, 18, 21, 22, 23, 32, 40, 88, 105], "w_prime": [4, 9, 113], "beu20": [5, 6, 43, 44, 101, 114], "wardbeullen": [5, 6, 43, 44], "less_attack": [5, 6, 43, 44], "34": [5, 48, 65], "leo82": [6, 44, 114], "codewords_needed_for_success": [6, 44], "low": [6, 33, 34, 35, 36, 37, 38, 44], "word": [6, 44, 49], "codeword": [6, 44, 114], "need": [6, 13, 44, 57, 113], "success": [6, 44], "peestim": [6, 43, 44, 45, 46, 47, 48, 49, 50], "pealgorithm": [6, 43, 44, 45, 46], "sd": 7, "verboseinform": [8, 47, 54, 87, 95, 113], "enum": [8, 41, 47, 54, 59, 61, 87, 95, 112], "isd": [8, 54, 74, 90, 98, 113, 114], "c_isd": 8, "l_prime": 8, "lists_siz": [8, 47, 113], "list_siz": [8, 47, 85], "normal_form": [8, 47, 113], "nw": [8, 56, 113], "nw_prime": 8, "int": [9, 10, 11, 24, 27, 29, 30, 31, 32, 40, 42, 48, 49, 50, 55, 56, 57, 65, 67, 79, 85, 88, 89, 90, 96, 97, 98, 105, 106, 112], "linear": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 75, 86, 99, 100, 101, 102, 103, 105, 114], "length": [9, 10, 11, 13, 40, 42, 48, 50, 65, 67, 85, 88, 90, 96, 98], "dimens": [9, 10, 11, 48, 50, 65, 67, 70, 88, 90, 96, 98], "field": [9, 11, 14, 15, 20, 21, 24, 27, 28, 29, 30, 31, 32, 40, 42, 48, 50, 55, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 92, 93, 96, 98, 105, 106, 109, 114], "size": [9, 11, 15, 31, 48, 50, 55, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 92, 93, 96, 98], "excluded_algorithm": [9, 27, 40, 48, 55, 65, 88, 96, 100, 105, 109], "tupl": [9, 19, 20, 27, 40, 48, 55, 65, 88, 96, 100, 105, 109], "exclud": [9, 27, 40, 48, 55, 65, 88, 96, 100, 105, 109], "none": [9, 24, 27, 29, 30, 31, 32, 40, 42, 48, 55, 65, 78, 79, 80, 81, 82, 83, 84, 88, 96, 105, 106, 109, 111], "leon": [9, 48, 113, 114], "35": [9, 27], "9": [9, 16, 22, 24, 27, 30, 33, 34, 35, 36, 37, 38, 40, 42, 65, 77, 88, 96, 105], "beullen": [9, 48, 56, 113, 114], "29": [9, 27, 48, 88, 96], "7": [9, 13, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 48, 52, 55, 65, 68, 88, 93, 96, 105], "14": [9, 30, 40, 48, 88, 106], "4": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 55, 59, 65, 88, 96, 99, 100, 101, 102, 103, 105, 106], "11": [9, 27, 40, 48, 52, 75, 88, 99, 105], "bbp": [9, 113], "200": [9, 42], "110": 9, "31": [9, 20, 27, 43, 51, 55, 65, 91, 96], "long": [9, 27, 48, 55, 88, 105], "103": [9, 27], "038": 9, "33": [9, 27, 40, 48], "624": 9, "58": [9, 88], "123": 9, "109": [9, 27, 40], "42": [9, 27, 43, 55, 88, 96], "252": 9, "79": [9, 88], "95": [9, 27, 88], "960": 9, "101": [9, 42], "59": [9, 65, 105], "cost_to_find_random_2dim_subcodes_with_support_w": [10, 113], "find": [10, 12, 15, 56, 102, 114], "dimension": [10, 56], "subcod": [10, 56, 114], "support": [10, 45, 56, 114], "maximum": [11, 29, 40, 42, 50, 67, 90, 106, 110], "allow": [11, 29, 40, 42, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 90, 106, 110], "solv": [11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 29, 33, 34, 35, 36, 37, 38, 40, 42, 50, 62, 67, 90, 100, 101, 106, 110, 114], "fq": [11, 50, 51, 52, 53, 55, 57, 94, 98, 114], "addit": [11, 29, 50, 51, 52, 53, 55, 57, 90, 98], "mqestim": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32], "mqalgorithm": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "mqproblem": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 113], "et": [12, 22], "al": [12, 22], "probabilist": [12, 16, 17, 22], "mq": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 100], "gf": [12, 13, 16, 17, 22, 29, 42, 105, 106, 114], "bkw19": [12, 114], "It": [12, 14, 16, 17, 22], "qudract": 12, "system": [12, 15, 16, 20, 21, 22, 24, 29, 30, 32, 101, 114], "pariti": [12, 16, 114], "h": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 50, 85, 99, 100, 102, 103, 105, 114], "extern": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 99, 100, 102, 103, 105], "hybrid": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 99, 100, 102, 103, 105, 114], "mq_problem": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 113], "m": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 51, 52, 53, 55, 56, 57, 99, 100, 101, 102, 103, 105, 106, 114], "bj\u00f6rklund": [12, 114], "variabl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 37, 75, 99, 105, 106], "algebra": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 37, 38, 99, 100, 101, 102, 103, 105], "81": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 88], "get_reduced_paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 113], "lambda_": [12, 16, 27, 113], "linear_algebra_const": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38, 99, 100, 101, 102, 103, 113], "mq_algorithm": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 113], "5": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 52, 55, 65, 88, 91, 96, 99, 100, 101, 102, 103, 105], "npolynomials_reduc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 113], "after": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 38], "appli": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 71, 98], "thoma": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 114], "wolf": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "strategi": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "60": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 40, 48, 65], "18": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 40, 65, 69], "nvariables_reduc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 113], "fix": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 62], "some": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 48], "booleansolvefxl": [13, 27, 113], "booleansolv": 13, "fxl": 13, "respect": [13, 24], "bfss11": [13, 114], "ckp": [13, 114], "thei": 13, "work": [13, 14, 99], "guess": [13, 33, 34, 35, 36, 37, 38], "consist": [13, 15, 22], "result": [13, 15], "subsystem": [13, 20], "note": [13, 14, 42], "For": [13, 72, 73], "las_vega": [13, 27], "variant": [13, 27, 37, 40, 41, 65, 113], "xl": 13, "block": 13, "wiedemann": 13, "thi": [13, 14, 15, 18, 72, 102, 113], "modul": [13, 14, 18, 113], "follow": [13, 24, 99, 113], "analysi": [13, 114], "bbc": 13, "22": [13, 40, 61, 88, 105], "section": 13, "8": [13, 21, 23, 27, 30, 37, 40, 55, 61, 65, 69, 72, 74, 88, 105, 106], "There": 13, "ani": [13, 14, 15, 99, 109], "row": [13, 40, 42, 55, 57], "macaulai": [13, 15, 37], "matrix": [13, 15, 33, 34, 35, 36, 37, 38, 42, 55, 57], "can": [13, 98, 102], "build": 13, "fly": 13, "henc": 13, "demand": 13, "domin": 13, "two": [13, 15, 85, 112], "vector": [13, 33, 34, 35, 36, 37, 38, 40, 42, 70, 85, 99], "where": [13, 20, 56, 100], "column": [13, 37, 40, 42, 55, 57, 112], "cgmt": 14, "finit": [14, 20, 24, 27, 28, 29, 30, 32, 40, 42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 92, 93, 105, 106, 114], "when": [14, 23], "integ": [14, 24, 28, 30, 31, 32], "2k": 14, "leq": [14, 23], "cgmt02": [14, 114], "In": [14, 15, 75], "min": [14, 50, 89, 97], "floor": 14, "sqrt": 14, "41": [14, 27, 48, 65], "nvariabl": [14, 21, 23, 29, 30, 106, 113], "The": [15, 16, 18, 20, 21, 23, 24, 51, 52, 69, 74, 100, 101, 114], "jv18": [15, 114], "step": 15, "preprocess": 15, "we": [15, 88], "degre": [15, 19, 20, 24, 28, 30, 31, 32, 37, 113], "d": [15, 27, 28, 31, 49, 52, 55, 56, 69, 70, 113, 114], "ideal": [15, 28], "gener": [15, 18, 28, 99, 101, 102], "initi": [15, 69, 70, 71, 72, 73, 74, 75, 77], "everi": [15, 29, 42, 105, 106], "special": [15, 16, 98, 109], "final": [15, 54], "found": [15, 18], "direct": [15, 100], "our": 15, "formula": [15, 18, 19], "dua20": [15, 114], "max_d": [15, 113], "upper": [15, 70], "bound": [15, 49, 70], "dinurfirst": [16, 27, 113], "dinur": [16, 17, 114], "din21a": [16, 17, 114], "mani": 16, "quadrat": [16, 20, 21, 24, 32, 114], "These": 16, "come": 16, "origin": [16, 51, 52], "kappa": [16, 27, 113], "dinursecond": [17, 27, 113], "din21b": [17, 114], "idea": [17, 20, 101], "n1": [17, 27, 113], "n_1": 17, "exhaustivesearch": [18, 27, 113], "exhaust": [18, 20, 114], "evalu": [18, 99], "possibl": 18, "until": 18, "one": [18, 33, 34, 35, 36, 37, 38, 51, 52, 53, 55, 57, 99, 106, 112], "shown": 18, "bcccnsy10": [18, 114], "taken": 19, "proposit": 19, "bfp09": [19, 20, 114], "degree_of_polynomi": [19, 20, 113], "hybridf5": [20, 27, 113], "propos": [20, 51, 102], "bfp12": [20, 114], "tradeoff": [20, 72], "between": [20, 112], "groebner": 20, "sai": 20, "order": [20, 24, 27, 28, 29, 30, 32, 40, 42, 105, 106], "grobner": 20, "f5": [20, 27, 113], "mpkc": [20, 100], "256": [20, 105], "23": [20, 27, 40, 88, 96, 105], "equat": [21, 22, 24, 28, 114], "even": [21, 100], "characterist": 21, "kpg99": [21, 114], "comp": [21, 23], "183": [21, 23], "lptwy17": [22, 114], "determin": [22, 94, 99, 100, 102, 103, 105, 107], "delta": [22, 27, 113], "mht13": [23, 114], "generic_system": [24, 113], "regular": [24, 32, 67, 114], "repres": [24, 30, 32], "traceback": [24, 28], "most": [24, 28, 100], "recent": [24, 28], "call": [24, 28], "last": [24, 28], "valueerror": [24, 28], "defin": [24, 29], "quadratic_system": [24, 32, 113], "15": [24, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42, 65, 88], "16": [24, 27, 28, 30, 33, 34, 35, 36, 37, 40, 42, 88, 105], "regular_system": [24, 113], "equal": [24, 29], "semi_regular_system": [24, 32, 113], "semi": [24, 32], "f_1": 24, "ldot": 24, "f_m": 24, "d_1": 24, "d_m": 24, "index": [24, 113], "non": [24, 28, 30, 31], "posit": [24, 30], "coeffici": [24, 89, 97], "dfrac": 24, "prod_": 24, "z": [24, 30, 31, 85, 114], "d_i": 24, "If": [24, 28, 29, 42, 105, 106], "sequenc": 24, "cdot": 24, "bigg": 24, "theta": [27, 28, 29, 33, 34, 35, 36, 37, 42, 105, 106, 113], "expon": [27, 28, 29, 33, 34, 35, 36, 37, 42, 105, 106, 114], "max": [27, 29, 42, 89, 97], "relev": [27, 109], "45": [27, 28, 40], "bjorklund": [27, 113], "80": [27, 30], "46": 27, "crossbr": [27, 113, 114], "37": [27, 40], "57": [27, 65], "6": [27, 28, 30, 31, 33, 34, 35, 36, 37, 40, 55, 65, 88, 105], "44": [27, 48, 105], "62": 27, "lokshtanov": [27, 100, 113, 114], "87": [27, 88, 105], "451": 27, "316": [27, 40], "339": 27, "720": 27, "174": 27, "616": 27, "32": [27, 65, 88], "111": [27, 88], "19": [27, 40, 65, 96], "493": 27, "349": 27, "801": 27, "17": [27, 40, 48, 105, 106], "966": 27, "27": [27, 65], "065": 27, "158": 27, "906": 27, "854": 27, "105": [27, 55], "68": 27, "26": [27, 114], "61": 27, "67": [27, 65], "77": 27, "71": 27, "168": 27, "tilde_o_estim": [27, 88, 105], "107": 27, "determinist": 27, "98": 27, "70": 27, "89": 27, "88": 27, "167": [27, 40, 88], "164": 27, "119": 27, "72": [27, 48, 65, 105], "94": 27, "620": 27, "147": [27, 40], "13": [27, 40, 88, 96, 105], "19677": 27, "40": [27, 30, 55, 65], "43": 27, "28": [27, 31, 65, 88], "3057": 27, "18665241123894338": 27, "592592592592592": 27, "85": 27, "8765": 27, "ngate": [28, 113], "gate": 28, "multipl": [28, 29, 42, 105, 106, 114], "convers": [28, 29, 33, 34, 35, 36, 37, 42, 105, 106], "prime": 28, "power": [28, 30, 102], "nmonomials_of_degre": [28, 31, 113], "monomi": [28, 31], "ring": [28, 30, 31, 113], "modulo": 28, "nmonomials_up_to_degre": [28, 31, 113], "up": [28, 31, 70], "56": [28, 31], "sum_of_binomial_coeffici": [28, 113], "l": [28, 65, 68, 69, 72, 73, 74, 75, 77, 88, 93, 96, 113, 114], "sum_": 28, "j": [28, 41, 114], "binom": [28, 89, 97, 113], "neg": [28, 31], "count": [29, 42, 105, 106, 114], "log2": [29, 42, 70, 105, 106], "binari": [29, 42, 75, 85, 105, 106, 114], "get_problem_paramet": [29, 113], "is_defined_over_finite_field": [29, 113], "is_overdefined_system": [29, 113], "overdefin": [29, 114], "is_square_system": [29, 113], "is_underdefined_system": [29, 113], "underdefin": [29, 114], "npolynomi": [29, 30, 106, 113], "order_of_the_field": [29, 42, 106, 113], "runtim": [29, 85, 106], "seri": [30, 31], "hilbertseri": [30, 113], "f_2": [30, 114], "first_nonpositive_integ": [30, 113], "ration": 30, "125": 30, "140": [30, 88, 91, 96], "series_up_to_degre": [30, 113], "self": [30, 50, 114], "nmonomialseri": [31, 113], "max_prec": 31, "nm": 31, "f_5": 31, "126": 31, "210": [31, 88], "series_monomials_of_degre": [31, 113], "21": [31, 40, 65, 88, 96], "246": 31, "426": 31, "series_monomials_up_to_degre": [31, 113], "84": 31, "456": 31, "882": 31, "wit": 32, "mrestim": [33, 34, 35, 36, 37, 38, 40, 41, 42], "mralgorithm": [33, 34, 35, 36, 37, 38], "bigk": [33, 40, 113], "mrproblem": [33, 34, 35, 36, 37, 38, 42, 113], "mr_problem": [33, 34, 35, 36, 37, 38, 113], "r": [33, 34, 35, 36, 37, 38, 40, 41, 42, 56, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 113, 114], "minrank": [33, 34, 35, 36, 37, 38], "mr": [33, 34, 35, 36, 37, 38], "mr_algorithm": [33, 34, 35, 36, 37, 113], "basemralgorithm": [33, 34, 35, 36, 37, 38], "kernel": [33, 34, 35, 36, 37, 38, 51, 52, 53, 55, 57, 114], "rank": [33, 34, 35, 36, 37, 38, 40, 42], "bk": 33, "78": [33, 34, 35, 36, 37, 40], "cost_reduct": [33, 34, 35, 36, 37, 38, 113], "reduc": [33, 34, 35, 36, 37, 38], "obtain": [33, 34, 35, 36, 37, 38], "get_problem_parameters_reduc": [33, 34, 35, 36, 37, 38, 113], "lv": [33, 34, 35, 36, 37, 38, 40, 113], "entri": [33, 34, 35, 36, 37, 38], "hybridization_factor": [33, 34, 35, 36, 37, 38, 113], "bfe": 34, "kernelsearch": [35, 40, 113], "me": 36, "supportminor": [37, 40, 113], "sm": 37, "b": [37, 40, 89, 97, 113, 114], "nprime": [37, 40, 113], "select": 37, "strassen": [37, 41, 113], "block_wiedemann": [37, 40, 41, 113], "matric": [40, 42], "target": [40, 42], "mre": 40, "38": [40, 55], "132": [40, 105], "minor": [40, 113], "bruteforc": [40, 113], "144": 40, "154": 40, "143": [40, 88], "142": [40, 88], "165": [40, 105], "159": 40, "230": 40, "162": 40, "169": [40, 105], "209": 40, "207": 40, "431": 40, "211": 40, "55": 40, "216": 40, "236": [40, 55], "231": 40, "351": 40, "237": 40, "242": 40, "189": [40, 105], "274": [40, 48], "51": [40, 48], "269": 40, "452": 40, "278": 40, "254": 40, "301": [40, 105], "302": [40, 48], "425": 40, "307": 40, "enumer": [41, 54, 99], "deteterminant_of_a": [41, 113], "t": [41, 114], "entry_i_j_of_a": [41, 113], "matrix_a": [41, 113], "pr": 41, "minors_polynomi": [41, 113], "n_reduc": 41, "k_reduc": 41, "minors_seri": [41, 113], "length_solution_vector": [42, 113], "mrp": 42, "ncolumn": [42, 113], "nmatric": [42, 113], "nrow": [42, 113], "target_rank": [42, 113], "58496250072116": 42, "202": 42, "97842293847626": 42, "split": [45, 114], "sen06": [45, 114], "rough": 45, "accord": 45, "pe": 46, "list_comput": [47, 113], "norm_form": 47, "sdestim": [48, 55, 62, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "718": 48, "631": 48, "901": 48, "ssa": [48, 113], "127": [48, 65], "480": 48, "040": 48, "150": [48, 61, 88], "82": 48, "588": 48, "601": 48, "962": 48, "308": 48, "551": 48, "377": 48, "gv_distanc": [49, 113], "gilbert": 49, "varsharmov": 49, "hamming_bal": [49, 113], "median_size_of_random_orbit": [49, 113], "number_of_weight_d_codeword": [49, 113], "weight": [49, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 85, 88, 90, 91, 92, 93, 96, 98, 114], "random_sparse_vec_orbit": [49, 113], "hull": 50, "assum": 50, "weakli": 50, "dual": 50, "pkestim": [51, 52, 53, 54, 55, 56, 57], "pkalgorithm": [51, 52, 53], "pkproblem": [51, 52, 53, 57, 113], "kmp19": [51, 114], "accompani": [51, 52], "sbc22": [51, 52, 114], "secomm": [51, 52], "pkpattack": [51, 52], "ell": [51, 52, 55, 57, 58, 59, 61, 65, 113], "cost_for_list_oper": [51, 52, 53, 55], "sbc": [51, 53, 55, 113], "memory_for_list_el": [51, 52, 53, 55], "u": [51, 54, 55, 113, 114], "24": [51, 55, 65, 88, 96, 99, 101, 105], "kmp": [52, 53, 55, 113], "w1": [52, 55, 70, 73, 88, 113], "kmp_final_list": [54, 113], "kmp_l1": [54, 113], "l1": [54, 70, 71, 72, 88, 113], "kmp_l2": [54, 113], "l2": [54, 70, 71], "sbc_isd": [54, 113], "sbc_u": [54, 113], "whose": [55, 57], "should": [55, 57, 88, 109], "lie": [55, 57], "option": 55, "argument": 55, "use_parity_row": [55, 57], "enabl": [55, 57], "trick": [55, 57], "append": [55, 57], "extra": [55, 57], "146": 55, "137": 55, "243": 55, "808": [55, 96], "722": 55, "241": 55, "319": [55, 96, 114], "beullens_lee_brickell_adapt": [56, 113], "run": 56, "leebrickel": [56, 96, 113], "cost_for_finding_subcod": [56, 113], "them": 56, "gauss_binomi": [56, 113], "lof": [56, 113], "x": [56, 66, 85, 99, 105, 112, 113, 114], "regsdestim": [58, 59, 60, 61, 62, 63, 65, 66, 67], "regsdalgorithm": [58, 59, 60, 61, 62, 63], "regsdproblem": [58, 59, 60, 61, 62, 63, 67, 113], "ccj23": [58, 114], "regsd": [58, 59, 60, 61, 62, 63], "regularisdenum": [59, 65, 113], "regularisd": [59, 60, 61], "es23": [59, 60, 61, 114], "p": [59, 61, 65, 68, 69, 70, 71, 72, 73, 74, 75, 77, 88, 91, 93, 96, 113, 114], "todo": [59, 62, 88], "updat": 59, "regularisdperm": [60, 65, 113], "perm": 60, "regularisdrep": [61, 65, 113], "depth": [61, 65, 69, 70, 71, 72, 73, 75, 79, 80, 82, 88, 113], "rep": 61, "300": 61, "eps_x": [61, 65, 113], "eps_i": [61, 65, 113], "sdattack": [62, 65, 113], "perform": 62, "reason": 62, "now": 62, "bjmm": [62, 65, 70, 71, 72, 75, 88, 113], "error": [65, 67, 70, 88, 90, 96, 98, 114], "954": 65, "582": 65, "106": 65, "133": 65, "114": 65, "112": [65, 105], "96": [65, 105], "ccj": [65, 113], "129": [65, 96], "118": 65, "155": 65, "p1": [65, 69, 70, 71, 72, 73, 75, 88, 113], "212": 65, "2320": 65, "1210": 65, "75": 65, "74": 65, "r_int": [66, 113], "syndrom": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 98, 114], "decod": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88, 90, 91, 92, 93, 94, 98, 114], "sdalgorithm": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86, 88], "ballcollis": [68, 88, 113], "sdproblem": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 91, 92, 93, 113], "ball": [68, 78, 114], "collis": [68, 78, 99, 114], "introduc": [68, 69, 74, 75], "blp11": [68, 114], "distribut": [68, 69, 70, 71, 72, 74, 75, 76, 77, 91, 92, 93], "2p": [68, 69, 72, 73, 74, 75, 77, 93], "2pl": 68, "pl": [68, 88, 113], "m4ri": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "gaussian": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "elimin": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "predefin": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "do": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "modifi": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "again": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 86], "wa": [69, 74], "bjmm12": [69, 70, 71, 72, 114], "extens": 69, "mmt11": [69, 70, 71, 72, 114], "initialize_parameter_rang": [69, 70, 71, 72, 73, 74, 75, 77, 113], "p2": [69, 73, 75, 88, 113], "restart": [69, 75], "process": [69, 70, 71, 72, 73, 74, 75, 77], "bjmmd2": [69, 88, 113], "bjmm_depth_2": 69, "start": [69, 70, 71, 72, 73, 74, 75, 77], "optimis": [69, 70, 71, 72, 73, 74, 75, 77, 112], "bjmmd3": [69, 88, 113], "bjmm_depth_3": 69, "bjmmdw": [70, 71, 88, 113], "isjoint": 70, "eight": 70, "combin": [70, 101], "mitm": [70, 71, 73], "nearest": [70, 75, 80, 82, 85, 114], "neighbor": [70, 75, 80, 82, 114], "eb22": [70, 71, 114], "w2": [70, 71, 73, 88, 113], "ham": 70, "avail": 70, "unlimit": 70, "hmap": [70, 86], "indic": [70, 86, 94, 107], "hashmap": [70, 86, 94], "being": [70, 86], "p_rang": 70, "interv": 70, "help": 70, "speed": 70, "disjoint": [70, 71], "w11": [70, 113], "bjmmpdw": [71, 88, 113], "partial": 71, "explicit": 71, "nn": [71, 73], "level": 71, "bjmmplu": [72, 88, 113], "incorpor": 72, "improv": [72, 114], "ez23": [72, 114], "regard": 72, "term": 72, "further": [72, 73], "see": [72, 73], "bothmai": [73, 88, 113], "both": [73, 80, 114], "mai": [73, 75, 80, 82, 85, 114], "indyk": 73, "motwani": 73, "bm18": [73, 114], "dum91": [74, 114], "mayozerov": [75, 88, 113], "ozerov": [75, 80, 82, 85, 114], "mo15": [75, 85, 114], "secur": [75, 114], "asymptot": [75, 85, 114], "mayozerovd2": [75, 88, 113], "On": [75, 114], "applic": [75, 114], "annual": 75, "confer": 75, "theori": [75, 114], "cryptograph": 75, "techniqu": 75, "pp": 75, "203": 75, "228": 75, "springer": [75, 114], "2015": 75, "mayozerov_depth_2": 75, "mayozerovd3": [75, 88, 113], "mayozerov_depth_3": 75, "pra62": [76, 92, 114], "ste88": [77, 93, 114], "blp08": [77, 93, 114], "sdworkfactormodel": [78, 79, 80, 81, 82, 83, 84, 85], "ballcollisionscipymodel": [78, 113], "par_nam": [78, 79, 80, 81, 82, 83, 84], "iter": [78, 79, 80, 81, 82, 83, 84], "accuraci": [78, 79, 80, 81, 82, 83, 84], "scipymodel": [78, 79, 80, 81, 82, 83, 84], "workfactor": [78, 79, 80, 81, 82, 83, 84], "get_time_memory_and_paramet": [78, 79, 80, 81, 82, 83, 84, 113], "bjmmscipymodel": [79, 113], "bothmayscipymodel": [80, 113], "dumerscipymodel": [81, 113], "mayozerovscipymodel": [82, 113], "prangescipymodel": [83, 113], "sternscipymodel": [84, 113], "binary_entropi": [85, 113], "c": [85, 114], "entropi": 85, "binomial_approxim": [85, 113], "binomi": [85, 89, 97], "coefficietn": 85, "via": 85, "sterl": 85, "approxim": 85, "inverse_binary_entropi": [85, 113], "v": [85, 114], "invers": 85, "eg": 85, "uniqu": 85, "list_of_random_tupl": [85, 113], "y": [85, 99, 105, 113, 114], "may_ozerov_near_neighbor_tim": [85, 113], "vector_length": 85, "target_weight": 85, "neighbour": 85, "representations_asymptot": [85, 113], "weight_to_cancel": 85, "represent": [85, 87, 95, 113], "sum": [85, 114], "wrap": [85, 113], "f": [85, 114], "g": [85, 114], "helper": [85, 113], "scipi": 85, "framework": 85, "var_rang": 86, "sort": [86, 94], "constraint": [87, 95, 113], "gauss": [87, 95, 113], "tree": [87, 95, 113], "mayb": 88, "optional_paramet": 88, "may_ozerov": [88, 113], "dumer": [88, 113, 114], "prang": [88, 96, 113, 114], "stern": [88, 96, 113, 114], "workfactor_accuraci": 88, "3488": 88, "2720": 88, "64": [88, 105], "151": [88, 96], "460": 88, "49": 88, "814": 88, "39": 88, "448": 88, "86": 88, "221": 88, "141": [88, 105], "886": 88, "104": 88, "057": 88, "197": 88, "97": 88, "541": 88, "711": 88, "995": 88, "380": 88, "019": 88, "47": 88, "795": 88, "592": 88, "173": 88, "388": 88, "576": 88, "409": 88, "153": [88, 105], "405": 88, "587": 88, "217": [88, 105], "600": 88, "191": 88, "619": 88, "602": 88, "152": 88, "059": [88, 96], "172": 88, "385": 88, "608": 88, "092": 88, "447": 88, "015": 88, "min_max": [89, 97, 113], "bool": [89, 97, 112], "depend": [89, 97], "switch": [89, 97], "paramt": [90, 98], "sdfqalgorithm": [91, 92, 93, 94], "sdfqproblem": [91, 92, 93, 94, 98, 113], "lee": [91, 114], "brickel": [91, 114], "lb88": [91, 114], "961": [91, 96], "771": [91, 96], "48": [91, 96], "31928490910389": 91, "pet11": [93, 114], "hmp": 94, "match": 94, "310": 96, "794": 96, "016": 96, "basefield": 98, "is_syndrome_zero": 98, "uovestim": [99, 100, 101, 102, 103, 105, 106], "uovalgorithm": [99, 100, 101, 102, 103], "collisionattack": [99, 105, 113], "uovproblem": [99, 100, 101, 102, 103, 106, 113], "against": [99, 100, 102], "signatur": [99, 102, 114], "hash": [99, 106], "sign": 99, "paradigm": 99, "gray_code_eval_cost": 99, "grai": 99, "log": 99, "preimag": 99, "salt": 99, "space": 99, "uov": [99, 100, 102, 103], "uov_problem": [99, 100, 101, 102, 103, 113], "958": 99, "uov_algorithm": [99, 100, 101, 102, 113], "directattack": [100, 105, 113], "straightforward": 100, "cryptosystem": [100, 114], "aim": 100, "public": [100, 114], "kei": [100, 102, 105, 114], "tw12": 100, "get_fastest_mq_algorithm": [100, 113], "intersectionattack": [101, 105, 113], "intersect": 101, "behind": 101, "kipni": [101, 102, 114], "shamir": [101, 102, 114], "approach": [101, 114], "reconcili": 101, "kipnisshamir": [102, 105, 113], "_": 102, "balanc": 102, "oil": [102, 114], "vinegar": [102, 114], "2v": 102, "privat": 102, "arbitrari": 102, "messag": 102, "recoveri": 105, "forgeri": 105, "145": 105, "218": 105, "181": 105, "180": 105, "389": 105, "976": 105, "76": 105, "160": 105, "53": 105, "131": 105, "618": 105, "121": 105, "747": 105, "176": 105, "184": 105, "348": 105, "293": 105, "292": 105, "034": 105, "282": 105, "331": 105, "249": 105, "117": 105, "244": 105, "277": 105, "108": 105, "445": 105, "397": 105, "387": 105, "826": 105, "378": 105, "539": 105, "311": 105, "148": 105, "cost_one_hash": [106, 113], "hashes_to_basic_oper": [106, 113], "number_of_hash": 106, "func": 107, "decor": 107, "method": [107, 114], "basealgoritm": 107, "subclass": [107, 109], "alg": 109, "prob": 109, "include_tildeo": 109, "tildeo": [109, 112, 113], "esim": 109, "include_quantum": 109, "quyantum": 109, "estimationrender": [111, 113], "creat": 111, "render": 111, "as_tabl": [111, 113], "estimation_result": 111, "complexitytyp": [112, 113], "distinguish": 112, "normal": 112, "concat_all_t": [112, 113], "prettyt": 112, "concat_pretty_t": [112, 113], "t1": 112, "t2": 112, "merg": 112, "round_or_trunc": [112, 113], "eiter": 112, "els": 112, "decimi": 112, "sampl": 113, "manual": 113, "To": 113, "you": 113, "minim": 113, "document": [113, 114], "sagemath": 113, "guidelin": 113, "base_const": 113, "base_problem": 113, "base_estim": 113, "base_algorithm": 113, "estimation_render": 113, "mr_estim": 113, "mr_helper": 113, "mr_constant": 113, "big_k": 113, "kernel_search": 113, "support_minor": 113, "pe_estim": 113, "pe_problem": 113, "pe_algorithm": 113, "pe_const": 113, "pe_help": 113, "sd_problem": 113, "sd_algorithm": 113, "sd_constant": 113, "sd_estim": 113, "sd_helper": 113, "ball_collis": 113, "bjmm_pdw": 113, "bjmm_plu": 113, "bjmm_dw": 113, "both_mai": 113, "workfactor_help": 113, "dummy_estim": 113, "dummy_algorithm": 113, "dummy_algorithm1": 113, "regsd_algorithm": 113, "regsd_estim": 113, "regsd_problem": 113, "regsd_help": 113, "regsd_const": 113, "regisd_perm": 113, "regisd_enum": 113, "sd_attack": 113, "regisd_rep": 113, "sdfq_constant": 113, "sdfq_problem": 113, "sdfq_algorithm": 113, "sdfq_estim": 113, "sdfq_helper": 113, "pk_problem": 113, "pk_estim": 113, "pk_algorithm": 113, "pk_helper": 113, "pk_constant": 113, "uov_const": 113, "uov_estim": 113, "intersection_attack": 113, "collision_attack": 113, "kipnis_shamir": 113, "direct_attack": 113, "le_problem": 113, "le_algorithm": 113, "le_const": 113, "le_estim": 113, "le_help": 113, "mq_constant": 113, "mq_estim": 113, "degree_of_regular": 113, "witness_degre": 113, "mq_helper": 113, "dinur2": 113, "mht": 113, "hybrid_f5": 113, "kpg": 113, "dinur1": 113, "cgmta": 113, "exhaustive_search": 113, "booleansolve_fxl": 113, "hilbert": 113, "nmonomi": 113, "bibliograph": 113, "page": 113, "andrea": 114, "petteri": 114, "kaski": 114, "ryan": 114, "william": 114, "reduct": 114, "drop": 114, "dagstuhl": 114, "de": 114, "opu": 114, "volltext": 114, "2019": 114, "10602": 114, "pdf": 114, "lipic": 114, "icalp": 114, "antoin": 114, "joux": 114, "vanessa": 114, "vits": 114, "boolean": 114, "link": 114, "chapter": 114, "1007": 114, "978": 114, "76620": 114, "1_1": 114, "andr": 114, "esser": 114, "Not": 114, "just": 114, "eprint": 114, "iacr": 114, "org": 114, "2023": 114, "1568": 114, "aviad": 114, "jacqu": 114, "patarin": 114, "loui": 114, "goubin": 114, "unbalanc": 114, "540": 114, "48910": 114, "x_15": 114, "alessandro": 114, "barenghi": 114, "jean": 114, "francoi": 114, "biass": 114, "edoardo": 114, "persichetti": 114, "less": 114, "fm": 114, "fine": 114, "tune": 114, "doi": 114, "030": 114, "81293": 114, "5_2": 114, "floyd": 114, "zweyding": 114, "new": 114, "trade": 114, "off": 114, "practic": 114, "2022": 114, "1329": 114, "emanuel": 114, "bellini": 114, "2021": 114, "1243": 114, "alexand": 114, "ilya": 114, "662": 114, "46800": 114, "5_9": 114, "meurer": 114, "enrico": 114, "random": 114, "054n": 114, "642": 114, "25385": 114, "0_6": 114, "anja": 114, "becker": 114, "how": 114, "inform": 114, "2012": 114, "026": 114, "christian": 114, "peter": 114, "12929": 114, "2_7": 114, "charl": 114, "bouillaguet": 114, "hsieh": 114, "chung": 114, "chen": 114, "mou": 114, "cheng": 114, "tung": 114, "chou": 114, "ruben": 114, "niederhagen": 114, "adi": 114, "bo": 114, "yin": 114, "yang": 114, "fast": 114, "www": 114, "archiv": 114, "ches2010": 114, "62250195": 114, "daniel": 114, "bernstein": 114, "tanja": 114, "lang": 114, "defend": 114, "mceliec": 114, "88403": 114, "3_3": 114, "smaller": 114, "22792": 114, "9_42": 114, "ramamohan": 114, "paturi": 114, "suguru": 114, "tamaki": 114, "huacheng": 114, "yu": 114, "beat": 114, "brute": 114, "forc": 114, "peopl": 114, "csail": 114, "mit": 114, "edu": 114, "rrw": 114, "polyeqsoda2017submit": 114, "eliana": 114, "carozza": 114, "geoffroi": 114, "couteau": 114, "short": 114, "head": 114, "eurocrypt": 114, "1035": 114, "elian": 114, "koussa": 114, "gill": 114, "macario": 114, "rat": 114, "412": 114, "eugen": 114, "cyclic": 114, "1109": 114, "tit": 114, "1962": 114, "1057777": 114, "hiroyuki": 114, "miura": 114, "yasufumi": 114, "hashimoto": 114, "tsuyoshi": 114, "takagi": 114, "extend": 114, "multivari": 114, "38616": 114, "9_8": 114, "minimum": 114, "distanc": 114, "itai": 114, "arxiv": 114, "2005": 114, "04800": 114, "cryptanalyt": 114, "578": 114, "small": 114, "bfb0019850": 114, "jo\u00e3o": 114, "diogo": 114, "duart": 114, "jeffrei": 114, "automorph": 114, "group": 114, "correct": 114, "1982": 114, "1056498": 114, "luk": 114, "bettal": 114, "faug\u00e8r": 114, "ludov": 114, "perret": 114, "1515": 114, "jmc": 114, "2009": 114, "009": 114, "1145": 114, "2442829": 114, "2442843": 114, "leif": 114, "high": 114, "rate": 114, "impact": 114, "lpn": 114, "2017": 114, "1139": 114, "magali": 114, "bardet": 114, "bruno": 114, "salvi": 114, "pierr": 114, "spaenlehau": 114, "sciencedirect": 114, "scienc": 114, "articl": 114, "pii": 114, "s0885064x12000611": 114, "nicola": 114, "courtoi": 114, "klimov": 114, "effici": 114, "eurocrypt2000": 114, "1807": 114, "18070398": 114, "willi": 114, "meier": 114, "tacier": 114, "45664": 114, "3_15": 114, "sendrier": 114, "hal": 114, "inria": 114, "fr": 114, "00073037": 114, "pil": 114, "joong": 114, "ernest": 114, "observ": 114, "45961": 114, "8_25": 114, "marco": 114, "baldi": 114, "franco": 114, "chiaraluc": 114, "hard": 114, "1749": 114, "ward": 114, "enough": 114, "81652": 114, "0_15": 114}, "objects": {"cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[0, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[0, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[0, 2, 1, "", "attack_type"], [0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_access_cost"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "optimization_parameter_1"], [0, 3, 1, "", "optimization_parameter_2"], [0, 3, 1, "", "optimization_parameter_3"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator": [[1, 0, 0, "-", "dummy_algorithm"], [2, 0, 0, "-", "dummy_estimator"], [3, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[1, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[1, 2, 1, "", "attack_type"], [1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_access_cost"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[2, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[2, 3, 1, "", "algorithm_names"], [2, 3, 1, "", "algorithms"], [2, 2, 1, "", "bit_complexities"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "estimate"], [2, 2, 1, "", "estimator_type"], [2, 4, 1, "", "excluded_algorithms_by_default"], [2, 3, 1, "", "fastest_algorithm"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "nalgorithms"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[3, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[3, 3, 1, "", "expected_number_solutions"], [3, 3, 1, "", "get_parameters"], [3, 3, 1, "", "to_bitcomplexity_memory"], [3, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.LEEstimator.LEAlgorithms": [[4, 0, 0, "-", "bbps"], [5, 0, 0, "-", "beullens"], [6, 0, 0, "-", "leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps": [[4, 1, 1, "", "BBPS"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS": [[4, 2, 1, "", "attack_type"], [4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "get_optimal_parameters_dict"], [4, 3, 1, "", "has_optimal_parameter"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "memory_access_cost"], [4, 3, 1, "", "memory_complexity"], [4, 3, 1, "", "optimal_parameters"], [4, 3, 1, "", "parameter_names"], [4, 2, 1, "", "parameter_ranges"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "set_parameter_ranges"], [4, 3, 1, "", "set_parameters"], [4, 3, 1, "", "time_complexity"], [4, 3, 1, "", "w"], [4, 3, 1, "", "w_prime"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens": [[5, 1, 1, "", "Beullens"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens": [[5, 2, 1, "", "attack_type"], [5, 2, 1, "", "complexity_type"], [5, 3, 1, "", "get_optimal_parameters_dict"], [5, 3, 1, "", "has_optimal_parameter"], [5, 2, 1, "", "memory_access"], [5, 3, 1, "", "memory_access_cost"], [5, 3, 1, "", "memory_complexity"], [5, 3, 1, "", "optimal_parameters"], [5, 3, 1, "", "parameter_names"], [5, 2, 1, "", "parameter_ranges"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "set_parameter_ranges"], [5, 3, 1, "", "set_parameters"], [5, 3, 1, "", "time_complexity"], [5, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon": [[6, 1, 1, "", "Leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon": [[6, 2, 1, "", "attack_type"], [6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "get_optimal_parameters_dict"], [6, 3, 1, "", "has_optimal_parameter"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "memory_access_cost"], [6, 3, 1, "", "memory_complexity"], [6, 3, 1, "", "optimal_parameters"], [6, 3, 1, "", "parameter_names"], [6, 2, 1, "", "parameter_ranges"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "set_parameter_ranges"], [6, 3, 1, "", "set_parameters"], [6, 3, 1, "", "time_complexity"], [6, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator": [[7, 0, 0, "-", "le_algorithm"], [8, 0, 0, "-", "le_constants"], [9, 0, 0, "-", "le_estimator"], [10, 0, 0, "-", "le_helper"], [11, 0, 0, "-", "le_problem"]], "cryptographic_estimators.LEEstimator.le_algorithm": [[7, 1, 1, "", "LEAlgorithm"]], "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm": [[7, 2, 1, "", "attack_type"], [7, 2, 1, "", "complexity_type"], [7, 3, 1, "", "get_optimal_parameters_dict"], [7, 3, 1, "", "has_optimal_parameter"], [7, 2, 1, "", "memory_access"], [7, 3, 1, "", "memory_access_cost"], [7, 3, 1, "", "memory_complexity"], [7, 3, 1, "", "optimal_parameters"], [7, 3, 1, "", "parameter_names"], [7, 2, 1, "", "parameter_ranges"], [7, 3, 1, "", "reset"], [7, 3, 1, "", "set_parameter_ranges"], [7, 3, 1, "", "set_parameters"], [7, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator.le_constants": [[8, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation": [[8, 4, 1, "", "ISD"], [8, 4, 1, "", "LISTS"], [8, 4, 1, "", "LISTS_SIZE"], [8, 4, 1, "", "NORMAL_FORM"], [8, 4, 1, "", "NW"]], "cryptographic_estimators.LEEstimator.le_estimator": [[9, 1, 1, "", "LEEstimator"]], "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator": [[9, 3, 1, "", "algorithm_names"], [9, 3, 1, "", "algorithms"], [9, 2, 1, "", "bit_complexities"], [9, 2, 1, "", "complexity_type"], [9, 3, 1, "", "estimate"], [9, 2, 1, "", "estimator_type"], [9, 4, 1, "", "excluded_algorithms_by_default"], [9, 3, 1, "", "fastest_algorithm"], [9, 2, 1, "", "memory_access"], [9, 3, 1, "", "nalgorithms"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "table"]], "cryptographic_estimators.LEEstimator.le_helper": [[10, 5, 1, "", "cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.LEEstimator.le_problem": [[11, 1, 1, "", "LEProblem"]], "cryptographic_estimators.LEEstimator.le_problem.LEProblem": [[11, 3, 1, "", "expected_number_solutions"], [11, 3, 1, "", "get_parameters"], [11, 3, 1, "", "to_bitcomplexity_memory"], [11, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[12, 0, 0, "-", "bjorklund"], [13, 0, 0, "-", "booleansolve_fxl"], [14, 0, 0, "-", "cgmta"], [15, 0, 0, "-", "crossbred"], [16, 0, 0, "-", "dinur1"], [17, 0, 0, "-", "dinur2"], [18, 0, 0, "-", "exhaustive_search"], [19, 0, 0, "-", "f5"], [20, 0, 0, "-", "hybrid_f5"], [21, 0, 0, "-", "kpg"], [22, 0, 0, "-", "lokshtanov"], [23, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[12, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[12, 2, 1, "", "attack_type"], [12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "get_reduced_parameters"], [12, 3, 1, "", "has_optimal_parameter"], [12, 3, 1, "", "lambda_"], [12, 3, 1, "", "linear_algebra_constant"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_access_cost"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "npolynomials_reduced"], [12, 3, 1, "", "nvariables_reduced"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl": [[13, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL": [[13, 2, 1, "", "attack_type"], [13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "get_reduced_parameters"], [13, 3, 1, "", "has_optimal_parameter"], [13, 3, 1, "", "k"], [13, 3, 1, "", "linear_algebra_constant"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_access_cost"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "npolynomials_reduced"], [13, 3, 1, "", "nvariables_reduced"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"], [13, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[14, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[14, 2, 1, "", "attack_type"], [14, 2, 1, "", "complexity_type"], [14, 3, 1, "", "get_optimal_parameters_dict"], [14, 3, 1, "", "get_reduced_parameters"], [14, 3, 1, "", "has_optimal_parameter"], [14, 3, 1, "", "linear_algebra_constant"], [14, 2, 1, "", "memory_access"], [14, 3, 1, "", "memory_access_cost"], [14, 3, 1, "", "memory_complexity"], [14, 3, 1, "", "npolynomials_reduced"], [14, 3, 1, "", "nvariables_reduced"], [14, 3, 1, "", "optimal_parameters"], [14, 3, 1, "", "parameter_names"], [14, 2, 1, "", "parameter_ranges"], [14, 3, 1, "", "reset"], [14, 3, 1, "", "set_parameter_ranges"], [14, 3, 1, "", "set_parameters"], [14, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[15, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[15, 3, 1, "", "D"], [15, 2, 1, "", "attack_type"], [15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "d"], [15, 3, 1, "", "get_optimal_parameters_dict"], [15, 3, 1, "", "get_reduced_parameters"], [15, 3, 1, "", "has_optimal_parameter"], [15, 3, 1, "", "k"], [15, 3, 1, "", "linear_algebra_constant"], [15, 2, 1, "", "max_D"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "memory_access_cost"], [15, 3, 1, "", "memory_complexity"], [15, 3, 1, "", "npolynomials_reduced"], [15, 3, 1, "", "nvariables_reduced"], [15, 3, 1, "", "optimal_parameters"], [15, 3, 1, "", "parameter_names"], [15, 2, 1, "", "parameter_ranges"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "set_parameter_ranges"], [15, 3, 1, "", "set_parameters"], [15, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[16, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[16, 2, 1, "", "attack_type"], [16, 2, 1, "", "complexity_type"], [16, 3, 1, "", "get_optimal_parameters_dict"], [16, 3, 1, "", "get_reduced_parameters"], [16, 3, 1, "", "has_optimal_parameter"], [16, 3, 1, "", "kappa"], [16, 3, 1, "", "lambda_"], [16, 3, 1, "", "linear_algebra_constant"], [16, 2, 1, "", "memory_access"], [16, 3, 1, "", "memory_access_cost"], [16, 3, 1, "", "memory_complexity"], [16, 3, 1, "", "npolynomials_reduced"], [16, 3, 1, "", "nvariables_reduced"], [16, 3, 1, "", "optimal_parameters"], [16, 3, 1, "", "parameter_names"], [16, 2, 1, "", "parameter_ranges"], [16, 3, 1, "", "reset"], [16, 3, 1, "", "set_parameter_ranges"], [16, 3, 1, "", "set_parameters"], [16, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[17, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[17, 2, 1, "", "attack_type"], [17, 2, 1, "", "complexity_type"], [17, 3, 1, "", "get_optimal_parameters_dict"], [17, 3, 1, "", "get_reduced_parameters"], [17, 3, 1, "", "has_optimal_parameter"], [17, 3, 1, "", "linear_algebra_constant"], [17, 2, 1, "", "memory_access"], [17, 3, 1, "", "memory_access_cost"], [17, 3, 1, "", "memory_complexity"], [17, 3, 1, "", "n1"], [17, 3, 1, "", "npolynomials_reduced"], [17, 3, 1, "", "nvariables_reduced"], [17, 3, 1, "", "optimal_parameters"], [17, 3, 1, "", "parameter_names"], [17, 2, 1, "", "parameter_ranges"], [17, 3, 1, "", "reset"], [17, 3, 1, "", "set_parameter_ranges"], [17, 3, 1, "", "set_parameters"], [17, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[18, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[18, 2, 1, "", "attack_type"], [18, 2, 1, "", "complexity_type"], [18, 3, 1, "", "get_optimal_parameters_dict"], [18, 3, 1, "", "get_reduced_parameters"], [18, 3, 1, "", "has_optimal_parameter"], [18, 3, 1, "", "linear_algebra_constant"], [18, 2, 1, "", "memory_access"], [18, 3, 1, "", "memory_access_cost"], [18, 3, 1, "", "memory_complexity"], [18, 3, 1, "", "npolynomials_reduced"], [18, 3, 1, "", "nvariables_reduced"], [18, 3, 1, "", "optimal_parameters"], [18, 3, 1, "", "parameter_names"], [18, 2, 1, "", "parameter_ranges"], [18, 3, 1, "", "reset"], [18, 3, 1, "", "set_parameter_ranges"], [18, 3, 1, "", "set_parameters"], [18, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[19, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[19, 2, 1, "", "attack_type"], [19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "degree_of_polynomials"], [19, 3, 1, "", "get_optimal_parameters_dict"], [19, 3, 1, "", "get_reduced_parameters"], [19, 3, 1, "", "has_optimal_parameter"], [19, 3, 1, "", "linear_algebra_constant"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "memory_access_cost"], [19, 3, 1, "", "memory_complexity"], [19, 3, 1, "", "npolynomials_reduced"], [19, 3, 1, "", "nvariables_reduced"], [19, 3, 1, "", "optimal_parameters"], [19, 3, 1, "", "parameter_names"], [19, 2, 1, "", "parameter_ranges"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "set_parameter_ranges"], [19, 3, 1, "", "set_parameters"], [19, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[20, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[20, 2, 1, "", "attack_type"], [20, 2, 1, "", "complexity_type"], [20, 3, 1, "", "degree_of_polynomials"], [20, 3, 1, "", "get_optimal_parameters_dict"], [20, 3, 1, "", "get_reduced_parameters"], [20, 3, 1, "", "has_optimal_parameter"], [20, 3, 1, "", "k"], [20, 3, 1, "", "linear_algebra_constant"], [20, 2, 1, "", "memory_access"], [20, 3, 1, "", "memory_access_cost"], [20, 3, 1, "", "memory_complexity"], [20, 3, 1, "", "npolynomials_reduced"], [20, 3, 1, "", "nvariables_reduced"], [20, 3, 1, "", "optimal_parameters"], [20, 3, 1, "", "parameter_names"], [20, 2, 1, "", "parameter_ranges"], [20, 3, 1, "", "reset"], [20, 3, 1, "", "set_parameter_ranges"], [20, 3, 1, "", "set_parameters"], [20, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[21, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[21, 2, 1, "", "attack_type"], [21, 2, 1, "", "complexity_type"], [21, 3, 1, "", "get_optimal_parameters_dict"], [21, 3, 1, "", "get_reduced_parameters"], [21, 3, 1, "", "has_optimal_parameter"], [21, 3, 1, "", "linear_algebra_constant"], [21, 2, 1, "", "memory_access"], [21, 3, 1, "", "memory_access_cost"], [21, 3, 1, "", "memory_complexity"], [21, 3, 1, "", "npolynomials_reduced"], [21, 3, 1, "", "nvariables_reduced"], [21, 3, 1, "", "optimal_parameters"], [21, 3, 1, "", "parameter_names"], [21, 2, 1, "", "parameter_ranges"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "set_parameter_ranges"], [21, 3, 1, "", "set_parameters"], [21, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[22, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[22, 2, 1, "", "attack_type"], [22, 2, 1, "", "complexity_type"], [22, 3, 1, "", "delta"], [22, 3, 1, "", "get_optimal_parameters_dict"], [22, 3, 1, "", "get_reduced_parameters"], [22, 3, 1, "", "has_optimal_parameter"], [22, 3, 1, "", "linear_algebra_constant"], [22, 2, 1, "", "memory_access"], [22, 3, 1, "", "memory_access_cost"], [22, 3, 1, "", "memory_complexity"], [22, 3, 1, "", "npolynomials_reduced"], [22, 3, 1, "", "nvariables_reduced"], [22, 3, 1, "", "optimal_parameters"], [22, 3, 1, "", "parameter_names"], [22, 2, 1, "", "parameter_ranges"], [22, 3, 1, "", "reset"], [22, 3, 1, "", "set_parameter_ranges"], [22, 3, 1, "", "set_parameters"], [22, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[23, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[23, 2, 1, "", "attack_type"], [23, 2, 1, "", "complexity_type"], [23, 3, 1, "", "get_optimal_parameters_dict"], [23, 3, 1, "", "get_reduced_parameters"], [23, 3, 1, "", "has_optimal_parameter"], [23, 3, 1, "", "linear_algebra_constant"], [23, 2, 1, "", "memory_access"], [23, 3, 1, "", "memory_access_cost"], [23, 3, 1, "", "memory_complexity"], [23, 3, 1, "", "npolynomials_reduced"], [23, 3, 1, "", "nvariables_reduced"], [23, 3, 1, "", "optimal_parameters"], [23, 3, 1, "", "parameter_names"], [23, 2, 1, "", "parameter_ranges"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "set_parameter_ranges"], [23, 3, 1, "", "set_parameters"], [23, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator": [[24, 0, 0, "-", "degree_of_regularity"], [25, 0, 0, "-", "mq_algorithm"], [26, 0, 0, "-", "mq_constants"], [27, 0, 0, "-", "mq_estimator"], [28, 0, 0, "-", "mq_helper"], [29, 0, 0, "-", "mq_problem"], [32, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[24, 5, 1, "", "generic_system"], [24, 5, 1, "", "quadratic_system"], [24, 5, 1, "", "regular_system"], [24, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[25, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[25, 2, 1, "", "attack_type"], [25, 2, 1, "", "complexity_type"], [25, 3, 1, "", "get_optimal_parameters_dict"], [25, 3, 1, "", "get_reduced_parameters"], [25, 3, 1, "", "has_optimal_parameter"], [25, 3, 1, "", "linear_algebra_constant"], [25, 2, 1, "", "memory_access"], [25, 3, 1, "", "memory_access_cost"], [25, 3, 1, "", "memory_complexity"], [25, 3, 1, "", "npolynomials_reduced"], [25, 3, 1, "", "nvariables_reduced"], [25, 3, 1, "", "optimal_parameters"], [25, 3, 1, "", "parameter_names"], [25, 2, 1, "", "parameter_ranges"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "set_parameter_ranges"], [25, 3, 1, "", "set_parameters"], [25, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[27, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[27, 3, 1, "", "algorithm_names"], [27, 3, 1, "", "algorithms"], [27, 2, 1, "", "bit_complexities"], [27, 2, 1, "", "complexity_type"], [27, 3, 1, "", "estimate"], [27, 2, 1, "", "estimator_type"], [27, 4, 1, "", "excluded_algorithms_by_default"], [27, 3, 1, "", "fastest_algorithm"], [27, 2, 1, "", "memory_access"], [27, 3, 1, "", "nalgorithms"], [27, 3, 1, "", "reset"], [27, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[28, 5, 1, "", "ngates"], [28, 5, 1, "", "nmonomials_of_degree"], [28, 5, 1, "", "nmonomials_up_to_degree"], [28, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[29, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[29, 3, 1, "", "expected_number_solutions"], [29, 3, 1, "", "get_parameters"], [29, 3, 1, "", "get_problem_parameters"], [29, 3, 1, "", "is_defined_over_finite_field"], [29, 3, 1, "", "is_overdefined_system"], [29, 3, 1, "", "is_square_system"], [29, 3, 1, "", "is_underdefined_system"], [29, 3, 1, "", "npolynomials"], [29, 3, 1, "", "nvariables"], [29, 3, 1, "", "order_of_the_field"], [29, 2, 1, "", "theta"], [29, 3, 1, "", "to_bitcomplexity_memory"], [29, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[30, 0, 0, "-", "hilbert"], [31, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[30, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[30, 2, 1, "", "degrees"], [30, 3, 1, "", "first_nonpositive_integer"], [30, 2, 1, "", "npolynomials"], [30, 2, 1, "", "nvariables"], [30, 2, 1, "", "precision"], [30, 2, 1, "", "ring"], [30, 2, 1, "", "series"], [30, 2, 1, "", "series_up_to_degree"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[31, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[31, 3, 1, "", "nmonomials_of_degree"], [31, 3, 1, "", "nmonomials_up_to_degree"], [31, 3, 1, "", "series_monomials_of_degree"], [31, 3, 1, "", "series_monomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[32, 5, 1, "", "quadratic_system"], [32, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MREstimator.MRAlgorithms": [[33, 0, 0, "-", "big_k"], [34, 0, 0, "-", "bruteforce"], [35, 0, 0, "-", "kernel_search"], [36, 0, 0, "-", "minors"], [37, 0, 0, "-", "support_minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k": [[33, 1, 1, "", "BigK"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK": [[33, 3, 1, "", "a"], [33, 2, 1, "", "attack_type"], [33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "cost_reduction"], [33, 3, 1, "", "get_optimal_parameters_dict"], [33, 3, 1, "", "get_problem_parameters_reduced"], [33, 3, 1, "", "has_optimal_parameter"], [33, 3, 1, "", "hybridization_factor"], [33, 3, 1, "", "linear_algebra_constant"], [33, 3, 1, "", "lv"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "memory_access_cost"], [33, 3, 1, "", "memory_complexity"], [33, 3, 1, "", "optimal_parameters"], [33, 3, 1, "", "parameter_names"], [33, 2, 1, "", "parameter_ranges"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_parameter_ranges"], [33, 3, 1, "", "set_parameters"], [33, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce": [[34, 1, 1, "", "BruteForce"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce": [[34, 3, 1, "", "a"], [34, 2, 1, "", "attack_type"], [34, 2, 1, "", "complexity_type"], [34, 3, 1, "", "cost_reduction"], [34, 3, 1, "", "get_optimal_parameters_dict"], [34, 3, 1, "", "get_problem_parameters_reduced"], [34, 3, 1, "", "has_optimal_parameter"], [34, 3, 1, "", "hybridization_factor"], [34, 3, 1, "", "linear_algebra_constant"], [34, 3, 1, "", "lv"], [34, 2, 1, "", "memory_access"], [34, 3, 1, "", "memory_access_cost"], [34, 3, 1, "", "memory_complexity"], [34, 3, 1, "", "optimal_parameters"], [34, 3, 1, "", "parameter_names"], [34, 2, 1, "", "parameter_ranges"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_parameter_ranges"], [34, 3, 1, "", "set_parameters"], [34, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search": [[35, 1, 1, "", "KernelSearch"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch": [[35, 3, 1, "", "a"], [35, 2, 1, "", "attack_type"], [35, 2, 1, "", "complexity_type"], [35, 3, 1, "", "cost_reduction"], [35, 3, 1, "", "get_optimal_parameters_dict"], [35, 3, 1, "", "get_problem_parameters_reduced"], [35, 3, 1, "", "has_optimal_parameter"], [35, 3, 1, "", "hybridization_factor"], [35, 3, 1, "", "linear_algebra_constant"], [35, 3, 1, "", "lv"], [35, 2, 1, "", "memory_access"], [35, 3, 1, "", "memory_access_cost"], [35, 3, 1, "", "memory_complexity"], [35, 3, 1, "", "optimal_parameters"], [35, 3, 1, "", "parameter_names"], [35, 2, 1, "", "parameter_ranges"], [35, 3, 1, "", "reset"], [35, 3, 1, "", "set_parameter_ranges"], [35, 3, 1, "", "set_parameters"], [35, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors": [[36, 1, 1, "", "Minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors": [[36, 3, 1, "", "a"], [36, 2, 1, "", "attack_type"], [36, 2, 1, "", "complexity_type"], [36, 3, 1, "", "cost_reduction"], [36, 3, 1, "", "get_optimal_parameters_dict"], [36, 3, 1, "", "get_problem_parameters_reduced"], [36, 3, 1, "", "has_optimal_parameter"], [36, 3, 1, "", "hybridization_factor"], [36, 3, 1, "", "linear_algebra_constant"], [36, 3, 1, "", "lv"], [36, 2, 1, "", "memory_access"], [36, 3, 1, "", "memory_access_cost"], [36, 3, 1, "", "memory_complexity"], [36, 3, 1, "", "optimal_parameters"], [36, 3, 1, "", "parameter_names"], [36, 2, 1, "", "parameter_ranges"], [36, 3, 1, "", "reset"], [36, 3, 1, "", "set_parameter_ranges"], [36, 3, 1, "", "set_parameters"], [36, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors": [[37, 1, 1, "", "SupportMinors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors": [[37, 3, 1, "", "a"], [37, 2, 1, "", "attack_type"], [37, 3, 1, "", "b"], [37, 2, 1, "", "complexity_type"], [37, 3, 1, "", "cost_reduction"], [37, 3, 1, "", "get_optimal_parameters_dict"], [37, 3, 1, "", "get_problem_parameters_reduced"], [37, 3, 1, "", "has_optimal_parameter"], [37, 3, 1, "", "hybridization_factor"], [37, 3, 1, "", "linear_algebra_constant"], [37, 3, 1, "", "lv"], [37, 2, 1, "", "memory_access"], [37, 3, 1, "", "memory_access_cost"], [37, 3, 1, "", "memory_complexity"], [37, 3, 1, "", "nprime"], [37, 3, 1, "", "optimal_parameters"], [37, 3, 1, "", "parameter_names"], [37, 2, 1, "", "parameter_ranges"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "set_parameter_ranges"], [37, 3, 1, "", "set_parameters"], [37, 3, 1, "", "time_complexity"], [37, 3, 1, "", "variant"]], "cryptographic_estimators.MREstimator": [[38, 0, 0, "-", "mr_algorithm"], [39, 0, 0, "-", "mr_constants"], [40, 0, 0, "-", "mr_estimator"], [41, 0, 0, "-", "mr_helper"], [42, 0, 0, "-", "mr_problem"]], "cryptographic_estimators.MREstimator.mr_algorithm": [[38, 1, 1, "", "MRAlgorithm"]], "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm": [[38, 2, 1, "", "attack_type"], [38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "cost_reduction"], [38, 3, 1, "", "get_optimal_parameters_dict"], [38, 3, 1, "", "get_problem_parameters_reduced"], [38, 3, 1, "", "has_optimal_parameter"], [38, 3, 1, "", "hybridization_factor"], [38, 3, 1, "", "linear_algebra_constant"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "memory_access_cost"], [38, 3, 1, "", "memory_complexity"], [38, 3, 1, "", "optimal_parameters"], [38, 3, 1, "", "parameter_names"], [38, 2, 1, "", "parameter_ranges"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "set_parameter_ranges"], [38, 3, 1, "", "set_parameters"], [38, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.mr_estimator": [[40, 1, 1, "", "MREstimator"]], "cryptographic_estimators.MREstimator.mr_estimator.MREstimator": [[40, 3, 1, "", "algorithm_names"], [40, 3, 1, "", "algorithms"], [40, 2, 1, "", "bit_complexities"], [40, 2, 1, "", "complexity_type"], [40, 3, 1, "", "estimate"], [40, 2, 1, "", "estimator_type"], [40, 4, 1, "", "excluded_algorithms_by_default"], [40, 3, 1, "", "fastest_algorithm"], [40, 2, 1, "", "memory_access"], [40, 3, 1, "", "nalgorithms"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "table"]], "cryptographic_estimators.MREstimator.mr_helper": [[41, 1, 1, "", "Variant"], [41, 5, 1, "", "deteterminant_of_A"], [41, 5, 1, "", "entry_i_j_of_A"], [41, 5, 1, "", "matrix_A"], [41, 5, 1, "", "minors_polynomial"], [41, 5, 1, "", "minors_series"]], "cryptographic_estimators.MREstimator.mr_helper.Variant": [[41, 4, 1, "", "block_wiedemann"], [41, 4, 1, "", "strassen"]], "cryptographic_estimators.MREstimator.mr_problem": [[42, 1, 1, "", "MRProblem"]], "cryptographic_estimators.MREstimator.mr_problem.MRProblem": [[42, 3, 1, "", "expected_number_solutions"], [42, 3, 1, "", "get_parameters"], [42, 3, 1, "", "length_solution_vector"], [42, 3, 1, "", "ncolumns"], [42, 3, 1, "", "nmatrices"], [42, 3, 1, "", "nrows"], [42, 3, 1, "", "order_of_the_field"], [42, 3, 1, "", "target_rank"], [42, 2, 1, "", "theta"], [42, 3, 1, "", "to_bitcomplexity_memory"], [42, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PEEstimator.PEAlgorithms": [[43, 0, 0, "-", "beullens"], [44, 0, 0, "-", "leon"], [45, 0, 0, "-", "ssa"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens": [[43, 1, 1, "", "Beullens"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens": [[43, 2, 1, "", "attack_type"], [43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "get_optimal_parameters_dict"], [43, 3, 1, "", "has_optimal_parameter"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "memory_access_cost"], [43, 3, 1, "", "memory_complexity"], [43, 3, 1, "", "optimal_parameters"], [43, 3, 1, "", "parameter_names"], [43, 2, 1, "", "parameter_ranges"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_parameter_ranges"], [43, 3, 1, "", "set_parameters"], [43, 3, 1, "", "time_complexity"], [43, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon": [[44, 1, 1, "", "Leon"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon": [[44, 2, 1, "", "attack_type"], [44, 2, 1, "", "complexity_type"], [44, 3, 1, "", "get_optimal_parameters_dict"], [44, 3, 1, "", "has_optimal_parameter"], [44, 2, 1, "", "memory_access"], [44, 3, 1, "", "memory_access_cost"], [44, 3, 1, "", "memory_complexity"], [44, 3, 1, "", "optimal_parameters"], [44, 3, 1, "", "parameter_names"], [44, 2, 1, "", "parameter_ranges"], [44, 3, 1, "", "reset"], [44, 3, 1, "", "set_parameter_ranges"], [44, 3, 1, "", "set_parameters"], [44, 3, 1, "", "time_complexity"], [44, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa": [[45, 1, 1, "", "SSA"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA": [[45, 2, 1, "", "attack_type"], [45, 2, 1, "", "complexity_type"], [45, 3, 1, "", "get_optimal_parameters_dict"], [45, 3, 1, "", "has_optimal_parameter"], [45, 2, 1, "", "memory_access"], [45, 3, 1, "", "memory_access_cost"], [45, 3, 1, "", "memory_complexity"], [45, 3, 1, "", "optimal_parameters"], [45, 3, 1, "", "parameter_names"], [45, 2, 1, "", "parameter_ranges"], [45, 3, 1, "", "reset"], [45, 3, 1, "", "set_parameter_ranges"], [45, 3, 1, "", "set_parameters"], [45, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator": [[46, 0, 0, "-", "pe_algorithm"], [47, 0, 0, "-", "pe_constants"], [48, 0, 0, "-", "pe_estimator"], [49, 0, 0, "-", "pe_helper"], [50, 0, 0, "-", "pe_problem"]], "cryptographic_estimators.PEEstimator.pe_algorithm": [[46, 1, 1, "", "PEAlgorithm"]], "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm": [[46, 2, 1, "", "attack_type"], [46, 2, 1, "", "complexity_type"], [46, 3, 1, "", "get_optimal_parameters_dict"], [46, 3, 1, "", "has_optimal_parameter"], [46, 2, 1, "", "memory_access"], [46, 3, 1, "", "memory_access_cost"], [46, 3, 1, "", "memory_complexity"], [46, 3, 1, "", "optimal_parameters"], [46, 3, 1, "", "parameter_names"], [46, 2, 1, "", "parameter_ranges"], [46, 3, 1, "", "reset"], [46, 3, 1, "", "set_parameter_ranges"], [46, 3, 1, "", "set_parameters"], [46, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_constants": [[47, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation": [[47, 4, 1, "", "LISTS_SIZE"], [47, 4, 1, "", "LIST_COMPUTATION"], [47, 4, 1, "", "NORMAL_FORM"]], "cryptographic_estimators.PEEstimator.pe_estimator": [[48, 1, 1, "", "PEEstimator"]], "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator": [[48, 3, 1, "", "algorithm_names"], [48, 3, 1, "", "algorithms"], [48, 2, 1, "", "bit_complexities"], [48, 2, 1, "", "complexity_type"], [48, 3, 1, "", "estimate"], [48, 2, 1, "", "estimator_type"], [48, 4, 1, "", "excluded_algorithms_by_default"], [48, 3, 1, "", "fastest_algorithm"], [48, 2, 1, "", "memory_access"], [48, 3, 1, "", "nalgorithms"], [48, 3, 1, "", "reset"], [48, 3, 1, "", "table"]], "cryptographic_estimators.PEEstimator.pe_helper": [[49, 5, 1, "", "gv_distance"], [49, 5, 1, "", "hamming_ball"], [49, 5, 1, "", "median_size_of_random_orbit"], [49, 5, 1, "", "number_of_weight_d_codewords"], [49, 5, 1, "", "random_sparse_vec_orbit"]], "cryptographic_estimators.PEEstimator.pe_problem": [[50, 1, 1, "", "PEProblem"]], "cryptographic_estimators.PEEstimator.pe_problem.PEProblem": [[50, 3, 1, "", "expected_number_solutions"], [50, 3, 1, "", "get_parameters"], [50, 3, 1, "", "to_bitcomplexity_memory"], [50, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PKEstimator.PKAlgorithms": [[51, 0, 0, "-", "kmp"], [52, 0, 0, "-", "sbc"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp": [[51, 1, 1, "", "KMP"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP": [[51, 2, 1, "", "attack_type"], [51, 2, 1, "", "complexity_type"], [51, 3, 1, "", "get_optimal_parameters_dict"], [51, 3, 1, "", "has_optimal_parameter"], [51, 2, 1, "", "memory_access"], [51, 3, 1, "", "memory_access_cost"], [51, 3, 1, "", "memory_complexity"], [51, 3, 1, "", "optimal_parameters"], [51, 3, 1, "", "parameter_names"], [51, 2, 1, "", "parameter_ranges"], [51, 3, 1, "", "reset"], [51, 3, 1, "", "set_parameter_ranges"], [51, 3, 1, "", "set_parameters"], [51, 3, 1, "", "time_complexity"], [51, 3, 1, "", "u"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc": [[52, 1, 1, "", "SBC"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC": [[52, 2, 1, "", "attack_type"], [52, 2, 1, "", "complexity_type"], [52, 3, 1, "", "d"], [52, 3, 1, "", "get_optimal_parameters_dict"], [52, 3, 1, "", "has_optimal_parameter"], [52, 2, 1, "", "memory_access"], [52, 3, 1, "", "memory_access_cost"], [52, 3, 1, "", "memory_complexity"], [52, 3, 1, "", "optimal_parameters"], [52, 3, 1, "", "parameter_names"], [52, 2, 1, "", "parameter_ranges"], [52, 3, 1, "", "reset"], [52, 3, 1, "", "set_parameter_ranges"], [52, 3, 1, "", "set_parameters"], [52, 3, 1, "", "time_complexity"], [52, 3, 1, "", "w"], [52, 3, 1, "", "w1"]], "cryptographic_estimators.PKEstimator": [[53, 0, 0, "-", "pk_algorithm"], [54, 0, 0, "-", "pk_constants"], [55, 0, 0, "-", "pk_estimator"], [56, 0, 0, "-", "pk_helper"], [57, 0, 0, "-", "pk_problem"]], "cryptographic_estimators.PKEstimator.pk_algorithm": [[53, 1, 1, "", "PKAlgorithm"]], "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm": [[53, 2, 1, "", "attack_type"], [53, 2, 1, "", "complexity_type"], [53, 3, 1, "", "get_optimal_parameters_dict"], [53, 3, 1, "", "has_optimal_parameter"], [53, 2, 1, "", "memory_access"], [53, 3, 1, "", "memory_access_cost"], [53, 3, 1, "", "memory_complexity"], [53, 3, 1, "", "optimal_parameters"], [53, 3, 1, "", "parameter_names"], [53, 2, 1, "", "parameter_ranges"], [53, 3, 1, "", "reset"], [53, 3, 1, "", "set_parameter_ranges"], [53, 3, 1, "", "set_parameters"], [53, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator.pk_constants": [[54, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation": [[54, 4, 1, "", "KMP_FINAL_LIST"], [54, 4, 1, "", "KMP_L1"], [54, 4, 1, "", "KMP_L2"], [54, 4, 1, "", "SBC_ISD"], [54, 4, 1, "", "SBC_U"]], "cryptographic_estimators.PKEstimator.pk_estimator": [[55, 1, 1, "", "PKEstimator"]], "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator": [[55, 3, 1, "", "algorithm_names"], [55, 3, 1, "", "algorithms"], [55, 2, 1, "", "bit_complexities"], [55, 2, 1, "", "complexity_type"], [55, 3, 1, "", "estimate"], [55, 2, 1, "", "estimator_type"], [55, 4, 1, "", "excluded_algorithms_by_default"], [55, 3, 1, "", "fastest_algorithm"], [55, 2, 1, "", "memory_access"], [55, 3, 1, "", "nalgorithms"], [55, 3, 1, "", "reset"], [55, 3, 1, "", "table"]], "cryptographic_estimators.PKEstimator.pk_helper": [[56, 5, 1, "", "beullens_lee_brickell_adaptation"], [56, 5, 1, "", "cost_for_finding_subcode"], [56, 5, 1, "", "gauss_binomial"], [56, 5, 1, "", "lof"]], "cryptographic_estimators.PKEstimator.pk_problem": [[57, 1, 1, "", "PKProblem"]], "cryptographic_estimators.PKEstimator.pk_problem.PKProblem": [[57, 3, 1, "", "expected_number_solutions"], [57, 3, 1, "", "get_parameters"], [57, 3, 1, "", "to_bitcomplexity_memory"], [57, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms": [[58, 0, 0, "-", "ccj"], [59, 0, 0, "-", "regisd_enum"], [60, 0, 0, "-", "regisd_perm"], [61, 0, 0, "-", "regisd_rep"], [62, 0, 0, "-", "sd_attack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj": [[58, 1, 1, "", "CCJ"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ": [[58, 2, 1, "", "attack_type"], [58, 2, 1, "", "complexity_type"], [58, 3, 1, "", "ell"], [58, 3, 1, "", "get_optimal_parameters_dict"], [58, 3, 1, "", "has_optimal_parameter"], [58, 2, 1, "", "memory_access"], [58, 3, 1, "", "memory_access_cost"], [58, 3, 1, "", "memory_complexity"], [58, 3, 1, "", "optimal_parameters"], [58, 3, 1, "", "parameter_names"], [58, 2, 1, "", "parameter_ranges"], [58, 3, 1, "", "reset"], [58, 3, 1, "", "set_parameter_ranges"], [58, 3, 1, "", "set_parameters"], [58, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum": [[59, 1, 1, "", "RegularISDEnum"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum": [[59, 2, 1, "", "attack_type"], [59, 2, 1, "", "complexity_type"], [59, 3, 1, "", "ell"], [59, 3, 1, "", "get_optimal_parameters_dict"], [59, 3, 1, "", "has_optimal_parameter"], [59, 2, 1, "", "memory_access"], [59, 3, 1, "", "memory_access_cost"], [59, 3, 1, "", "memory_complexity"], [59, 3, 1, "", "optimal_parameters"], [59, 3, 1, "", "p"], [59, 3, 1, "", "parameter_names"], [59, 2, 1, "", "parameter_ranges"], [59, 3, 1, "", "reset"], [59, 3, 1, "", "set_parameter_ranges"], [59, 3, 1, "", "set_parameters"], [59, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm": [[60, 1, 1, "", "RegularISDPerm"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm": [[60, 2, 1, "", "attack_type"], [60, 2, 1, "", "complexity_type"], [60, 3, 1, "", "get_optimal_parameters_dict"], [60, 3, 1, "", "has_optimal_parameter"], [60, 2, 1, "", "memory_access"], [60, 3, 1, "", "memory_access_cost"], [60, 3, 1, "", "memory_complexity"], [60, 3, 1, "", "optimal_parameters"], [60, 3, 1, "", "parameter_names"], [60, 2, 1, "", "parameter_ranges"], [60, 3, 1, "", "reset"], [60, 3, 1, "", "set_parameter_ranges"], [60, 3, 1, "", "set_parameters"], [60, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep": [[61, 1, 1, "", "RegularISDRep"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep": [[61, 2, 1, "", "attack_type"], [61, 2, 1, "", "complexity_type"], [61, 3, 1, "", "ell"], [61, 3, 1, "", "eps_x"], [61, 3, 1, "", "eps_y"], [61, 3, 1, "", "get_optimal_parameters_dict"], [61, 3, 1, "", "has_optimal_parameter"], [61, 2, 1, "", "memory_access"], [61, 3, 1, "", "memory_access_cost"], [61, 3, 1, "", "memory_complexity"], [61, 3, 1, "", "optimal_parameters"], [61, 3, 1, "", "p"], [61, 3, 1, "", "parameter_names"], [61, 2, 1, "", "parameter_ranges"], [61, 3, 1, "", "reset"], [61, 3, 1, "", "set_parameter_ranges"], [61, 3, 1, "", "set_parameters"], [61, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack": [[62, 1, 1, "", "SDAttack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack": [[62, 2, 1, "", "attack_type"], [62, 2, 1, "", "complexity_type"], [62, 3, 1, "", "get_optimal_parameters_dict"], [62, 3, 1, "", "has_optimal_parameter"], [62, 2, 1, "", "memory_access"], [62, 3, 1, "", "memory_access_cost"], [62, 3, 1, "", "memory_complexity"], [62, 3, 1, "", "optimal_parameters"], [62, 3, 1, "", "parameter_names"], [62, 2, 1, "", "parameter_ranges"], [62, 3, 1, "", "reset"], [62, 3, 1, "", "set_parameter_ranges"], [62, 3, 1, "", "set_parameters"], [62, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator": [[63, 0, 0, "-", "regsd_algorithm"], [64, 0, 0, "-", "regsd_constants"], [65, 0, 0, "-", "regsd_estimator"], [66, 0, 0, "-", "regsd_helper"], [67, 0, 0, "-", "regsd_problem"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm": [[63, 1, 1, "", "RegSDAlgorithm"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm": [[63, 2, 1, "", "attack_type"], [63, 2, 1, "", "complexity_type"], [63, 3, 1, "", "get_optimal_parameters_dict"], [63, 3, 1, "", "has_optimal_parameter"], [63, 2, 1, "", "memory_access"], [63, 3, 1, "", "memory_access_cost"], [63, 3, 1, "", "memory_complexity"], [63, 3, 1, "", "optimal_parameters"], [63, 3, 1, "", "parameter_names"], [63, 2, 1, "", "parameter_ranges"], [63, 3, 1, "", "reset"], [63, 3, 1, "", "set_parameter_ranges"], [63, 3, 1, "", "set_parameters"], [63, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator": [[65, 1, 1, "", "RegSDEstimator"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator": [[65, 3, 1, "", "algorithm_names"], [65, 3, 1, "", "algorithms"], [65, 2, 1, "", "bit_complexities"], [65, 2, 1, "", "complexity_type"], [65, 3, 1, "", "estimate"], [65, 2, 1, "", "estimator_type"], [65, 4, 1, "", "excluded_algorithms_by_default"], [65, 3, 1, "", "fastest_algorithm"], [65, 2, 1, "", "memory_access"], [65, 3, 1, "", "nalgorithms"], [65, 3, 1, "", "reset"], [65, 3, 1, "", "table"]], "cryptographic_estimators.RegSDEstimator.regsd_helper": [[66, 5, 1, "", "r_int"]], "cryptographic_estimators.RegSDEstimator.regsd_problem": [[67, 1, 1, "", "RegSDProblem"]], "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem": [[67, 3, 1, "", "expected_number_solutions"], [67, 3, 1, "", "get_parameters"], [67, 3, 1, "", "to_bitcomplexity_memory"], [67, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[68, 0, 0, "-", "ball_collision"], [69, 0, 0, "-", "bjmm"], [70, 0, 0, "-", "bjmm_dw"], [71, 0, 0, "-", "bjmm_pdw"], [72, 0, 0, "-", "bjmm_plus"], [73, 0, 0, "-", "both_may"], [74, 0, 0, "-", "dumer"], [75, 0, 0, "-", "may_ozerov"], [76, 0, 0, "-", "prange"], [77, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[68, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[68, 2, 1, "", "attack_type"], [68, 2, 1, "", "complexity_type"], [68, 3, 1, "", "get_optimal_parameters_dict"], [68, 3, 1, "", "has_optimal_parameter"], [68, 3, 1, "", "l"], [68, 2, 1, "", "memory_access"], [68, 3, 1, "", "memory_access_cost"], [68, 3, 1, "", "memory_complexity"], [68, 3, 1, "", "optimal_parameters"], [68, 3, 1, "", "p"], [68, 3, 1, "", "parameter_names"], [68, 2, 1, "", "parameter_ranges"], [68, 3, 1, "", "pl"], [68, 3, 1, "", "r"], [68, 3, 1, "", "reset"], [68, 3, 1, "", "set_parameter_ranges"], [68, 3, 1, "", "set_parameters"], [68, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[69, 1, 1, "", "BJMM"], [69, 1, 1, "", "BJMMd2"], [69, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[69, 2, 1, "", "attack_type"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "depth"], [69, 3, 1, "", "get_optimal_parameters_dict"], [69, 3, 1, "", "has_optimal_parameter"], [69, 3, 1, "", "initialize_parameter_ranges"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "memory_access_cost"], [69, 3, 1, "", "memory_complexity"], [69, 3, 1, "", "optimal_parameters"], [69, 3, 1, "", "parameter_names"], [69, 2, 1, "", "parameter_ranges"], [69, 3, 1, "", "r"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "set_parameter_ranges"], [69, 3, 1, "", "set_parameters"], [69, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[69, 2, 1, "", "attack_type"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "get_optimal_parameters_dict"], [69, 3, 1, "", "has_optimal_parameter"], [69, 3, 1, "", "initialize_parameter_ranges"], [69, 3, 1, "", "l"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "memory_access_cost"], [69, 3, 1, "", "memory_complexity"], [69, 3, 1, "", "optimal_parameters"], [69, 3, 1, "", "p"], [69, 3, 1, "", "p1"], [69, 3, 1, "", "parameter_names"], [69, 2, 1, "", "parameter_ranges"], [69, 3, 1, "", "r"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "set_parameter_ranges"], [69, 3, 1, "", "set_parameters"], [69, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[69, 2, 1, "", "attack_type"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "get_optimal_parameters_dict"], [69, 3, 1, "", "has_optimal_parameter"], [69, 3, 1, "", "initialize_parameter_ranges"], [69, 3, 1, "", "l"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "memory_access_cost"], [69, 3, 1, "", "memory_complexity"], [69, 3, 1, "", "optimal_parameters"], [69, 3, 1, "", "p"], [69, 3, 1, "", "p1"], [69, 3, 1, "", "p2"], [69, 3, 1, "", "parameter_names"], [69, 2, 1, "", "parameter_ranges"], [69, 3, 1, "", "r"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "set_parameter_ranges"], [69, 3, 1, "", "set_parameters"], [69, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[70, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[70, 2, 1, "", "attack_type"], [70, 2, 1, "", "complexity_type"], [70, 3, 1, "", "get_optimal_parameters_dict"], [70, 3, 1, "", "has_optimal_parameter"], [70, 3, 1, "", "initialize_parameter_ranges"], [70, 2, 1, "", "memory_access"], [70, 3, 1, "", "memory_access_cost"], [70, 3, 1, "", "memory_complexity"], [70, 3, 1, "", "optimal_parameters"], [70, 3, 1, "", "p"], [70, 3, 1, "", "p1"], [70, 3, 1, "", "parameter_names"], [70, 2, 1, "", "parameter_ranges"], [70, 3, 1, "", "r"], [70, 3, 1, "", "reset"], [70, 3, 1, "", "set_parameter_ranges"], [70, 3, 1, "", "set_parameters"], [70, 3, 1, "", "time_complexity"], [70, 3, 1, "", "w1"], [70, 3, 1, "", "w11"], [70, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[71, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[71, 2, 1, "", "attack_type"], [71, 2, 1, "", "complexity_type"], [71, 3, 1, "", "get_optimal_parameters_dict"], [71, 3, 1, "", "has_optimal_parameter"], [71, 3, 1, "", "initialize_parameter_ranges"], [71, 2, 1, "", "memory_access"], [71, 3, 1, "", "memory_access_cost"], [71, 3, 1, "", "memory_complexity"], [71, 3, 1, "", "optimal_parameters"], [71, 3, 1, "", "p"], [71, 3, 1, "", "p1"], [71, 3, 1, "", "parameter_names"], [71, 2, 1, "", "parameter_ranges"], [71, 3, 1, "", "r"], [71, 3, 1, "", "reset"], [71, 3, 1, "", "set_parameter_ranges"], [71, 3, 1, "", "set_parameters"], [71, 3, 1, "", "time_complexity"], [71, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus": [[72, 1, 1, "", "BJMMplus"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus": [[72, 2, 1, "", "attack_type"], [72, 2, 1, "", "complexity_type"], [72, 3, 1, "", "get_optimal_parameters_dict"], [72, 3, 1, "", "has_optimal_parameter"], [72, 3, 1, "", "initialize_parameter_ranges"], [72, 3, 1, "", "l"], [72, 3, 1, "", "l1"], [72, 2, 1, "", "memory_access"], [72, 3, 1, "", "memory_access_cost"], [72, 3, 1, "", "memory_complexity"], [72, 3, 1, "", "optimal_parameters"], [72, 3, 1, "", "p"], [72, 3, 1, "", "p1"], [72, 3, 1, "", "parameter_names"], [72, 2, 1, "", "parameter_ranges"], [72, 3, 1, "", "r"], [72, 3, 1, "", "reset"], [72, 3, 1, "", "set_parameter_ranges"], [72, 3, 1, "", "set_parameters"], [72, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[73, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[73, 2, 1, "", "attack_type"], [73, 2, 1, "", "complexity_type"], [73, 3, 1, "", "get_optimal_parameters_dict"], [73, 3, 1, "", "has_optimal_parameter"], [73, 3, 1, "", "initialize_parameter_ranges"], [73, 3, 1, "", "l"], [73, 2, 1, "", "memory_access"], [73, 3, 1, "", "memory_access_cost"], [73, 3, 1, "", "memory_complexity"], [73, 3, 1, "", "optimal_parameters"], [73, 3, 1, "", "p"], [73, 3, 1, "", "p1"], [73, 3, 1, "", "parameter_names"], [73, 2, 1, "", "parameter_ranges"], [73, 3, 1, "", "r"], [73, 3, 1, "", "reset"], [73, 3, 1, "", "set_parameter_ranges"], [73, 3, 1, "", "set_parameters"], [73, 3, 1, "", "time_complexity"], [73, 3, 1, "", "w1"], [73, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[74, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[74, 2, 1, "", "attack_type"], [74, 2, 1, "", "complexity_type"], [74, 3, 1, "", "get_optimal_parameters_dict"], [74, 3, 1, "", "has_optimal_parameter"], [74, 3, 1, "", "initialize_parameter_ranges"], [74, 3, 1, "", "l"], [74, 2, 1, "", "memory_access"], [74, 3, 1, "", "memory_access_cost"], [74, 3, 1, "", "memory_complexity"], [74, 3, 1, "", "optimal_parameters"], [74, 3, 1, "", "p"], [74, 3, 1, "", "parameter_names"], [74, 2, 1, "", "parameter_ranges"], [74, 3, 1, "", "r"], [74, 3, 1, "", "reset"], [74, 3, 1, "", "set_parameter_ranges"], [74, 3, 1, "", "set_parameters"], [74, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[75, 1, 1, "", "MayOzerov"], [75, 1, 1, "", "MayOzerovD2"], [75, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[75, 2, 1, "", "attack_type"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "depth"], [75, 3, 1, "", "get_optimal_parameters_dict"], [75, 3, 1, "", "has_optimal_parameter"], [75, 3, 1, "", "initialize_parameter_ranges"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "memory_access_cost"], [75, 3, 1, "", "memory_complexity"], [75, 3, 1, "", "optimal_parameters"], [75, 3, 1, "", "parameter_names"], [75, 2, 1, "", "parameter_ranges"], [75, 3, 1, "", "r"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "set_parameter_ranges"], [75, 3, 1, "", "set_parameters"], [75, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[75, 2, 1, "", "attack_type"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "get_optimal_parameters_dict"], [75, 3, 1, "", "has_optimal_parameter"], [75, 3, 1, "", "initialize_parameter_ranges"], [75, 3, 1, "", "l"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "memory_access_cost"], [75, 3, 1, "", "memory_complexity"], [75, 3, 1, "", "optimal_parameters"], [75, 3, 1, "", "p"], [75, 3, 1, "", "p1"], [75, 3, 1, "", "parameter_names"], [75, 2, 1, "", "parameter_ranges"], [75, 3, 1, "", "r"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "set_parameter_ranges"], [75, 3, 1, "", "set_parameters"], [75, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[75, 2, 1, "", "attack_type"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "get_optimal_parameters_dict"], [75, 3, 1, "", "has_optimal_parameter"], [75, 3, 1, "", "initialize_parameter_ranges"], [75, 3, 1, "", "l"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "memory_access_cost"], [75, 3, 1, "", "memory_complexity"], [75, 3, 1, "", "optimal_parameters"], [75, 3, 1, "", "p"], [75, 3, 1, "", "p1"], [75, 3, 1, "", "p2"], [75, 3, 1, "", "parameter_names"], [75, 2, 1, "", "parameter_ranges"], [75, 3, 1, "", "r"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "set_parameter_ranges"], [75, 3, 1, "", "set_parameters"], [75, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[76, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[76, 2, 1, "", "attack_type"], [76, 2, 1, "", "complexity_type"], [76, 3, 1, "", "get_optimal_parameters_dict"], [76, 3, 1, "", "has_optimal_parameter"], [76, 2, 1, "", "memory_access"], [76, 3, 1, "", "memory_access_cost"], [76, 3, 1, "", "memory_complexity"], [76, 3, 1, "", "optimal_parameters"], [76, 3, 1, "", "parameter_names"], [76, 2, 1, "", "parameter_ranges"], [76, 3, 1, "", "r"], [76, 3, 1, "", "reset"], [76, 3, 1, "", "set_parameter_ranges"], [76, 3, 1, "", "set_parameters"], [76, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[77, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[77, 2, 1, "", "attack_type"], [77, 2, 1, "", "complexity_type"], [77, 3, 1, "", "get_optimal_parameters_dict"], [77, 3, 1, "", "has_optimal_parameter"], [77, 3, 1, "", "initialize_parameter_ranges"], [77, 3, 1, "", "l"], [77, 2, 1, "", "memory_access"], [77, 3, 1, "", "memory_access_cost"], [77, 3, 1, "", "memory_complexity"], [77, 3, 1, "", "optimal_parameters"], [77, 3, 1, "", "p"], [77, 3, 1, "", "parameter_names"], [77, 2, 1, "", "parameter_ranges"], [77, 3, 1, "", "r"], [77, 3, 1, "", "reset"], [77, 3, 1, "", "set_parameter_ranges"], [77, 3, 1, "", "set_parameters"], [77, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[78, 0, 0, "-", "ball_collision"], [79, 0, 0, "-", "bjmm"], [80, 0, 0, "-", "both_may"], [81, 0, 0, "-", "dumer"], [82, 0, 0, "-", "may_ozerov"], [83, 0, 0, "-", "prange"], [84, 0, 0, "-", "stern"], [85, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[78, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[78, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[79, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[79, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[80, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[80, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[81, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[81, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[82, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[82, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[83, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[83, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[84, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[84, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[85, 5, 1, "", "binary_entropy"], [85, 5, 1, "", "binomial_approximation"], [85, 5, 1, "", "inverse_binary_entropy"], [85, 5, 1, "", "list_of_random_tuples"], [85, 5, 1, "", "may_ozerov_near_neighbor_time"], [85, 5, 1, "", "representations_asymptotic"], [85, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator": [[86, 0, 0, "-", "sd_algorithm"], [87, 0, 0, "-", "sd_constants"], [88, 0, 0, "-", "sd_estimator"], [89, 0, 0, "-", "sd_helper"], [90, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[86, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[86, 2, 1, "", "attack_type"], [86, 2, 1, "", "complexity_type"], [86, 3, 1, "", "get_optimal_parameters_dict"], [86, 3, 1, "", "has_optimal_parameter"], [86, 2, 1, "", "memory_access"], [86, 3, 1, "", "memory_access_cost"], [86, 3, 1, "", "memory_complexity"], [86, 3, 1, "", "optimal_parameters"], [86, 3, 1, "", "parameter_names"], [86, 2, 1, "", "parameter_ranges"], [86, 3, 1, "", "r"], [86, 3, 1, "", "reset"], [86, 3, 1, "", "set_parameter_ranges"], [86, 3, 1, "", "set_parameters"], [86, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[87, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[87, 4, 1, "", "CONSTRAINTS"], [87, 4, 1, "", "GAUSS"], [87, 4, 1, "", "LISTS"], [87, 4, 1, "", "PERMUTATIONS"], [87, 4, 1, "", "REPRESENTATIONS"], [87, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[88, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[88, 3, 1, "", "algorithm_names"], [88, 3, 1, "", "algorithms"], [88, 2, 1, "", "bit_complexities"], [88, 2, 1, "", "complexity_type"], [88, 3, 1, "", "estimate"], [88, 2, 1, "", "estimator_type"], [88, 4, 1, "", "excluded_algorithms_by_default"], [88, 3, 1, "", "fastest_algorithm"], [88, 2, 1, "", "memory_access"], [88, 3, 1, "", "nalgorithms"], [88, 3, 1, "", "reset"], [88, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[89, 5, 1, "", "binom"], [89, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[90, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[90, 3, 1, "", "expected_number_solutions"], [90, 3, 1, "", "get_parameters"], [90, 3, 1, "", "to_bitcomplexity_memory"], [90, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms": [[91, 0, 0, "-", "leebrickell"], [92, 0, 0, "-", "prange"], [93, 0, 0, "-", "stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell": [[91, 1, 1, "", "LeeBrickell"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell": [[91, 2, 1, "", "attack_type"], [91, 2, 1, "", "complexity_type"], [91, 3, 1, "", "get_optimal_parameters_dict"], [91, 3, 1, "", "has_optimal_parameter"], [91, 2, 1, "", "memory_access"], [91, 3, 1, "", "memory_access_cost"], [91, 3, 1, "", "memory_complexity"], [91, 3, 1, "", "optimal_parameters"], [91, 3, 1, "", "p"], [91, 3, 1, "", "parameter_names"], [91, 2, 1, "", "parameter_ranges"], [91, 3, 1, "", "reset"], [91, 3, 1, "", "set_parameter_ranges"], [91, 3, 1, "", "set_parameters"], [91, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange": [[92, 1, 1, "", "Prange"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange": [[92, 2, 1, "", "attack_type"], [92, 2, 1, "", "complexity_type"], [92, 3, 1, "", "get_optimal_parameters_dict"], [92, 3, 1, "", "has_optimal_parameter"], [92, 2, 1, "", "memory_access"], [92, 3, 1, "", "memory_access_cost"], [92, 3, 1, "", "memory_complexity"], [92, 3, 1, "", "optimal_parameters"], [92, 3, 1, "", "parameter_names"], [92, 2, 1, "", "parameter_ranges"], [92, 3, 1, "", "reset"], [92, 3, 1, "", "set_parameter_ranges"], [92, 3, 1, "", "set_parameters"], [92, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern": [[93, 1, 1, "", "Stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern": [[93, 2, 1, "", "attack_type"], [93, 2, 1, "", "complexity_type"], [93, 3, 1, "", "get_optimal_parameters_dict"], [93, 3, 1, "", "has_optimal_parameter"], [93, 3, 1, "", "l"], [93, 2, 1, "", "memory_access"], [93, 3, 1, "", "memory_access_cost"], [93, 3, 1, "", "memory_complexity"], [93, 3, 1, "", "optimal_parameters"], [93, 3, 1, "", "p"], [93, 3, 1, "", "parameter_names"], [93, 2, 1, "", "parameter_ranges"], [93, 3, 1, "", "reset"], [93, 3, 1, "", "set_parameter_ranges"], [93, 3, 1, "", "set_parameters"], [93, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator": [[94, 0, 0, "-", "sdfq_algorithm"], [95, 0, 0, "-", "sdfq_constants"], [96, 0, 0, "-", "sdfq_estimator"], [97, 0, 0, "-", "sdfq_helper"], [98, 0, 0, "-", "sdfq_problem"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm": [[94, 1, 1, "", "SDFqAlgorithm"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm": [[94, 2, 1, "", "attack_type"], [94, 2, 1, "", "complexity_type"], [94, 3, 1, "", "get_optimal_parameters_dict"], [94, 3, 1, "", "has_optimal_parameter"], [94, 2, 1, "", "memory_access"], [94, 3, 1, "", "memory_access_cost"], [94, 3, 1, "", "memory_complexity"], [94, 3, 1, "", "optimal_parameters"], [94, 3, 1, "", "parameter_names"], [94, 2, 1, "", "parameter_ranges"], [94, 3, 1, "", "reset"], [94, 3, 1, "", "set_parameter_ranges"], [94, 3, 1, "", "set_parameters"], [94, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants": [[95, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation": [[95, 4, 1, "", "CONSTRAINTS"], [95, 4, 1, "", "GAUSS"], [95, 4, 1, "", "LISTS"], [95, 4, 1, "", "PERMUTATIONS"], [95, 4, 1, "", "REPRESENTATIONS"], [95, 4, 1, "", "TREE"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator": [[96, 1, 1, "", "SDFqEstimator"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator": [[96, 3, 1, "", "algorithm_names"], [96, 3, 1, "", "algorithms"], [96, 2, 1, "", "bit_complexities"], [96, 2, 1, "", "complexity_type"], [96, 3, 1, "", "estimate"], [96, 2, 1, "", "estimator_type"], [96, 4, 1, "", "excluded_algorithms_by_default"], [96, 3, 1, "", "fastest_algorithm"], [96, 2, 1, "", "memory_access"], [96, 3, 1, "", "nalgorithms"], [96, 3, 1, "", "reset"], [96, 3, 1, "", "table"]], "cryptographic_estimators.SDFqEstimator.sdfq_helper": [[97, 5, 1, "", "binom"], [97, 5, 1, "", "min_max"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem": [[98, 1, 1, "", "SDFqProblem"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem": [[98, 3, 1, "", "expected_number_solutions"], [98, 3, 1, "", "get_parameters"], [98, 3, 1, "", "to_bitcomplexity_memory"], [98, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms": [[99, 0, 0, "-", "collision_attack"], [100, 0, 0, "-", "direct_attack"], [101, 0, 0, "-", "intersection_attack"], [102, 0, 0, "-", "kipnis_shamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack": [[99, 1, 1, "", "CollisionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack": [[99, 3, 1, "", "X"], [99, 3, 1, "", "Y"], [99, 2, 1, "", "attack_type"], [99, 2, 1, "", "complexity_type"], [99, 3, 1, "", "get_optimal_parameters_dict"], [99, 3, 1, "", "has_optimal_parameter"], [99, 3, 1, "", "linear_algebra_constant"], [99, 2, 1, "", "memory_access"], [99, 3, 1, "", "memory_access_cost"], [99, 3, 1, "", "memory_complexity"], [99, 3, 1, "", "optimal_parameters"], [99, 3, 1, "", "parameter_names"], [99, 2, 1, "", "parameter_ranges"], [99, 3, 1, "", "reset"], [99, 3, 1, "", "set_parameter_ranges"], [99, 3, 1, "", "set_parameters"], [99, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack": [[100, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack": [[100, 2, 1, "", "attack_type"], [100, 2, 1, "", "complexity_type"], [100, 3, 1, "", "expected_number_solutions"], [100, 3, 1, "", "get_fastest_mq_algorithm"], [100, 3, 1, "", "get_optimal_parameters_dict"], [100, 3, 1, "", "has_optimal_parameter"], [100, 3, 1, "", "linear_algebra_constant"], [100, 2, 1, "", "memory_access"], [100, 3, 1, "", "memory_access_cost"], [100, 3, 1, "", "memory_complexity"], [100, 3, 1, "", "optimal_parameters"], [100, 3, 1, "", "parameter_names"], [100, 2, 1, "", "parameter_ranges"], [100, 3, 1, "", "reset"], [100, 3, 1, "", "set_parameter_ranges"], [100, 3, 1, "", "set_parameters"], [100, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack": [[101, 1, 1, "", "IntersectionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack": [[101, 2, 1, "", "attack_type"], [101, 2, 1, "", "complexity_type"], [101, 3, 1, "", "get_optimal_parameters_dict"], [101, 3, 1, "", "has_optimal_parameter"], [101, 3, 1, "", "k"], [101, 3, 1, "", "linear_algebra_constant"], [101, 2, 1, "", "memory_access"], [101, 3, 1, "", "memory_access_cost"], [101, 3, 1, "", "memory_complexity"], [101, 3, 1, "", "optimal_parameters"], [101, 3, 1, "", "parameter_names"], [101, 2, 1, "", "parameter_ranges"], [101, 3, 1, "", "reset"], [101, 3, 1, "", "set_parameter_ranges"], [101, 3, 1, "", "set_parameters"], [101, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir": [[102, 1, 1, "", "KipnisShamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir": [[102, 2, 1, "", "attack_type"], [102, 2, 1, "", "complexity_type"], [102, 3, 1, "", "get_optimal_parameters_dict"], [102, 3, 1, "", "has_optimal_parameter"], [102, 3, 1, "", "linear_algebra_constant"], [102, 2, 1, "", "memory_access"], [102, 3, 1, "", "memory_access_cost"], [102, 3, 1, "", "memory_complexity"], [102, 3, 1, "", "optimal_parameters"], [102, 3, 1, "", "parameter_names"], [102, 2, 1, "", "parameter_ranges"], [102, 3, 1, "", "reset"], [102, 3, 1, "", "set_parameter_ranges"], [102, 3, 1, "", "set_parameters"], [102, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator": [[103, 0, 0, "-", "uov_algorithm"], [104, 0, 0, "-", "uov_constants"], [105, 0, 0, "-", "uov_estimator"], [106, 0, 0, "-", "uov_problem"]], "cryptographic_estimators.UOVEstimator.uov_algorithm": [[103, 1, 1, "", "UOVAlgorithm"]], "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm": [[103, 2, 1, "", "attack_type"], [103, 2, 1, "", "complexity_type"], [103, 3, 1, "", "get_optimal_parameters_dict"], [103, 3, 1, "", "has_optimal_parameter"], [103, 3, 1, "", "linear_algebra_constant"], [103, 2, 1, "", "memory_access"], [103, 3, 1, "", "memory_access_cost"], [103, 3, 1, "", "memory_complexity"], [103, 3, 1, "", "optimal_parameters"], [103, 3, 1, "", "parameter_names"], [103, 2, 1, "", "parameter_ranges"], [103, 3, 1, "", "reset"], [103, 3, 1, "", "set_parameter_ranges"], [103, 3, 1, "", "set_parameters"], [103, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.uov_estimator": [[105, 1, 1, "", "UOVEstimator"]], "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator": [[105, 3, 1, "", "algorithm_names"], [105, 3, 1, "", "algorithms"], [105, 2, 1, "", "bit_complexities"], [105, 2, 1, "", "complexity_type"], [105, 3, 1, "", "estimate"], [105, 2, 1, "", "estimator_type"], [105, 4, 1, "", "excluded_algorithms_by_default"], [105, 3, 1, "", "fastest_algorithm"], [105, 2, 1, "", "memory_access"], [105, 3, 1, "", "nalgorithms"], [105, 3, 1, "", "reset"], [105, 3, 1, "", "table"]], "cryptographic_estimators.UOVEstimator.uov_problem": [[106, 1, 1, "", "UOVProblem"]], "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem": [[106, 2, 1, "", "cost_one_hash"], [106, 3, 1, "", "expected_number_solutions"], [106, 3, 1, "", "get_parameters"], [106, 3, 1, "", "hashes_to_basic_operations"], [106, 3, 1, "", "npolynomials"], [106, 3, 1, "", "nvariables"], [106, 3, 1, "", "order_of_the_field"], [106, 2, 1, "", "theta"], [106, 3, 1, "", "to_bitcomplexity_memory"], [106, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators": [[107, 0, 0, "-", "base_algorithm"], [108, 0, 0, "-", "base_constants"], [109, 0, 0, "-", "base_estimator"], [110, 0, 0, "-", "base_problem"], [111, 0, 0, "-", "estimation_renderer"], [112, 0, 0, "-", "helper"]], "cryptographic_estimators.base_algorithm": [[107, 1, 1, "", "BaseAlgorithm"], [107, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[107, 2, 1, "", "attack_type"], [107, 2, 1, "", "complexity_type"], [107, 3, 1, "", "get_optimal_parameters_dict"], [107, 3, 1, "", "has_optimal_parameter"], [107, 2, 1, "", "memory_access"], [107, 3, 1, "", "memory_access_cost"], [107, 3, 1, "", "memory_complexity"], [107, 3, 1, "", "optimal_parameters"], [107, 3, 1, "", "parameter_names"], [107, 2, 1, "", "parameter_ranges"], [107, 3, 1, "", "reset"], [107, 3, 1, "", "set_parameter_ranges"], [107, 3, 1, "", "set_parameters"], [107, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[109, 1, 1, "", "BaseEstimator"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[109, 3, 1, "", "algorithm_names"], [109, 3, 1, "", "algorithms"], [109, 2, 1, "", "bit_complexities"], [109, 2, 1, "", "complexity_type"], [109, 3, 1, "", "estimate"], [109, 2, 1, "", "estimator_type"], [109, 4, 1, "", "excluded_algorithms_by_default"], [109, 3, 1, "", "fastest_algorithm"], [109, 2, 1, "", "memory_access"], [109, 3, 1, "", "nalgorithms"], [109, 3, 1, "", "reset"], [109, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[110, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[110, 3, 1, "", "expected_number_solutions"], [110, 3, 1, "", "get_parameters"], [110, 3, 1, "", "to_bitcomplexity_memory"], [110, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.estimation_renderer": [[111, 1, 1, "", "EstimationRenderer"]], "cryptographic_estimators.estimation_renderer.EstimationRenderer": [[111, 3, 1, "", "as_table"]], "cryptographic_estimators.helper": [[112, 1, 1, "", "ComplexityType"], [112, 5, 1, "", "concat_all_tables"], [112, 5, 1, "", "concat_pretty_tables"], [112, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[112, 4, 1, "", "ESTIMATE"], [112, 4, 1, "", "TILDEO"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"dummy_algorithm1": 0, "dummy_algorithm": 1, "dummy_estim": 2, "dummy_problem": 3, "bbp": 4, "beullen": [5, 43], "leon": [6, 44], "le_algorithm": 7, "le_const": 8, "le_estim": 9, "le_help": 10, "le_problem": 11, "bjorklund": 12, "booleansolve_fxl": 13, "cgmta": 14, "crossbr": 15, "dinur1": 16, "dinur2": 17, "exhaustive_search": 18, "f5": 19, "hybrid_f5": 20, "kpg": 21, "lokshtanov": 22, "mht": 23, "degree_of_regular": 24, "mq_algorithm": 25, "mq_constant": 26, "mq_estim": 27, "mq_helper": 28, "mq_problem": 29, "hilbert": 30, "nmonomi": 31, "witness_degre": 32, "big_k": 33, "bruteforc": 34, "kernel_search": 35, "minor": 36, "support_minor": 37, "mr_algorithm": 38, "mr_constant": 39, "mr_estim": 40, "mr_helper": 41, "mr_problem": 42, "ssa": 45, "pe_algorithm": 46, "pe_const": 47, "pe_estim": 48, "pe_help": 49, "pe_problem": 50, "kmp": 51, "sbc": 52, "pk_algorithm": 53, "pk_constant": 54, "pk_estim": 55, "pk_helper": 56, "pk_problem": 57, "ccj": 58, "regisd_enum": 59, "regisd_perm": 60, "regisd_rep": 61, "sd_attack": 62, "regsd_algorithm": 63, "regsd_const": 64, "regsd_estim": 65, "regsd_help": 66, "regsd_problem": 67, "ball_collis": [68, 78], "bjmm": [69, 79], "bjmm_dw": 70, "bjmm_pdw": 71, "bjmm_plu": 72, "both_mai": [73, 80], "dumer": [74, 81], "may_ozerov": [75, 82], "prang": [76, 83, 92], "stern": [77, 84, 93], "workfactor_help": 85, "sd_algorithm": 86, "sd_constant": 87, "sd_estim": 88, "sd_helper": 89, "sd_problem": 90, "leebrickel": 91, "sdfq_algorithm": 94, "sdfq_constant": 95, "sdfq_estim": 96, "sdfq_helper": 97, "sdfq_problem": 98, "collision_attack": 99, "direct_attack": 100, "intersection_attack": 101, "kipnis_shamir": 102, "uov_algorithm": 103, "uov_const": 104, "uov_estim": 105, "uov_problem": 106, "base_algorithm": 107, "base_const": 108, "base_estim": 109, "base_problem": 110, "estimation_render": 111, "helper": 112, "cryptographicestim": 113, "librari": 113, "mrestim": 113, "mralgorithm": 113, "peestim": 113, "pealgorithm": 113, "sdestim": 113, "sdalgorithm": 113, "sdworkfactormodel": 113, "dummyestim": 113, "dummyalgorithm": 113, "regsdestim": 113, "regsdalgorithm": 113, "sdfqestim": 113, "sdfqalgorithm": 113, "pkestim": 113, "pkalgorithm": 113, "uovestim": 113, "uovalgorithm": 113, "leestim": 113, "lealgorithm": 113, "mqestim": 113, "mqalgorithm": 113, "seri": 113, "gener": 113, "inform": 113, "indic": 113, "tabl": 113, "refer": 114}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "bbps": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "beullens": [[5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [43, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "leon": [[6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [44, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "le_algorithm": [[7, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "le_constants": [[8, "module-cryptographic_estimators.LEEstimator.le_constants"]], "le_estimator": [[9, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "le_helper": [[10, "module-cryptographic_estimators.LEEstimator.le_helper"]], "le_problem": [[11, "module-cryptographic_estimators.LEEstimator.le_problem"]], "bjorklund": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "booleansolve_fxl": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"]], "cgmta": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "crossbred": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "dinur1": [[16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "dinur2": [[17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "exhaustive_search": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "f5": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "hybrid_f5": [[20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "kpg": [[21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "lokshtanov": [[22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "mht": [[23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "degree_of_regularity": [[24, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "mq_algorithm": [[25, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "mq_constants": [[26, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mq_estimator": [[27, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "mq_helper": [[28, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "mq_problem": [[29, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "hilbert": [[30, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "nmonomial": [[31, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "witness_degree": [[32, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "big_k": [[33, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"]], "bruteforce": [[34, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"]], "kernel_search": [[35, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"]], "minors": [[36, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"]], "support_minors": [[37, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"]], "mr_algorithm": [[38, "module-cryptographic_estimators.MREstimator.mr_algorithm"]], "mr_constants": [[39, "module-cryptographic_estimators.MREstimator.mr_constants"]], "mr_estimator": [[40, "module-cryptographic_estimators.MREstimator.mr_estimator"]], "mr_helper": [[41, "module-cryptographic_estimators.MREstimator.mr_helper"]], "mr_problem": [[42, "module-cryptographic_estimators.MREstimator.mr_problem"]], "ssa": [[45, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "pe_algorithm": [[46, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "pe_constants": [[47, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "pe_estimator": [[48, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "pe_helper": [[49, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "pe_problem": [[50, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "kmp": [[51, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "sbc": [[52, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "pk_algorithm": [[53, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "pk_constants": [[54, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pk_estimator": [[55, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "pk_helper": [[56, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "pk_problem": [[57, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "ccj": [[58, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"]], "regisd_enum": [[59, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"]], "regisd_perm": [[60, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"]], "regisd_rep": [[61, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"]], "sd_attack": [[62, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"]], "regsd_algorithm": [[63, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"]], "regsd_constants": [[64, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"]], "regsd_estimator": [[65, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"]], "regsd_helper": [[66, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"]], "regsd_problem": [[67, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"]], "ball_collision": [[68, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [78, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "bjmm": [[69, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [79, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "bjmm_dw": [[70, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "bjmm_pdw": [[71, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "bjmm_plus": [[72, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"]], "both_may": [[73, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [80, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "dumer": [[74, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [81, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "may_ozerov": [[75, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [82, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "prange": [[76, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [83, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [92, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "stern": [[77, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [84, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [93, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "workfactor_helper": [[85, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "sd_algorithm": [[86, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "sd_constants": [[87, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sd_estimator": [[88, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "sd_helper": [[89, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "sd_problem": [[90, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "leebrickell": [[91, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "sdfq_algorithm": [[94, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "sdfq_constants": [[95, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfq_estimator": [[96, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "sdfq_helper": [[97, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "sdfq_problem": [[98, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "collision_attack": [[99, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"]], "direct_attack": [[100, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"]], "intersection_attack": [[101, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"]], "kipnis_shamir": [[102, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"]], "uov_algorithm": [[103, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"]], "uov_constants": [[104, "module-cryptographic_estimators.UOVEstimator.uov_constants"]], "uov_estimator": [[105, "module-cryptographic_estimators.UOVEstimator.uov_estimator"]], "uov_problem": [[106, "module-cryptographic_estimators.UOVEstimator.uov_problem"]], "base_algorithm": [[107, "module-cryptographic_estimators.base_algorithm"]], "base_constants": [[108, "module-cryptographic_estimators.base_constants"]], "base_estimator": [[109, "module-cryptographic_estimators.base_estimator"]], "base_problem": [[110, "module-cryptographic_estimators.base_problem"]], "estimation_renderer": [[111, "module-cryptographic_estimators.estimation_renderer"]], "helper": [[112, "module-cryptographic_estimators.helper"]], "CryptographicEstimators Library": [[113, "cryptographicestimators-library"]], "MREstimator": [[113, "mrestimator"]], "MRAlgorithms": [[113, "mralgorithms"]], "PEEstimator": [[113, "peestimator"]], "PEAlgorithms": [[113, "pealgorithms"]], "SDEstimator": [[113, "sdestimator"]], "SDAlgorithms": [[113, "sdalgorithms"]], "SDWorkfactorModels": [[113, "sdworkfactormodels"]], "DummyEstimator": [[113, "dummyestimator"]], "DummyAlgorithms": [[113, "dummyalgorithms"]], "RegSDEstimator": [[113, "regsdestimator"]], "RegSDAlgorithms": [[113, "regsdalgorithms"]], "SDFqEstimator": [[113, "sdfqestimator"]], "SDFqAlgorithms": [[113, "sdfqalgorithms"]], "PKEstimator": [[113, "pkestimator"]], "PKAlgorithms": [[113, "pkalgorithms"]], "UOVEstimator": [[113, "uovestimator"]], "UOVAlgorithms": [[113, "uovalgorithms"]], "LEEstimator": [[113, "leestimator"]], "LEAlgorithms": [[113, "lealgorithms"]], "MQEstimator": [[113, "mqestimator"]], "MQAlgorithms": [[113, "mqalgorithms"]], "series": [[113, "series"]], "General Information": [[113, "general-information"]], "Indices and Tables": [[113, "indices-and-tables"]], "References": [[114, "references"]]}, "indexentries": {"dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1"]], "attack_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.attack_type"]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type"]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity"]], "module": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"], [1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"], [2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"], [3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"], [4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"], [5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [7, "module-cryptographic_estimators.LEEstimator.le_algorithm"], [8, "module-cryptographic_estimators.LEEstimator.le_constants"], [9, "module-cryptographic_estimators.LEEstimator.le_estimator"], [10, "module-cryptographic_estimators.LEEstimator.le_helper"], [11, "module-cryptographic_estimators.LEEstimator.le_problem"], [12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"], [13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"], [14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"], [15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"], [16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"], [17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"], [18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"], [19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"], [20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"], [21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"], [22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"], [23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"], [24, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"], [25, "module-cryptographic_estimators.MQEstimator.mq_algorithm"], [26, "module-cryptographic_estimators.MQEstimator.mq_constants"], [27, "module-cryptographic_estimators.MQEstimator.mq_estimator"], [28, "module-cryptographic_estimators.MQEstimator.mq_helper"], [29, "module-cryptographic_estimators.MQEstimator.mq_problem"], [30, "module-cryptographic_estimators.MQEstimator.series.hilbert"], [31, "module-cryptographic_estimators.MQEstimator.series.nmonomial"], [32, "module-cryptographic_estimators.MQEstimator.witness_degree"], [33, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"], [34, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"], [35, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"], [36, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"], [37, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"], [38, "module-cryptographic_estimators.MREstimator.mr_algorithm"], [39, "module-cryptographic_estimators.MREstimator.mr_constants"], [40, "module-cryptographic_estimators.MREstimator.mr_estimator"], [41, "module-cryptographic_estimators.MREstimator.mr_helper"], [42, "module-cryptographic_estimators.MREstimator.mr_problem"], [43, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"], [44, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"], [45, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"], [46, "module-cryptographic_estimators.PEEstimator.pe_algorithm"], [47, "module-cryptographic_estimators.PEEstimator.pe_constants"], [48, "module-cryptographic_estimators.PEEstimator.pe_estimator"], [49, "module-cryptographic_estimators.PEEstimator.pe_helper"], [50, "module-cryptographic_estimators.PEEstimator.pe_problem"], [51, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"], [52, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"], [53, "module-cryptographic_estimators.PKEstimator.pk_algorithm"], [54, "module-cryptographic_estimators.PKEstimator.pk_constants"], [55, "module-cryptographic_estimators.PKEstimator.pk_estimator"], [56, "module-cryptographic_estimators.PKEstimator.pk_helper"], [57, "module-cryptographic_estimators.PKEstimator.pk_problem"], [58, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"], [59, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"], [60, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"], [61, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"], [62, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"], [63, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"], [64, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"], [65, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"], [66, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"], [67, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"], [68, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [69, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [70, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"], [71, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"], [72, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"], [73, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [74, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [75, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [76, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [77, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [78, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"], [79, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"], [80, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"], [81, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"], [82, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"], [83, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [84, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [85, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"], [86, "module-cryptographic_estimators.SDEstimator.sd_algorithm"], [87, "module-cryptographic_estimators.SDEstimator.sd_constants"], [88, "module-cryptographic_estimators.SDEstimator.sd_estimator"], [89, "module-cryptographic_estimators.SDEstimator.sd_helper"], [90, "module-cryptographic_estimators.SDEstimator.sd_problem"], [91, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"], [92, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"], [93, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"], [94, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"], [95, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"], [96, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"], [97, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"], [98, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"], [99, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"], [100, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"], [101, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"], [102, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"], [103, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"], [104, "module-cryptographic_estimators.UOVEstimator.uov_constants"], [105, "module-cryptographic_estimators.UOVEstimator.uov_estimator"], [106, "module-cryptographic_estimators.UOVEstimator.uov_problem"], [107, "module-cryptographic_estimators.base_algorithm"], [108, "module-cryptographic_estimators.base_constants"], [109, "module-cryptographic_estimators.base_estimator"], [110, "module-cryptographic_estimators.base_problem"], [111, "module-cryptographic_estimators.estimation_renderer"], [112, "module-cryptographic_estimators.helper"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters"]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1"]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2"]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity"]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm"]], "attack_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity"]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator"]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate"]], "estimator_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms"]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset"]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table"]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem"]], "cryptographic_estimators.dummyestimator.dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time"]], "bbps (class in cryptographic_estimators.leestimator.lealgorithms.bbps)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.bbps": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w"]], "w_prime() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w_prime"]], "beullens (class in cryptographic_estimators.leestimator.lealgorithms.beullens)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.beullens": [[5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.leestimator.lealgorithms.leon)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.leon": [[6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.w"]], "lealgorithm (class in cryptographic_estimators.leestimator.le_algorithm)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm"]], "attack_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.complexity_type"]], "cryptographic_estimators.leestimator.le_algorithm": [[7, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.time_complexity"]], "isd (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.ISD"]], "lists (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS"]], "lists_size (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS_SIZE"]], "normal_form (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NORMAL_FORM"]], "nw (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NW"]], "verboseinformation (class in cryptographic_estimators.leestimator.le_constants)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation"]], "cryptographic_estimators.leestimator.le_constants": [[8, "module-cryptographic_estimators.LEEstimator.le_constants"]], "leestimator (class in cryptographic_estimators.leestimator.le_estimator)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator"]], "algorithm_names() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.complexity_type"]], "cryptographic_estimators.leestimator.le_estimator": [[9, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "estimate() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimate"]], "estimator_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.leestimator.le_estimator.leestimator attribute)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.reset"]], "table() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.table"]], "cost_to_find_random_2dim_subcodes_with_support_w() (in module cryptographic_estimators.leestimator.le_helper)": [[10, "cryptographic_estimators.LEEstimator.le_helper.cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.leestimator.le_helper": [[10, "module-cryptographic_estimators.LEEstimator.le_helper"]], "leproblem (class in cryptographic_estimators.leestimator.le_problem)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem"]], "cryptographic_estimators.leestimator.le_problem": [[11, "module-cryptographic_estimators.LEEstimator.le_problem"]], "expected_number_solutions() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_time"]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity"]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.time_complexity"]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.variant"]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity"]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred"]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D"], [15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant"]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity"]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter"]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity"]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity"]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity"]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity"]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity"]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity"]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity"]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity"]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity"]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[24, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system"]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system"]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm"]], "attack_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type"]], "cryptographic_estimators.mqestimator.mq_algorithm": [[25, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity"]], "cryptographic_estimators.mqestimator.mq_constants": [[26, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator"]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type"]], "cryptographic_estimators.mqestimator.mq_estimator": [[27, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate"]], "estimator_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset"]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table"]], "cryptographic_estimators.mqestimator.mq_helper": [[28, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "ngates() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.ngates"]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree"]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree"]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients"]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem"]], "cryptographic_estimators.mqestimator.mq_problem": [[29, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_parameters"]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters"]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field"]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system"]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system"]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system"]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field"]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time"]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries"]], "cryptographic_estimators.mqestimator.series.hilbert": [[30, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees"]], "first_nonpositive_integer() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_integer"]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials"]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables"]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision"]], "ring (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.ring"]], "series (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.series"]], "series_up_to_degree (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.series_up_to_degree"]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries"]], "cryptographic_estimators.mqestimator.series.nmonomial": [[31, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree"]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree"]], "series_monomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_of_degree"]], "series_monomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_up_to_degree"]], "cryptographic_estimators.mqestimator.witness_degree": [[32, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[32, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[32, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system"]], "bigk (class in cryptographic_estimators.mrestimator.mralgorithms.big_k)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.big_k": [[33, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[33, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.time_complexity"]], "bruteforce (class in cryptographic_estimators.mrestimator.mralgorithms.bruteforce)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.bruteforce": [[34, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[34, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.time_complexity"]], "kernelsearch (class in cryptographic_estimators.mrestimator.mralgorithms.kernel_search)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.kernel_search": [[35, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[35, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.time_complexity"]], "minors (class in cryptographic_estimators.mrestimator.mralgorithms.minors)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.minors": [[36, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[36, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.time_complexity"]], "supportminors (class in cryptographic_estimators.mrestimator.mralgorithms.support_minors)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.attack_type"]], "b() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.b"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.support_minors": [[37, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_complexity"]], "nprime() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.nprime"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.time_complexity"]], "variant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[37, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.variant"]], "mralgorithm (class in cryptographic_estimators.mrestimator.mr_algorithm)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm"]], "attack_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.cost_reduction"]], "cryptographic_estimators.mrestimator.mr_algorithm": [[38, "module-cryptographic_estimators.MREstimator.mr_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[38, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.time_complexity"]], "cryptographic_estimators.mrestimator.mr_constants": [[39, "module-cryptographic_estimators.MREstimator.mr_constants"]], "mrestimator (class in cryptographic_estimators.mrestimator.mr_estimator)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator"]], "algorithm_names() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.complexity_type"]], "cryptographic_estimators.mrestimator.mr_estimator": [[40, "module-cryptographic_estimators.MREstimator.mr_estimator"]], "estimate() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimate"]], "estimator_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mrestimator.mr_estimator.mrestimator attribute)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.nalgorithms"]], "reset() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.reset"]], "table() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[40, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.table"]], "variant (class in cryptographic_estimators.mrestimator.mr_helper)": [[41, "cryptographic_estimators.MREstimator.mr_helper.Variant"]], "block_wiedemann (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[41, "cryptographic_estimators.MREstimator.mr_helper.Variant.block_wiedemann"]], "cryptographic_estimators.mrestimator.mr_helper": [[41, "module-cryptographic_estimators.MREstimator.mr_helper"]], "deteterminant_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[41, "cryptographic_estimators.MREstimator.mr_helper.deteterminant_of_A"]], "entry_i_j_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[41, "cryptographic_estimators.MREstimator.mr_helper.entry_i_j_of_A"]], "matrix_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[41, "cryptographic_estimators.MREstimator.mr_helper.matrix_A"]], "minors_polynomial() (in module cryptographic_estimators.mrestimator.mr_helper)": [[41, "cryptographic_estimators.MREstimator.mr_helper.minors_polynomial"]], "minors_series() (in module cryptographic_estimators.mrestimator.mr_helper)": [[41, "cryptographic_estimators.MREstimator.mr_helper.minors_series"]], "strassen (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[41, "cryptographic_estimators.MREstimator.mr_helper.Variant.strassen"]], "mrproblem (class in cryptographic_estimators.mrestimator.mr_problem)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem"]], "cryptographic_estimators.mrestimator.mr_problem": [[42, "module-cryptographic_estimators.MREstimator.mr_problem"]], "expected_number_solutions() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.get_parameters"]], "length_solution_vector() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.length_solution_vector"]], "ncolumns() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.ncolumns"]], "nmatrices() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nmatrices"]], "nrows() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nrows"]], "order_of_the_field() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.order_of_the_field"]], "target_rank() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.target_rank"]], "theta (cryptographic_estimators.mrestimator.mr_problem.mrproblem property)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[42, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_time"]], "beullens (class in cryptographic_estimators.peestimator.pealgorithms.beullens)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.beullens": [[43, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[43, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.peestimator.pealgorithms.leon)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.leon": [[44, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[44, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.w"]], "ssa (class in cryptographic_estimators.peestimator.pealgorithms.ssa)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.ssa": [[45, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[45, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.time_complexity"]], "pealgorithm (class in cryptographic_estimators.peestimator.pe_algorithm)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm"]], "attack_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.complexity_type"]], "cryptographic_estimators.peestimator.pe_algorithm": [[46, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[46, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.time_complexity"]], "lists_size (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[47, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LISTS_SIZE"]], "list_computation (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[47, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LIST_COMPUTATION"]], "normal_form (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[47, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.NORMAL_FORM"]], "verboseinformation (class in cryptographic_estimators.peestimator.pe_constants)": [[47, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation"]], "cryptographic_estimators.peestimator.pe_constants": [[47, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "peestimator (class in cryptographic_estimators.peestimator.pe_estimator)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator"]], "algorithm_names() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.complexity_type"]], "cryptographic_estimators.peestimator.pe_estimator": [[48, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "estimate() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimate"]], "estimator_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.peestimator.pe_estimator.peestimator attribute)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.reset"]], "table() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[48, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.table"]], "cryptographic_estimators.peestimator.pe_helper": [[49, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "gv_distance() (in module cryptographic_estimators.peestimator.pe_helper)": [[49, "cryptographic_estimators.PEEstimator.pe_helper.gv_distance"]], "hamming_ball() (in module cryptographic_estimators.peestimator.pe_helper)": [[49, "cryptographic_estimators.PEEstimator.pe_helper.hamming_ball"]], "median_size_of_random_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[49, "cryptographic_estimators.PEEstimator.pe_helper.median_size_of_random_orbit"]], "number_of_weight_d_codewords() (in module cryptographic_estimators.peestimator.pe_helper)": [[49, "cryptographic_estimators.PEEstimator.pe_helper.number_of_weight_d_codewords"]], "random_sparse_vec_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[49, "cryptographic_estimators.PEEstimator.pe_helper.random_sparse_vec_orbit"]], "peproblem (class in cryptographic_estimators.peestimator.pe_problem)": [[50, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem"]], "cryptographic_estimators.peestimator.pe_problem": [[50, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "expected_number_solutions() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[50, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[50, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[50, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[50, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_time"]], "kmp (class in cryptographic_estimators.pkestimator.pkalgorithms.kmp)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP"]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.kmp": [[51, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.time_complexity"]], "u() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[51, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.u"]], "sbc (class in cryptographic_estimators.pkestimator.pkalgorithms.sbc)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC"]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.sbc": [[52, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "d() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.d"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.time_complexity"]], "w() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w"]], "w1() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[52, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w1"]], "pkalgorithm (class in cryptographic_estimators.pkestimator.pk_algorithm)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm"]], "attack_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.complexity_type"]], "cryptographic_estimators.pkestimator.pk_algorithm": [[53, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[53, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.time_complexity"]], "kmp_final_list (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[54, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_FINAL_LIST"]], "kmp_l1 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[54, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L1"]], "kmp_l2 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[54, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L2"]], "sbc_isd (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[54, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_ISD"]], "sbc_u (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[54, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_U"]], "verboseinformation (class in cryptographic_estimators.pkestimator.pk_constants)": [[54, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation"]], "cryptographic_estimators.pkestimator.pk_constants": [[54, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pkestimator (class in cryptographic_estimators.pkestimator.pk_estimator)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator"]], "algorithm_names() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.complexity_type"]], "cryptographic_estimators.pkestimator.pk_estimator": [[55, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "estimate() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimate"]], "estimator_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.pkestimator.pk_estimator.pkestimator attribute)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.nalgorithms"]], "reset() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.reset"]], "table() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[55, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.table"]], "beullens_lee_brickell_adaptation() (in module cryptographic_estimators.pkestimator.pk_helper)": [[56, "cryptographic_estimators.PKEstimator.pk_helper.beullens_lee_brickell_adaptation"]], "cost_for_finding_subcode() (in module cryptographic_estimators.pkestimator.pk_helper)": [[56, "cryptographic_estimators.PKEstimator.pk_helper.cost_for_finding_subcode"]], "cryptographic_estimators.pkestimator.pk_helper": [[56, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "gauss_binomial() (in module cryptographic_estimators.pkestimator.pk_helper)": [[56, "cryptographic_estimators.PKEstimator.pk_helper.gauss_binomial"]], "lof() (in module cryptographic_estimators.pkestimator.pk_helper)": [[56, "cryptographic_estimators.PKEstimator.pk_helper.lof"]], "pkproblem (class in cryptographic_estimators.pkestimator.pk_problem)": [[57, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem"]], "cryptographic_estimators.pkestimator.pk_problem": [[57, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "expected_number_solutions() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[57, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[57, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[57, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[57, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_time"]], "ccj (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj": [[58, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.ell"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[58, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.time_complexity"]], "regularisdenum (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum": [[59, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.ell"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.optimal_parameters"]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.p"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[59, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.time_complexity"]], "regularisdperm (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm": [[60, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[60, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.time_complexity"]], "regularisdrep (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep": [[61, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.ell"]], "eps_x() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_x"]], "eps_y() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_y"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.optimal_parameters"]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.p"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[61, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.time_complexity"]], "sdattack (class in cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack": [[62, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[62, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.time_complexity"]], "regsdalgorithm (class in cryptographic_estimators.regsdestimator.regsd_algorithm)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm"]], "attack_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.complexity_type"]], "cryptographic_estimators.regsdestimator.regsd_algorithm": [[63, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[63, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.time_complexity"]], "cryptographic_estimators.regsdestimator.regsd_constants": [[64, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"]], "regsdestimator (class in cryptographic_estimators.regsdestimator.regsd_estimator)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator"]], "algorithm_names() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.complexity_type"]], "cryptographic_estimators.regsdestimator.regsd_estimator": [[65, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"]], "estimate() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimate"]], "estimator_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator attribute)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.reset"]], "table() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[65, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.table"]], "cryptographic_estimators.regsdestimator.regsd_helper": [[66, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"]], "r_int() (in module cryptographic_estimators.regsdestimator.regsd_helper)": [[66, "cryptographic_estimators.RegSDEstimator.regsd_helper.r_int"]], "regsdproblem (class in cryptographic_estimators.regsdestimator.regsd_problem)": [[67, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem"]], "cryptographic_estimators.regsdestimator.regsd_problem": [[67, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"]], "expected_number_solutions() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[67, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[67, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[67, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[67, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_time"]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[68, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges"]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[68, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity"]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM"]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2"]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[69, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[69, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity"]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[70, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1"]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[70, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2"]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[71, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[71, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2"]], "bjmmplus (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus": [[72, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l"]], "l1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l1"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[72, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.time_complexity"]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[73, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[73, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2"]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[74, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[74, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity"]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov"]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2"]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[75, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity"]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[76, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[77, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity"]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[78, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[78, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[78, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters"]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[79, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[79, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[79, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters"]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[80, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[80, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[80, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters"]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[81, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[81, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[81, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters"]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[82, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[82, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[82, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters"]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[83, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[83, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[83, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters"]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[84, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[84, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[84, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters"]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy"]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[85, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy"]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples"]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time"]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic"]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap"]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm"]], "attack_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type"]], "cryptographic_estimators.sdestimator.sd_algorithm": [[86, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r"]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[86, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[87, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation"]], "cryptographic_estimators.sdestimator.sd_constants": [[87, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator"]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type"]], "cryptographic_estimators.sdestimator.sd_estimator": [[88, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate"]], "estimator_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset"]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[88, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table"]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[89, "cryptographic_estimators.SDEstimator.sd_helper.binom"]], "cryptographic_estimators.sdestimator.sd_helper": [[89, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[89, "cryptographic_estimators.SDEstimator.sd_helper.min_max"]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[90, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem"]], "cryptographic_estimators.sdestimator.sd_problem": [[90, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[90, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[90, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[90, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[90, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time"]], "leebrickell (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell": [[91, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[91, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.time_complexity"]], "prange (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange": [[92, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[92, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern": [[93, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.has_optimal_parameter"]], "l() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[93, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.time_complexity"]], "sdfqalgorithm (class in cryptographic_estimators.sdfqestimator.sdfq_algorithm)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_algorithm": [[94, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[94, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdfqestimator.sdfq_constants)": [[95, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation"]], "cryptographic_estimators.sdfqestimator.sdfq_constants": [[95, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfqestimator (class in cryptographic_estimators.sdfqestimator.sdfq_estimator)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator"]], "algorithm_names() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_estimator": [[96, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "estimate() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimate"]], "estimator_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator attribute)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.reset"]], "table() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[96, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.table"]], "binom() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[97, "cryptographic_estimators.SDFqEstimator.sdfq_helper.binom"]], "cryptographic_estimators.sdfqestimator.sdfq_helper": [[97, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "min_max() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[97, "cryptographic_estimators.SDFqEstimator.sdfq_helper.min_max"]], "sdfqproblem (class in cryptographic_estimators.sdfqestimator.sdfq_problem)": [[98, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem"]], "cryptographic_estimators.sdfqestimator.sdfq_problem": [[98, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "expected_number_solutions() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[98, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[98, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[98, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[98, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_time"]], "collisionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.collision_attack)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack"]], "x() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.X"]], "y() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.Y"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.collision_attack": [[99, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[99, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.time_complexity"]], "directattack (class in cryptographic_estimators.uovestimator.uovalgorithms.direct_attack)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.direct_attack": [[100, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"]], "expected_number_solutions() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.expected_number_solutions"]], "get_fastest_mq_algorithm() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_fastest_mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[100, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.time_complexity"]], "intersectionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack": [[101, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.has_optimal_parameter"]], "k() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.k"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[101, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.time_complexity"]], "kipnisshamir (class in cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir": [[102, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[102, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.time_complexity"]], "uovalgorithm (class in cryptographic_estimators.uovestimator.uov_algorithm)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm"]], "attack_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.complexity_type"]], "cryptographic_estimators.uovestimator.uov_algorithm": [[103, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[103, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.time_complexity"]], "cryptographic_estimators.uovestimator.uov_constants": [[104, "module-cryptographic_estimators.UOVEstimator.uov_constants"]], "uovestimator (class in cryptographic_estimators.uovestimator.uov_estimator)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator"]], "algorithm_names() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.complexity_type"]], "cryptographic_estimators.uovestimator.uov_estimator": [[105, "module-cryptographic_estimators.UOVEstimator.uov_estimator"]], "estimate() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimate"]], "estimator_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.uovestimator.uov_estimator.uovestimator attribute)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.nalgorithms"]], "reset() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.reset"]], "table() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[105, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.table"]], "uovproblem (class in cryptographic_estimators.uovestimator.uov_problem)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem"]], "cost_one_hash (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.cost_one_hash"]], "cryptographic_estimators.uovestimator.uov_problem": [[106, "module-cryptographic_estimators.UOVEstimator.uov_problem"]], "expected_number_solutions() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.get_parameters"]], "hashes_to_basic_operations() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.hashes_to_basic_operations"]], "npolynomials() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.npolynomials"]], "nvariables() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.order_of_the_field"]], "theta (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[106, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_time"]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm"]], "attack_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type"]], "cryptographic_estimators.base_algorithm": [[107, "module-cryptographic_estimators.base_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity"]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[107, "cryptographic_estimators.base_algorithm.optimal_parameter"]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[107, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity"]], "cryptographic_estimators.base_constants": [[108, "module-cryptographic_estimators.base_constants"]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator"]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type"]], "cryptographic_estimators.base_estimator": [[109, "module-cryptographic_estimators.base_estimator"]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.estimate"]], "estimator_type (cryptographic_estimators.base_estimator.baseestimator property)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms"]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.reset"]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[109, "cryptographic_estimators.base_estimator.BaseEstimator.table"]], "baseproblem (class in cryptographic_estimators.base_problem)": [[110, "cryptographic_estimators.base_problem.BaseProblem"]], "cryptographic_estimators.base_problem": [[110, "module-cryptographic_estimators.base_problem"]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[110, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.base_problem.baseproblem method)": [[110, "cryptographic_estimators.base_problem.BaseProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[110, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[110, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time"]], "estimationrenderer (class in cryptographic_estimators.estimation_renderer)": [[111, "cryptographic_estimators.estimation_renderer.EstimationRenderer"]], "as_table() (cryptographic_estimators.estimation_renderer.estimationrenderer method)": [[111, "cryptographic_estimators.estimation_renderer.EstimationRenderer.as_table"]], "cryptographic_estimators.estimation_renderer": [[111, "module-cryptographic_estimators.estimation_renderer"]], "complexitytype (class in cryptographic_estimators.helper)": [[112, "cryptographic_estimators.helper.ComplexityType"]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[112, "cryptographic_estimators.helper.ComplexityType.ESTIMATE"]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[112, "cryptographic_estimators.helper.ComplexityType.TILDEO"]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[112, "cryptographic_estimators.helper.concat_all_tables"]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[112, "cryptographic_estimators.helper.concat_pretty_tables"]], "cryptographic_estimators.helper": [[112, "module-cryptographic_estimators.helper"]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[112, "cryptographic_estimators.helper.round_or_truncate"]]}})