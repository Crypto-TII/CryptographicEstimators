Search.setIndex({"docnames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "LEEstimator/LEAlgorithms/sample", "LEEstimator/le_algorithm", "LEEstimator/le_estimator", "LEEstimator/le_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/boolean_solve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "PEEstimator/PEAlgorithms/sample", "PEEstimator/pe_algorithm", "PEEstimator/pe_estimator", "PEEstimator/pe_problem", "PKEstimator/PKAlgorithms/sample", "PKEstimator/pk_algorithm", "PKEstimator/pk_estimator", "PKEstimator/pk_problem", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "SDFqEstimator/SDFqAlgorithms/leebrickell", "SDFqEstimator/SDFqAlgorithms/prange", "SDFqEstimator/SDFqAlgorithms/stern", "SDFqEstimator/sdfq_algorithm", "SDFqEstimator/sdfq_constants", "SDFqEstimator/sdfq_estimator", "SDFqEstimator/sdfq_helper", "SDFqEstimator/sdfq_problem", "SEEstimator/SEAlgorithms/sample", "SEEstimator/se_algorithm", "SEEstimator/se_estimator", "SEEstimator/se_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "helper", "index", "references"], "filenames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "LEEstimator/LEAlgorithms/sample.rst", "LEEstimator/le_algorithm.rst", "LEEstimator/le_estimator.rst", "LEEstimator/le_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/boolean_solve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "PEEstimator/PEAlgorithms/sample.rst", "PEEstimator/pe_algorithm.rst", "PEEstimator/pe_estimator.rst", "PEEstimator/pe_problem.rst", "PKEstimator/PKAlgorithms/sample.rst", "PKEstimator/pk_algorithm.rst", "PKEstimator/pk_estimator.rst", "PKEstimator/pk_problem.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "SDFqEstimator/SDFqAlgorithms/leebrickell.rst", "SDFqEstimator/SDFqAlgorithms/prange.rst", "SDFqEstimator/SDFqAlgorithms/stern.rst", "SDFqEstimator/sdfq_algorithm.rst", "SDFqEstimator/sdfq_constants.rst", "SDFqEstimator/sdfq_estimator.rst", "SDFqEstimator/sdfq_helper.rst", "SDFqEstimator/sdfq_problem.rst", "SEEstimator/SEAlgorithms/sample.rst", "SEEstimator/se_algorithm.rst", "SEEstimator/se_estimator.rst", "SEEstimator/se_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "helper.rst", "index.rst", "references.rst"], "titles": ["dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "sample", "le_algorithm", "le_estimator", "le_problem", "bjorklund", "boolean_solve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "sample", "pe_algorithm", "pe_estimator", "pe_problem", "sample", "pk_algorithm", "pk_estimator", "pk_problem", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "leebrickell", "prange", "stern", "sdfq_algorithm", "sdfq_constants", "sdfq_estimator", "sdfq_helper", "sdfq_problem", "sample", "se_algorithm", "se_estimator", "se_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "helper", "TII Cryptanalysis Library", "References"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75], "cryptographic_estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76], "dummyestim": [0, 1, 2, 3], "dummyalgorithm": [0, 1], "dummyalgorithm1": [0, 76], "problem": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 66, 67, 68, 70, 71, 74], "dummyproblem": [0, 1, 3, 76], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75], "construct": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 27, 31, 32, 35, 36, 39, 40, 44, 45, 56, 58, 59, 60, 61, 66, 69, 70, 73, 74], "an": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 27, 31, 32, 35, 36, 39, 40, 44, 45, 56, 58, 59, 60, 61, 66, 69, 70, 73, 74, 75], "instanc": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 27, 31, 32, 35, 36, 39, 40, 44, 45, 56, 58, 59, 60, 61, 66, 69, 70, 73, 74], "estim": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 75, 76], "add": [0, 56], "refer": [0, 73, 76], "correpond": 0, "paper": [0, 73], "here": [0, 56, 73], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75], "object": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 27, 29, 30, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73, 74], "includ": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "all": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "necessari": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "paramet": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74], "memory_access": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 75, 76], "specifi": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "memori": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 70, 71, 73, 74, 75], "access": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "cost": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "model": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 46, 47, 48, 49, 50, 51, 52, 62, 71, 73, 75], "default": [0, 1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 31, 35, 39, 54, 56, 62, 64, 66, 69, 71, 73, 75], "0": [0, 1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 31, 35, 37, 38, 39, 40, 41, 44, 45, 53, 56, 60, 61, 62, 64, 69, 71, 73, 75], "choic": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "constant": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "1": [0, 1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 31, 35, 38, 39, 40, 41, 43, 53, 56, 62, 64, 69, 71, 73, 75], "logarithm": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 32, 36, 39, 58, 62, 66, 70, 71, 73, 74, 75], "2": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 58, 59, 61, 62, 64, 71, 73, 75, 77], "squar": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 39, 62, 71, 73, 75], "root": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "3": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 38, 39, 43, 47, 50, 56, 60, 61, 62, 64, 71, 73, 75, 77], "cube": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "deploi": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "custom": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "function": [0, 1, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 59, 60, 61, 62, 67, 68, 71, 75], "which": [0, 1, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73, 75], "take": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "total": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "usag": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 62, 71, 73, 75], "complexity_typ": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 76], "complex": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 77], "type": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "consid": [0, 1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 31, 35, 56, 62, 64, 69, 71, 73], "tild": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 62, 71, 73, 75], "o": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 26, 27, 62, 71, 73, 75, 77], "exampl": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 59, 60, 61, 64, 73, 76], "sage": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 71, 73], "from": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 71, 73, 76], "import": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 71, 73, 76], "dummy_problem": [0, 76], "e": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 31, 35, 38, 56, 64, 69, 73, 77], "100": [0, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 59, 60, 61, 64, 73], "50": [0, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 59, 60, 61, 64], "dummi": [0, 1], "algorithm": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 75, 76, 77], "properti": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74], "attribut": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "_complexity_typ": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "get_optimal_parameters_dict": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "optim": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73], "dictionari": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "has_optimal_paramet": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "true": [0, 1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 75], "ha": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "test": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 71, 73, 76], "basealgorithm": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73, 76], "baseproblem": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 58, 59, 60, 61, 62, 66, 67, 68, 70, 71, 73, 74, 76], "fals": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 57, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73], "attribtu": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "_memory_access": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "memory_complex": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "optimal_paramet": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "each": [0, 1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 16, 18, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "valu": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 59, 60, 61, 62, 63, 67, 68, 71, 73, 75], "i": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 75, 76, 77], "provid": [0, 1, 4, 5, 8, 9, 11, 12, 13, 16, 18, 21, 24, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "comput": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 16, 18, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 71, 73], "done": [0, 1, 4, 5, 8, 9, 11, 12, 13, 16, 18, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "those": [0, 1, 4, 5, 8, 9, 11, 12, 13, 16, 18, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "optimization_parameter_1": [0, 76], "25": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 39, 41, 64], "optimization_parameter_2": [0, 76], "optimization_parameter_3": [0, 76], "10": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 59, 60, 61, 64, 73, 77], "parameter_nam": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "list": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 73, 75, 76], "name": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 54, 57, 59, 60, 61, 62, 65, 67, 68, 71, 73, 77], "parameter_rang": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "set": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 66, 67, 68, 71, 73], "rang": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "ar": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "search": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 54, 59, 60, 61, 62, 67, 68, 71, 76, 77], "us": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 76], "onli": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "reset": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 76], "intern": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "state": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "set_parameter_rang": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "str": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 75], "min_valu": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "float": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 70, 71, 74, 75], "max_valu": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "specif": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 73], "alreadi": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "must": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "fall": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "lowerbound": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "inclus": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "upperbound": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "set_paramet": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "dict": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 74], "predifin": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "subset": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71], "time_complex": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 59, 60, 61, 62, 67, 68, 71, 76], "time": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73], "problem_parameter1": [2, 3], "problem_parameter2": [2, 3], "memory_bound": [2, 23, 25, 56, 64, 74], "inf": [2, 23, 56, 64], "baseestim": [2, 6, 23, 31, 35, 56, 64, 69, 73, 76], "first": [2, 3, 11, 12, 20, 26, 73, 75], "second": [2, 3, 13, 40, 73, 75], "nsolut": [2, 3, 6, 7, 12, 23, 25, 31, 32, 35, 36, 56, 58, 64, 66, 69, 70, 74], "number": [2, 3, 6, 7, 8, 12, 20, 23, 24, 25, 27, 31, 32, 35, 36, 53, 56, 58, 64, 66, 69, 70, 73, 74, 75], "solut": [2, 3, 6, 7, 8, 11, 12, 14, 23, 25, 31, 32, 35, 36, 56, 58, 64, 66, 69, 70, 74], "scale": [2, 3, 7, 25, 32, 36, 58, 66, 70], "algorithm_nam": [2, 6, 23, 31, 35, 56, 64, 69, 73, 76], "bit_complex": [2, 6, 10, 14, 23, 31, 35, 56, 62, 64, 69, 71, 73, 76], "describ": [2, 6, 18, 23, 31, 35, 56, 64, 69, 73], "its": [2, 6, 23, 31, 35, 41, 56, 64, 69, 73], "excluded_algorithms_by_default": [2, 6, 23, 31, 35, 56, 64, 69, 73, 76], "fastest_algorithm": [2, 6, 23, 31, 35, 56, 64, 69, 73, 76], "use_tilde_o_tim": [2, 6, 23, 31, 35, 56, 64, 69, 73], "smallest": [2, 6, 23, 31, 35, 56, 64, 69, 73], "\u014d": [2, 6, 23, 31, 35, 56, 64, 69, 73], "ignor": [2, 6, 23, 31, 35, 56, 64, 69, 73], "polynomi": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 31, 35, 56, 64, 69, 73, 77], "factor": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 31, 35, 56, 64, 69, 73], "nalgorithm": [2, 6, 23, 31, 35, 56, 64, 69, 73, 76], "tabl": [2, 6, 23, 31, 35, 56, 64, 69, 73, 75], "show_quantum_complex": [2, 6, 23, 31, 35, 56, 64, 69, 73], "show_tilde_o_tim": [2, 6, 23, 31, 35, 56, 64, 69, 73], "show_all_paramet": [2, 6, 23, 31, 35, 56, 64, 69, 73], "precis": [2, 6, 23, 26, 31, 35, 56, 64, 69, 73, 75, 76], "truncat": [2, 6, 23, 31, 35, 56, 64, 69, 73, 75], "print": [2, 6, 23, 31, 35, 56, 64, 69, 73], "show": [2, 6, 23, 31, 35, 56, 64, 69, 73, 76], "quantum": [2, 6, 23, 31, 35, 41, 56, 64, 69, 73], "decim": [2, 6, 23, 31, 35, 56, 64, 69, 73], "digit": [2, 6, 23, 31, 35, 56, 64, 69, 73, 75], "output": [2, 6, 23, 31, 35, 56, 64, 69, 73], "rather": [2, 6, 23, 31, 35, 56, 64, 69, 73], "than": [2, 6, 20, 23, 31, 35, 56, 64, 69, 73], "round": [2, 6, 23, 31, 35, 56, 64, 69, 73, 75], "contain": [3, 73], "over": [3, 9, 10, 11, 12, 13, 16, 17, 18, 20, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 59, 60, 61, 62, 66, 73, 77], "expected_number_solut": [3, 7, 25, 32, 36, 58, 66, 70, 74, 76], "expect": [3, 7, 25, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 58, 59, 60, 61, 66, 70, 74], "exist": [3, 7, 25, 32, 36, 58, 66, 70, 74], "get_paramet": [3, 7, 32, 36, 58, 66, 70, 76], "to_bitcomplexity_memori": [3, 7, 25, 32, 36, 58, 66, 70, 74, 76], "elements_to_stor": [3, 7, 25, 32, 36, 58, 66, 70, 74], "bit": [3, 7, 23, 25, 32, 36, 43, 58, 62, 66, 70, 71, 73, 74], "associ": [3, 7, 25, 32, 36, 58, 66, 70, 73, 74], "given": [3, 7, 11, 18, 20, 24, 25, 27, 32, 36, 58, 62, 66, 70, 71, 73, 74], "element": [3, 7, 25, 32, 36, 58, 66, 70, 74], "store": [3, 7, 25, 32, 36, 58, 66, 70, 73, 74], "oper": [3, 7, 23, 25, 32, 36, 58, 62, 70, 71, 73, 74], "to_bitcomplexity_tim": [3, 7, 25, 32, 36, 58, 66, 70, 74, 76], "basic_oper": [3, 7, 25, 32, 36, 58, 66, 70, 74], "correspond": [3, 7, 25, 32, 36, 58, 66, 70], "certain": 3, "amount": 3, "basic": [3, 25, 62, 71, 74], "leestim": [4, 5, 6, 7], "lealgorithm": [4, 5], "leproblem": [4, 5, 7, 33, 34, 76], "sd": [4, 5, 33, 34], "n": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 56, 57, 58, 59, 60, 61, 64, 65, 66, 69, 70, 73, 77], "int": [6, 7, 20, 23, 25, 26, 27, 28, 36, 42, 47, 53, 56, 57, 58, 64, 65, 66, 70, 75], "k": [6, 7, 9, 10, 11, 16, 23, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 56, 57, 58, 59, 60, 61, 64, 65, 66, 69, 70, 73, 76, 77], "linear": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 38, 41, 42, 43, 54, 73], "code": [6, 7, 31, 32, 35, 36, 38, 39, 41, 42, 43, 56, 58, 64, 66, 69, 70, 76], "equival": [6, 7, 31, 32, 69, 70], "length": [6, 7, 31, 32, 35, 36, 56, 58, 64, 66, 69, 70], "dimens": [6, 7, 31, 32, 35, 39, 56, 58, 64, 66, 69, 70, 73], "excluded_algorithm": [6, 23, 31, 35, 56, 64, 69, 73], "tupl": [6, 15, 16, 23, 31, 35, 56, 64, 69, 73], "exclud": [6, 23, 31, 35, 56, 64, 69, 73], "none": [6, 20, 23, 25, 26, 27, 28, 31, 35, 46, 47, 48, 49, 50, 51, 52, 56, 64, 69, 73], "field": [7, 10, 11, 16, 17, 20, 23, 24, 25, 26, 27, 28, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 66, 70, 73, 74, 77], "addit": [7, 25, 32, 36, 58, 66, 70, 73], "mqestim": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28], "mqalgorithm": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "mqproblem": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 76], "et": [8, 18], "al": [8, 18], "probabilist": [8, 12, 13, 18], "solv": [8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 25, 74, 77], "mq": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "gf": [8, 9, 12, 13, 18, 77], "bkw19": [8, 77], "It": [8, 10, 12, 13, 18], "find": [8, 11], "qudract": 8, "system": [8, 11, 12, 16, 17, 18, 20, 25, 26, 28, 73, 77], "pariti": [8, 12, 73, 77], "h": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 26, 53, 77], "extern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 73], "hybrid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 77], "mq_problem": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 76], "m": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 28, 73, 77], "12": [8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 28, 43, 56, 73], "q": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 58, 59, 60, 61, 64, 66, 73, 77], "bj\u00f6rklund": [8, 77], "variabl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 43], "w": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 58, 59, 60, 61, 64, 66, 77], "algebra": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 73], "theta": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 76], "expon": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 37], "convers": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25], "get_reduced_paramet": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 76], "lambda_": [8, 12, 23, 76], "linear_algebra_const": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 76], "mq_algorithm": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 76], "5": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 56, 59, 64, 73], "4": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 56, 64, 73], "npolynomials_reduc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 76], "after": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 73], "appli": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 40, 66], "thoma": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 38], "wolf": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "strategi": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "60": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23], "20": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 38, 73], "18": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 38], "nvariables_reduc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 76], "fix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "some": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 73], "booleansolvefxl": [9, 23, 76], "booleansolv": 9, "fxl": 9, "respect": [9, 20], "bfss11": [9, 77], "ckp": [9, 77], "thei": [9, 73], "work": [9, 10, 73], "guess": 9, "consist": [9, 11, 18, 73], "result": [9, 11, 73], "subsystem": [9, 16], "7": [9, 10, 11, 23, 26, 27, 28, 37, 56, 61, 64, 73], "variant": [9, 23, 76], "determinist": [9, 23], "cgmt": 10, "A": [10, 37, 38, 39, 40, 41, 42, 43, 45, 56, 59, 61, 64, 73, 77], "ani": [10, 11, 53, 73], "finit": [10, 16, 20, 23, 24, 25, 26, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 60, 61, 73, 77], "when": [10, 19], "integ": [10, 20, 24, 26, 27, 28, 73], "2k": 10, "leq": [10, 19, 73], "cgmt02": [10, 77], "note": 10, "In": [10, 11, 37, 38, 41, 42, 43, 73], "thi": [10, 11, 14, 73, 76], "modul": [10, 14, 73, 76], "compleixti": 10, "min": [10, 57, 65], "floor": 10, "sqrt": 10, "41": [10, 23], "nvariabl": [10, 17, 19, 25, 26, 76], "339850002884624": 10, "23": [10, 16, 23, 56, 64], "137080884841787": 10, "The": [11, 12, 14, 16, 17, 19, 20, 73], "jv18": [11, 77], "two": [11, 73, 75], "step": 11, "preprocess": 11, "we": [11, 56, 73], "degre": [11, 15, 16, 20, 24, 26, 27, 28, 76], "d": [11, 23, 24, 27, 37, 38, 39, 73, 76, 77], "ideal": [11, 24], "gener": [11, 14, 24], "initi": [11, 38, 39, 40, 41, 42, 43, 45, 59, 61, 73], "everi": 11, "special": [11, 12, 66, 73], "final": 11, "found": [11, 14, 73], "direct": 11, "our": 11, "size": [11, 27, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 66], "formula": [11, 14], "dua20": [11, 77], "either": [11, 73, 75], "max_d": [11, 76], "upper": [11, 39, 73], "bound": [11, 39, 73], "macaulai": 11, "matrix": 11, "dinurfirst": [12, 23, 76], "dinur": [12, 13, 77], "din21a": [12, 13, 77], "mani": [12, 73], "quadrat": [12, 16, 17, 20, 28, 73, 77], "These": [12, 73], "come": 12, "origin": 12, "kappa": [12, 23, 76], "9": [12, 18, 20, 23, 26, 45, 56, 64], "dinursecond": [13, 23, 76], "din21b": [13, 77], "idea": [13, 16, 73], "n1": [13, 23, 73, 76], "n_1": 13, "exhaustivesearch": [14, 23, 76], "exhaust": [14, 16, 77], "evalu": 14, "possibl": 14, "until": 14, "one": [14, 73, 75], "shown": 14, "bcccnsy10": [14, 77], "228818690495881": 14, "e0": 14, "15": [14, 15, 20, 23, 25, 26, 28, 56, 73], "e1": 14, "17": [14, 23], "917197145402291": 14, "degree_of_polynomi": [15, 16, 76], "f5_": 15, "24": [15, 17, 19, 56, 64, 73], "578308707446713": 15, "19": [15, 23, 64, 73], "934452517671986": 15, "hybridf5": [16, 23, 76], "propos": 16, "bfp09": [16, 77], "bfp12": [16, 77], "tradeoff": 16, "between": [16, 73, 75], "groebner": 16, "sai": 16, "where": [16, 73], "order": [16, 20, 23, 24, 25, 26, 28, 73], "grobner": 16, "f5": [16, 23, 76], "mpkc": 16, "256": 16, "31": [16, 23, 59, 61, 64, 73], "equat": [17, 18, 20, 24, 77], "even": [17, 73], "characterist": [17, 74], "kpg99": [17, 77], "comp": [17, 19], "183": [17, 19], "8": [17, 19, 23, 26, 38, 42, 56, 73], "61636217728924": [17, 19], "628922047916475": [17, 19], "lptwy17": [18, 77], "determin": [18, 73], "delta": [18, 23, 76], "mht13": [19, 77], "generic_system": [20, 76], "regular": [20, 28], "repres": [20, 26, 28], "traceback": [20, 24], "most": [20, 24, 73], "recent": [20, 24], "call": [20, 24, 73], "last": [20, 24], "valueerror": [20, 24, 73], "defin": [20, 25, 73], "quadratic_system": [20, 28, 76], "16": [20, 23, 24, 26, 56, 73], "regular_system": [20, 76], "equal": [20, 25], "semi_regular_system": [20, 28, 76], "semi": [20, 28], "f_1": 20, "ldot": 20, "f_m": 20, "d_1": 20, "d_m": 20, "index": [20, 73, 76], "non": [20, 24, 26, 27], "posit": [20, 26, 73], "coeffici": [20, 53, 57, 65], "dfrac": 20, "prod_": 20, "z": [20, 26, 27, 53, 73, 77], "d_i": 20, "If": [20, 24, 73], "follow": [20, 73, 76], "sequenc": [20, 73], "cdot": [20, 73], "bigg": 20, "relev": [23, 73], "42": [23, 56, 64], "45": [23, 24], "long": [23, 56, 64], "bjorklund": [23, 76], "80": [23, 26], "6": [23, 24, 26, 27, 56, 73], "crossbr": [23, 76, 77], "39": [23, 56], "37": 23, "57": 23, "33": 23, "44": 23, "43": 23, "lokshtanov": [23, 76, 77], "93": 23, "451": 23, "316": 23, "584": 23, "240": 23, "672": 23, "785": 23, "32": 23, "111": 23, "493": 23, "349": 23, "801": 23, "966": 23, "11": [23, 56, 73], "720": 23, "30": [23, 73], "972": 23, "158": 23, "169": 23, "906": 23, "67": 23, "123": 23, "105": 23, "62": 23, "26": [23, 73, 77], "174": 23, "tilde_o_estim": [23, 56], "107": [23, 38], "71": 23, "98": 23, "70": 23, "89": 23, "87": [23, 56], "167": 23, "164": 23, "109": 23, "99": 23, "72": 23, "95": [23, 56], "626": 23, "147": 23, "13": [23, 56, 64], "19677": 23, "las_vega": 23, "38": 23, "40": [23, 26], "28": [23, 27, 56, 73], "3057": 23, "18665241123894338": 23, "592592592592592": 23, "35": 23, "8765": 23, "ngate": [24, 76], "gate": 24, "multipl": [24, 25, 73, 77], "prime": 24, "power": [24, 26], "nmonomials_of_degre": [24, 27, 76], "monomi": [24, 27], "ring": [24, 26, 27, 76], "modulo": 24, "nmonomials_up_to_degre": [24, 27, 76], "up": [24, 27, 39], "56": [24, 27], "sum_of_binomial_coeffici": [24, 76], "l": [24, 37, 38, 41, 42, 43, 45, 56, 59, 61, 64, 73, 76, 77], "sum_": 24, "j": [24, 37, 73, 77], "binom": [24, 57, 65, 76], "neg": [24, 27], "maximum": [25, 73, 74], "allow": [25, 54, 62, 74], "get_problem_paramet": [25, 76], "is_defined_over_finite_field": [25, 76], "is_overdefined_system": [25, 76], "overdefin": [25, 77], "is_square_system": [25, 76], "is_underdefined_system": [25, 76], "underdefin": [25, 77], "npolynomi": [25, 26, 76], "order_of_the_field": [25, 76], "runtim": [25, 53], "seri": [26, 27], "hilbertseri": [26, 76], "f_2": [26, 77], "first_nonpositive_integ": [26, 76], "14": [26, 56], "ration": [26, 73], "125": 26, "140": [26, 56, 59, 64], "nmonomialseri": [27, 76], "max_prec": 27, "nm": 27, "f_5": 27, "126": 27, "210": 27, "series_monomials_of_degre": [27, 76], "21": [27, 56, 64, 73], "246": 27, "426": 27, "series_monomials_up_to_degre": [27, 76], "84": 27, "456": 27, "882": 27, "wit": 28, "peestim": [29, 30, 31, 32], "pealgorithm": [29, 30], "peproblem": [29, 30, 32, 76], "pe": [29, 30], "permut": [31, 32, 35, 36, 55, 63, 73, 76], "pkestim": [33, 34, 35, 36], "pkalgorithm": [33, 34], "pkproblem": [33, 34, 36, 76], "kernel": [35, 36], "sdestim": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "sdalgorithm": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56], "ballcollis": [37, 56, 76], "sdproblem": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 76], "ball": [37, 46], "collis": [37, 46], "decod": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 58, 59, 60, 61, 62, 66], "blp11": 37, "bernstein": 37, "lang": 37, "t": [37, 77], "peter": [37, 61], "c": [37, 53, 73, 77], "smaller": 37, "annual": [37, 38, 43], "cryptologi": [37, 38], "confer": [37, 38, 41, 43], "pp": [37, 38, 41, 42, 43], "743": 37, "760": 37, "springer": [37, 38, 41, 43, 77], "2011": [37, 38], "weight": [37, 38, 39, 40, 41, 42, 43, 44, 45, 56, 58, 59, 60, 61, 64, 66], "distribut": [37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 60, 61, 73], "2p": [37, 38, 41, 42, 43, 45, 61], "2pl": 37, "pl": [37, 56, 76], "p": [37, 38, 39, 40, 41, 42, 43, 45, 56, 59, 61, 64, 73, 76, 77], "syndrom": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 58, 59, 60, 61, 62, 66], "r": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 56, 76, 77], "m4ri": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54], "gaussian": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54], "elimin": [37, 38, 39, 40, 41, 42, 43, 44, 45, 54], "depth": [38, 39, 40, 41, 43, 47, 48, 50, 56, 76], "mmt11": 38, "mai": [38, 41, 43, 48, 50, 53, 73], "meurer": 38, "random": [38, 73], "054n": 38, "theori": [38, 42, 43, 73], "applic": [38, 43, 73, 77], "inform": [38, 42, 73], "secur": [38, 41, 43], "124": 38, "bjmm12": 38, "becker": 38, "joux": [38, 77], "binari": [38, 43, 53, 73], "how": 38, "improv": [38, 77], "cryptograph": [38, 43], "techniqu": [38, 43], "520": 38, "536": 38, "2012": 38, "initialize_parameter_rang": [38, 39, 40, 41, 42, 43, 45, 59, 61, 76], "p1": [38, 39, 40, 41, 43, 56, 76], "p2": [38, 41, 43, 56, 76], "restart": [38, 43], "process": [38, 39, 40, 41, 42, 43, 45, 59, 61], "bjmmd2": [38, 56, 76], "bjmm_depth_2": 38, "start": [38, 39, 40, 41, 42, 43, 45, 59, 61, 73], "optimis": [38, 39, 40, 41, 42, 43, 45, 59, 61, 75], "bjmmd3": [38, 56, 76], "bjmm_depth_3": 38, "bjmmdw": [39, 40, 56, 76], "bjmm": [39, 40, 43, 56, 76], "isjoint": 39, "eight": 39, "combin": 39, "mitm": [39, 40, 41], "nearest": [39, 43, 48, 50, 53], "neighbor": [39, 43, 48, 50], "eb2022": [39, 40], "mmt2011": [39, 40], "bjmm2012": [39, 40], "l1": [39, 40], "l2": [39, 40], "w1": [39, 41, 56, 76], "w2": [39, 40, 41, 56, 76], "ham": [39, 73], "error": [39, 41, 56, 58, 64, 66, 73], "vector": 39, "mem": [39, 75], "avail": [39, 73], "log2": 39, "unlimit": 39, "hmap": [39, 54], "indic": [39, 54, 71, 73], "hashmap": [39, 54], "being": [39, 54], "p_rang": 39, "interv": [39, 73], "help": [39, 73], "speed": 39, "disjoint": [39, 40], "w11": [39, 76], "bjmmpdw": [40, 56, 76], "partial": 40, "explicit": 40, "nn": [40, 41], "level": 40, "bothmai": [41, 56, 76], "both": [41, 48, 73], "indyk": 41, "motwani": 41, "botmay18": 41, "high": 41, "rate": 41, "impact": 41, "lpn": 41, "post": 41, "cryptographi": 41, "46": 41, "2018": [41, 73], "isd": [42, 58, 66], "dum91": 42, "On": [42, 43, 77], "minimum": 42, "distanc": 42, "proc": 42, "5th": 42, "joint": 42, "soviet": 42, "swedish": 42, "workshop": 42, "52": 42, "1991": 42, "mayozerov": [43, 56, 76], "ozerov": [43, 48, 50, 53], "mo15": [43, 53], "203": 43, "228": 43, "2015": 43, "asymptot": [43, 53], "mayozerovd2": [43, 56, 76], "mayozerov_depth_2": 43, "mayozerovd3": [43, 56, 76], "mayozerov_depth_3": 43, "pra1962": [44, 60], "ste1988": [45, 61], "blp2008": [45, 61], "sdworkfactormodel": [46, 47, 48, 49, 50, 51, 52, 53], "ballcollisionscipymodel": [46, 76], "par_nam": [46, 47, 48, 49, 50, 51, 52], "iter": [46, 47, 48, 49, 50, 51, 52], "accuraci": [46, 47, 48, 49, 50, 51, 52], "scipymodel": [46, 47, 48, 49, 50, 51, 52], "workfactor": [46, 47, 48, 49, 50, 51, 52], "get_time_memory_and_paramet": [46, 47, 48, 49, 50, 51, 52, 76], "bjmmscipymodel": [47, 76], "bothmayscipymodel": [48, 76], "dumerscipymodel": [49, 76], "mayozerovscipymodel": [50, 76], "prangescipymodel": [51, 76], "sternscipymodel": [52, 76], "binary_entropi": [53, 76], "entropi": 53, "binomial_approxim": [53, 76], "binomi": [53, 57, 65], "coefficietn": 53, "via": [53, 73], "sterl": 53, "approxim": 53, "inverse_binary_entropi": [53, 76], "v": [53, 77], "invers": 53, "eg": 53, "uniqu": 53, "x": [53, 73, 75, 77], "list_of_random_tupl": [53, 76], "y": [53, 73, 77], "may_ozerov_near_neighbor_tim": [53, 76], "list_siz": 53, "vector_length": 53, "target_weight": 53, "neighbour": 53, "representations_asymptot": [53, 76], "weight_to_cancel": 53, "represent": [53, 55, 63, 76], "wrap": [53, 76], "f": [53, 77], "g": [53, 73, 77], "helper": [53, 73, 76], "scipi": 53, "framework": 53, "var_rang": [54, 62], "adapt": [54, 62], "sort": 54, "verboseinform": [55, 63, 76], "enum": [55, 63, 75], "constraint": [55, 63, 76], "gauss": [55, 63, 76], "tree": [55, 63, 76], "todo": [56, 59, 61], "mayb": 56, "should": [56, 73], "optional_paramet": 56, "may_ozerov": [56, 76], "22": 56, "dumer": [56, 76], "prang": [56, 64, 76], "stern": [56, 64, 76], "workfactor_accuraci": 56, "29": [56, 64], "3488": 56, "2720": 56, "64": 56, "151": [56, 64], "460": 56, "49": 56, "814": 56, "143": 56, "448": 56, "86": 56, "221": 56, "141": 56, "886": 56, "104": 56, "057": 56, "197": 56, "711": 56, "995": 56, "79": 56, "380": 56, "58": 56, "019": 56, "47": 56, "795": 56, "592": 56, "173": 56, "388": 56, "576": 56, "409": 56, "min_max": [57, 65, 76], "b": [57, 65, 73, 77], "bool": [57, 65, 75], "max": [57, 65], "depend": [57, 65], "switch": [57, 65, 73], "basefield": [58, 66], "paramt": [58, 66], "sdfqestim": [59, 60, 61, 62, 63, 64, 65, 66], "sdfqalgorithm": [59, 60, 61, 62], "sdfqproblem": [59, 60, 61, 62, 66, 76], "lee": 59, "brickel": 59, "961": [59, 61, 64], "771": [59, 61, 64], "48": [59, 61, 64], "31928490910389": 59, "129": [61, 64], "05902980703917": 61, "fq": [62, 66], "deterimin": [62, 71], "leebrickel": [64, 76], "310": 64, "794": 64, "059": 64, "016": 64, "319": [64, 77], "808": 64, "is_syndrome_zero": 66, "can": [66, 73], "seestim": [67, 68, 69, 70], "sealgorithm": [67, 68], "seproblem": [67, 68, 70, 76], "se": [67, 68], "sub": [69, 70], "func": 71, "decor": 71, "method": [71, 77], "basealgoritm": 71, "subclass": [71, 73], "alg": 73, "prob": 73, "include_tildeo": 73, "tildeo": [73, 75, 76], "esim": 73, "include_quantum": 73, "quyantum": 73, "channel": [73, 76], "implement": 73, "theoret": 73, "notion": 73, "transmiss": 73, "messag": 73, "build": 73, "errorerasurechannel": 73, "qarysymmetricchannel": 73, "staticerrorratechannel": 73, "To": [73, 76], "global": 73, "namespac": 73, "channels_catalog": 73, "paritycheckcod": 73, "check": 73, "cycliccod": 73, "cyclic": 73, "bchcode": 73, "bch": 73, "generalizedreedsolomoncod": 73, "reed": 73, "solomon": 73, "reedsolomoncod": 73, "binaryreedmullercod": 73, "muller": 73, "reedmullercod": 73, "ari": 73, "hammingcod": 73, "golaycod": 73, "golai": 73, "goppacod": 73, "goppa": 73, "kasamicod": 73, "kasami": 73, "duadiccodeevenpair": 73, "duadic": 73, "pair": 73, "duadiccodeoddpair": 73, "odd": 73, "quadraticresiduecod": 73, "residu": 73, "extendedquadraticresiduecod": 73, "extend": [73, 77], "quadraticresiduecodeevenpair": 73, "like": 73, "quadraticresiduecodeoddpair": 73, "quasiquadraticresiduecod": 73, "quasi": 73, "requir": 73, "gap": 73, "guava": 73, "toriccod": 73, "toric": 73, "walshcod": 73, "walsh": 73, "from_parity_check_matrix": 73, "random_linear_cod": 73, "randomlinearcodeguava": 73, "through": 73, "subfieldsubcod": 73, "subfield": 73, "subcod": 73, "extendedcod": 73, "puncturedcod": 73, "codes_catalog": 73, "cone": [73, 76], "common": 73, "polyhedr": 73, "convex": 73, "shortcut": 73, "group": [73, 76], "under": 73, "prefix": 73, "creat": 73, "nonneg": 73, "orthant": 73, "rearrang": 73, "schur": 73, "trivial": 73, "At": 73, "moment": 73, "support": 73, "built": 73, "constructor": 73, "As": 73, "pass": 73, "ambient": 73, "ambient_dim": 73, "lattic": 73, "infer": 73, "space": 73, "typic": 73, "nonnegative_orth": 73, "rai": 73, "empti": 73, "collect": 73, "other": 73, "argument": 73, "dual": 73, "For": 73, "more": 73, "about": 73, "see": 73, "document": [73, 76], "individu": 73, "therein": 73, "crystal": [73, 76], "Of": 73, "let": 73, "pi": 73, "vee": 73, "cartan": 73, "datum": 73, "a_": 73, "ij": 73, "_": 73, "jin": 73, "abstract": 73, "togeth": 73, "map": 73, "e_i": 73, "f_i": 73, "colon": 73, "cup": 73, "qquad": 73, "varepsilon_i": 73, "varphi_i": 73, "zz": 73, "infti": 73, "mathrm": 73, "wt": 73, "subject": 73, "condit": 73, "langl": 73, "h_i": 73, "rangl": 73, "e_ib": 73, "alpha_i": 73, "f_ib": 73, "iin": 73, "bin": 73, "categori": 73, "combinat": 73, "current": 73, "affinecrystalfromclass": 73, "affinecrystalfromclassicalandpromot": 73, "affinefactor": 73, "affinizationof": 73, "alcovepath": 73, "fastranktwo": 73, "fullycommutativestablegrothendieck": 73, "generalizedyoungwal": 73, "highestweight": 73, "induc": 73, "kacmodul": 73, "kirillovreshetikhin": 73, "kleshchevpartit": 73, "kyotopathmodel": 73, "letter": 73, "lspath": 73, "minimaj": 73, "nakajimamonomi": 73, "oddnegativeroot": 73, "projectedlevelzerolspath": 73, "riggedconfigur": 73, "shiftedprimedtableaux": 73, "spin": 73, "spinsplu": 73, "spinsminu": 73, "tableaux": 73, "subcatalog": 73, "catalog_infinity_cryst": 73, "catalog_elementary_cryst": 73, "catalog_kirillov_reshetikhin": 73, "functori": 73, "directsum": 73, "tensorproduct": 73, "financ": [73, 76], "self": [73, 77], "accur": 73, "signatur": [73, 77], "finite_dynamical_system": [73, 76], "discret": 73, "dynam": 73, "sever": 73, "finite_dynamical_system_catalog": 73, "just": 73, "hit": 73, "tab": 73, "author": 73, "darij": 73, "grinberg": 73, "tom": 73, "robi": 73, "version": 73, "game_theori": [73, 76], "game": 73, "graph_color": [73, 76], "file": 73, "graph": 73, "pyx": 73, "line": 73, "color": 73, "gather": 73, "relat": 73, "what": 73, "do": 73, "proper": 73, "vertex": 73, "all_graph_color": 73, "first_color": 73, "number_of_n_color": 73, "numbers_of_color": 73, "chromatic_numb": 73, "chromat": 73, "vertex_color": 73, "fraction": 73, "relax": 73, "fractional_chromatic_numb": 73, "fractional_chromatic_index": 73, "grundy_color": 73, "grundi": 73, "b_color": 73, "edge_color": 73, "edg": 73, "round_robin": 73, "robin": 73, "complet": 73, "vertic": 73, "linear_arbor": 73, "arbor": 73, "acyclic_edge_color": 73, "acycl": 73, "boothbi": 73, "2008": 73, "02": 73, "carlo": 73, "hamalainen": 73, "2009": [73, 77], "03": 73, "minor": 73, "chang": 73, "dlx": 73, "solver": 73, "nathann": 73, "cohen": 73, "program": 73, "variou": 73, "easi": 73, "wai": 73, "discov": 73, "quickli": 73, "press": 73, "kei": 73, "so": 73, "begin": 73, "primari": 73, "divis": 73, "matric": 73, "symmetr": 73, "altern": 73, "kleinfour": 73, "quaternion": 73, "complexreflect": 73, "dihedr": 73, "dicycl": 73, "mathieu": 73, "suzuki": 73, "pgl": 73, "psl": 73, "psp": 73, "psu": 73, "pgu": 73, "transit": 73, "rubikscub": 73, "quaterniongf3": 73, "gl": 73, "sl": 73, "sp": 73, "gu": 73, "su": 73, "go": 73, "present": 73, "fgabelian": 73, "affin": 73, "euclidean": 73, "lie": 73, "nilpot": 73, "miscellan": 73, "misc": 73, "coxet": 73, "reflect": 73, "braid": 73, "coxetergroup": 73, "reflectiongroup": 73, "rightangledartin": 73, "weylgroup": 73, "additiveabelian": 73, "additivecycl": 73, "free": 73, "semimonomialtransform": 73, "lattice_polytop": [73, 76], "reflex": 73, "polytop": 73, "tool": 73, "hull": 73, "point": 73, "rr": 73, "embed": 73, "whose": 73, "have": 73, "coordin": 73, "geq": 73, "text": 73, "polar": 73, "also": 73, "packag": 73, "analyz": 73, "palp": 73, "written": 73, "maximilian": 73, "kreuzer": 73, "harald": 73, "skark": 73, "freeli": 73, "gnu": 73, "licens": 73, "term": 73, "http": [73, 77], "hep": 73, "itp": 73, "tuwien": 73, "ac": 73, "cy": 73, "moreov": 73, "standard": 73, "arxiv": [73, 77], "math": 73, "sc": 73, "0204356": 73, "Its": 73, "nef": 73, "wa": 73, "erwin": 73, "riegler": 73, "partit": 73, "hodg": 73, "data": 73, "intersect": 73, "acknowledg": 73, "py": 73, "william": [73, 77], "stein": 73, "organ": 73, "interfac": 73, "andrei": 73, "novoseltsev": 73, "debug": 73, "tune": 73, "robert": 73, "bradshaw": 73, "realiz": 73, "plot3d": 73, "dure": 73, "compil": 73, "etc": 73, "limit": 73, "lead": 73, "differ": 73, "except": 73, "rais": 73, "poli": 73, "exclam": 73, "mark": 73, "exact": 73, "command": 73, "caus": 73, "descript": 73, "obtain": 73, "cach": 73, "immut": 73, "particular": 73, "you": [73, 76], "cannot": 73, "creation": 73, "larg": 73, "look": 73, "all_": 73, "precomput": 73, "few": 73, "run": 73, "significantli": 73, "affect": 73, "futur": 73, "dump": 73, "load": 73, "face": 73, "boundari": 73, "2007": 73, "01": 73, "04": 73, "convex_hul": 73, "minkowski_sum": 73, "dimension": 73, "skeleton_show": 73, "08": 73, "drop": [73, 77], "maxim": 73, "2010": 73, "new": [73, 77], "2013": 73, "09": 73, "pointcollect": 73, "lie_algebra": [73, 76], "There": 73, "comprehens": 73, "transform": 73, "abelian": 73, "triangular": 73, "strictli": 73, "symplect": 73, "rank": 73, "heisenberg": 73, "virasoro": 73, "liealgebraregularvectorfield": 73, "virasoroalgebra": 73, "travi": 73, "scrimshaw": 73, "07": 73, "lie_conformal_algebra": [73, 76], "conform": 73, "boson": 73, "ghost": 73, "fermion": 73, "super": 73, "neveu": 73, "schwarz": 73, "weyl": 73, "reimundo": 73, "heluani": 73, "2020": 73, "06": 73, "manifold": [73, 76], "rapidli": 73, "simpl": 73, "entri": 73, "euclideanspac": 73, "reallin": 73, "real": 73, "openinterv": 73, "open": 73, "sphere": 73, "toru": 73, "minkowski": 73, "kerr": 73, "spacetim": 73, "florentin": 73, "jaffredo": 73, "matroid": [73, 76], "submenu": 73, "named_matroid": 73, "varieti": 73, "parametr": 73, "ag": 73, "completegraph": 73, "pg": 73, "uniform": 73, "wheel": 73, "whirl": 73, "ag23minu": 73, "ag32prim": 73, "betsyross": 73, "block_9_4": 73, "block_10_5": 73, "d16": 73, "extendedbinarygolaycod": 73, "extendedternarygolaycod": 73, "f8": 73, "fano": 73, "k33dual": 73, "l8": 73, "n2": 73, "nonfano": 73, "nonpappu": 73, "nonvamo": 73, "notp8": 73, "o7": 73, "p6": 73, "p7": 73, "p8": 73, "p8pp": 73, "p9": 73, "pappu": 73, "q6": 73, "q8": 73, "q10": 73, "r6": 73, "r8": 73, "r9a": 73, "r9b": 73, "r10": 73, "r12": 73, "s8": 73, "t8": 73, "t12": 73, "ternarydowling3": 73, "terrahawk": 73, "tictacto": 73, "vamo": 73, "path_tableaux": [73, 76], "path": 73, "tableau": 73, "cylindricaldiagram": 73, "dyckpath": 73, "friezepattern": 73, "semistandardpathtableau": 73, "semistandardpathtableaux": 73, "simplicial_complex": [73, 76], "simplici": 73, "main": 73, "project": 73, "plane": 73, "surfac": 73, "arbitrari": 73, "genu": 73, "asid": 73, "connect": 73, "match": 73, "chessboard": 73, "noticonnectedgraph": 73, "million": 73, "simplic": 73, "barnettespher": 73, "brucknergrunbaumspher": 73, "chessboardcomplex": 73, "complexprojectiveplan": 73, "duncehat": 73, "fareymap": 73, "k3surfac": 73, "kleinbottl": 73, "matchingcomplex": 73, "moorespac": 73, "poincarehomologythreespher": 73, "pseudoquaternionicprojectiveplan": 73, "randomcomplex": 73, "randomtwospher": 73, "realprojectiveplan": 73, "realprojectivespac": 73, "rudinbal": 73, "shiftedcomplex": 73, "simplex": 73, "sumcomplex": 73, "surfaceofgenu": 73, "zieglerbal": 73, "get": 73, "homologi": 73, "triangul": 73, "orient": 73, "m4": 73, "c4": 73, "simplicial_set": [73, 76], "pre": 73, "practic": 73, "increas": 73, "longer": 73, "horn": 73, "much": 73, "becaus": 73, "nondegener": 73, "exponenti": 73, "feasibl": 73, "sinc": 73, "101": 73, "probabl": 73, "bad": 73, "classifi": 73, "monoid": 73, "klein": 73, "bottl": 73, "hopf": 73, "morphism": 73, "extract": 73, "domain": 73, "codomain": 73, "rp10": 73, "c2": 73, "eta": 73, "hopfmap": 73, "s3": 73, "s2": 73, "wedg": 73, "deprec": 73, "warn": 73, "completematch": 73, "doctest": 73, "deprecationwarn": 73, "need": [73, 76], "pleas": 73, "directli": 73, "arxiv_0812_2725": 73, "trac": 73, "sagemath": [73, 76], "org": [73, 77], "27337": 73, "detail": 73, "modsym": 73, "modular": 73, "toric_plott": [73, 76], "plotter": 73, "toricplott": 73, "produc": 73, "plot": 73, "geometri": 73, "adjust": 73, "option": 73, "reset_opt": 73, "volker": 73, "braun": 73, "case": 73, "indirectli": 73, "fan": 73, "toric_varieti": 73, "dp6": 73, "graphic": 73, "primit": 73, "show_rai": 73, "valuat": [73, 76], "base_field": 74, "complexitytyp": [75, 76], "distinguish": 75, "normal": 75, "concat_all_t": [75, 76], "prettyt": 75, "concat_pretty_t": [75, 76], "t1": 75, "t2": 75, "merg": 75, "column": 75, "memory_access_cost": [75, 76], "consumpt": 75, "round_or_trunc": [75, 76], "eiter": 75, "els": 75, "decimi": 75, "sampl": 76, "manual": 76, "minim": 76, "guidelin": 76, "base_const": 76, "base_algorithm": 76, "base_problem": 76, "base_estim": 76, "dummy_estim": 76, "dummy_algorithm": 76, "dummy_algorithm1": 76, "sdfq_algorithm": 76, "sdfq_helper": 76, "sdfq_estim": 76, "sdfq_problem": 76, "sdfq_constant": 76, "le_estim": 76, "le_problem": 76, "le_algorithm": 76, "se_problem": 76, "se_estim": 76, "se_algorithm": 76, "pe_algorithm": 76, "pe_estim": 76, "pe_problem": 76, "degree_of_regular": 76, "mq_helper": 76, "mq_estim": 76, "witness_degre": 76, "mq_constant": 76, "dinur1": 76, "cgmta": 76, "kpg": 76, "mht": 76, "boolean_solve_fxl": 76, "exhaustive_search": 76, "dinur2": 76, "hybrid_f5": 76, "nmonomi": 76, "hilbert": 76, "pk_problem": 76, "pk_algorithm": 76, "pk_estim": 76, "sd_algorithm": 76, "sd_constant": 76, "sd_helper": 76, "sd_estim": 76, "sd_problem": 76, "both_mai": 76, "workfactor_help": 76, "ball_collis": 76, "bjmm_dw": 76, "bjmm_pdw": 76, "bibliograph": 76, "page": 76, "u": 77, "andrea": 77, "petteri": 77, "kaski": 77, "ryan": 77, "count": 77, "reduct": 77, "dagstuhl": 77, "de": 77, "opu": 77, "volltext": 77, "2019": 77, "10602": 77, "pdf": 77, "lipic": 77, "icalp": 77, "antoin": 77, "vanessa": 77, "vits": 77, "boolean": 77, "link": 77, "com": 77, "chapter": 77, "1007": 77, "978": 77, "76620": 77, "1_1": 77, "aviad": 77, "kipni": 77, "jacqu": 77, "patarin": 77, "loui": 77, "goubin": 77, "unbalanc": 77, "oil": 77, "vinegar": 77, "scheme": 77, "540": 77, "48910": 77, "x_15": 77, "charl": 77, "bouillaguet": 77, "hsieh": 77, "chung": 77, "chen": 77, "mou": 77, "cheng": 77, "tung": 77, "chou": 77, "ruben": 77, "niederhagen": 77, "adi": 77, "shamir": 77, "bo": 77, "yin": 77, "yang": 77, "fast": 77, "www": 77, "iacr": 77, "archiv": 77, "ches2010": 77, "62250195": 77, "daniel": 77, "ramamohan": 77, "paturi": 77, "suguru": 77, "tamaki": 77, "huacheng": 77, "yu": 77, "beat": 77, "brute": 77, "forc": 77, "peopl": 77, "csail": 77, "mit": 77, "edu": 77, "rrw": 77, "polyeqsoda2017submit": 77, "hiroyuki": 77, "miura": 77, "yasufumi": 77, "hashimoto": 77, "tsuyoshi": 77, "takagi": 77, "multivari": 77, "642": 77, "38616": 77, "9_8": 77, "itai": 77, "2005": 77, "04800": 77, "cryptanalyt": 77, "eprint": 77, "2021": 77, "578": 77, "jo\u00e3o": 77, "diogo": 77, "duart": 77, "luk": 77, "bettal": 77, "jean": 77, "faug\u00e8r": 77, "ludov": 77, "perret": 77, "approach": 77, "doi": 77, "1515": 77, "jmc": 77, "009": 77, "analysi": 77, "1145": 77, "2442829": 77, "2442843": 77, "magali": 77, "bardet": 77, "bruno": 77, "salvi": 77, "pierr": 77, "spaenlehau": 77, "sciencedirect": 77, "scienc": 77, "articl": 77, "pii": 77, "s0885064x12000611": 77, "nicola": 77, "courtoi": 77, "alexand": 77, "klimov": 77, "effici": 77, "eurocrypt2000": 77, "1807": 77, "18070398": 77, "willi": 77, "meier": 77, "tacier": 77, "45664": 77, "3_15": 77}, "objects": {"cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[0, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[0, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "optimization_parameter_1"], [0, 3, 1, "", "optimization_parameter_2"], [0, 3, 1, "", "optimization_parameter_3"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator": [[1, 0, 0, "-", "dummy_algorithm"], [2, 0, 0, "-", "dummy_estimator"], [3, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[1, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[2, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[2, 3, 1, "", "algorithm_names"], [2, 3, 1, "", "algorithms"], [2, 2, 1, "", "bit_complexities"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "estimate"], [2, 4, 1, "", "excluded_algorithms_by_default"], [2, 3, 1, "", "fastest_algorithm"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "nalgorithms"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[3, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[3, 3, 1, "", "expected_number_solutions"], [3, 3, 1, "", "get_parameters"], [3, 3, 1, "", "to_bitcomplexity_memory"], [3, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.LEEstimator.LEAlgorithms": [[4, 0, 0, "-", "sample"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.sample": [[4, 1, 1, "", "Sample"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample": [[4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "get_optimal_parameters_dict"], [4, 3, 1, "", "has_optimal_parameter"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "memory_complexity"], [4, 3, 1, "", "optimal_parameters"], [4, 3, 1, "", "parameter_names"], [4, 2, 1, "", "parameter_ranges"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "set_parameter_ranges"], [4, 3, 1, "", "set_parameters"], [4, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator": [[5, 0, 0, "-", "le_algorithm"], [6, 0, 0, "-", "le_estimator"], [7, 0, 0, "-", "le_problem"]], "cryptographic_estimators.LEEstimator.le_algorithm": [[5, 1, 1, "", "LEAlgorithm"]], "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm": [[5, 2, 1, "", "complexity_type"], [5, 3, 1, "", "get_optimal_parameters_dict"], [5, 3, 1, "", "has_optimal_parameter"], [5, 2, 1, "", "memory_access"], [5, 3, 1, "", "memory_complexity"], [5, 3, 1, "", "optimal_parameters"], [5, 3, 1, "", "parameter_names"], [5, 2, 1, "", "parameter_ranges"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "set_parameter_ranges"], [5, 3, 1, "", "set_parameters"], [5, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator.le_estimator": [[6, 1, 1, "", "LEEstimator"]], "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator": [[6, 3, 1, "", "algorithm_names"], [6, 3, 1, "", "algorithms"], [6, 2, 1, "", "bit_complexities"], [6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "estimate"], [6, 4, 1, "", "excluded_algorithms_by_default"], [6, 3, 1, "", "fastest_algorithm"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "nalgorithms"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "table"]], "cryptographic_estimators.LEEstimator.le_problem": [[7, 1, 1, "", "LEProblem"]], "cryptographic_estimators.LEEstimator.le_problem.LEProblem": [[7, 3, 1, "", "expected_number_solutions"], [7, 3, 1, "", "get_parameters"], [7, 3, 1, "", "to_bitcomplexity_memory"], [7, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[8, 0, 0, "-", "bjorklund"], [9, 0, 0, "-", "boolean_solve_fxl"], [10, 0, 0, "-", "cgmta"], [11, 0, 0, "-", "crossbred"], [12, 0, 0, "-", "dinur1"], [13, 0, 0, "-", "dinur2"], [14, 0, 0, "-", "exhaustive_search"], [15, 0, 0, "-", "f5"], [16, 0, 0, "-", "hybrid_f5"], [17, 0, 0, "-", "kpg"], [18, 0, 0, "-", "lokshtanov"], [19, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[8, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[8, 2, 1, "", "complexity_type"], [8, 3, 1, "", "get_optimal_parameters_dict"], [8, 3, 1, "", "get_reduced_parameters"], [8, 3, 1, "", "has_optimal_parameter"], [8, 3, 1, "", "lambda_"], [8, 3, 1, "", "linear_algebra_constant"], [8, 2, 1, "", "memory_access"], [8, 3, 1, "", "memory_complexity"], [8, 3, 1, "", "npolynomials_reduced"], [8, 3, 1, "", "nvariables_reduced"], [8, 3, 1, "", "optimal_parameters"], [8, 3, 1, "", "parameter_names"], [8, 2, 1, "", "parameter_ranges"], [8, 3, 1, "", "reset"], [8, 3, 1, "", "set_parameter_ranges"], [8, 3, 1, "", "set_parameters"], [8, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl": [[9, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL": [[9, 2, 1, "", "complexity_type"], [9, 3, 1, "", "get_optimal_parameters_dict"], [9, 3, 1, "", "get_reduced_parameters"], [9, 3, 1, "", "has_optimal_parameter"], [9, 3, 1, "", "k"], [9, 3, 1, "", "linear_algebra_constant"], [9, 2, 1, "", "memory_access"], [9, 3, 1, "", "memory_complexity"], [9, 3, 1, "", "npolynomials_reduced"], [9, 3, 1, "", "nvariables_reduced"], [9, 3, 1, "", "optimal_parameters"], [9, 3, 1, "", "parameter_names"], [9, 2, 1, "", "parameter_ranges"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "set_parameter_ranges"], [9, 3, 1, "", "set_parameters"], [9, 3, 1, "", "time_complexity"], [9, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[10, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[10, 2, 1, "", "complexity_type"], [10, 3, 1, "", "get_optimal_parameters_dict"], [10, 3, 1, "", "get_reduced_parameters"], [10, 3, 1, "", "has_optimal_parameter"], [10, 3, 1, "", "linear_algebra_constant"], [10, 2, 1, "", "memory_access"], [10, 3, 1, "", "memory_complexity"], [10, 3, 1, "", "npolynomials_reduced"], [10, 3, 1, "", "nvariables_reduced"], [10, 3, 1, "", "optimal_parameters"], [10, 3, 1, "", "parameter_names"], [10, 2, 1, "", "parameter_ranges"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "set_parameter_ranges"], [10, 3, 1, "", "set_parameters"], [10, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[11, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[11, 3, 1, "", "D"], [11, 2, 1, "", "complexity_type"], [11, 3, 1, "", "d"], [11, 3, 1, "", "get_optimal_parameters_dict"], [11, 3, 1, "", "get_reduced_parameters"], [11, 3, 1, "", "has_optimal_parameter"], [11, 3, 1, "", "k"], [11, 3, 1, "", "linear_algebra_constant"], [11, 2, 1, "", "max_D"], [11, 2, 1, "", "memory_access"], [11, 3, 1, "", "memory_complexity"], [11, 3, 1, "", "npolynomials_reduced"], [11, 3, 1, "", "nvariables_reduced"], [11, 3, 1, "", "optimal_parameters"], [11, 3, 1, "", "parameter_names"], [11, 2, 1, "", "parameter_ranges"], [11, 3, 1, "", "reset"], [11, 3, 1, "", "set_parameter_ranges"], [11, 3, 1, "", "set_parameters"], [11, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[12, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "get_reduced_parameters"], [12, 3, 1, "", "has_optimal_parameter"], [12, 3, 1, "", "kappa"], [12, 3, 1, "", "lambda_"], [12, 3, 1, "", "linear_algebra_constant"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "npolynomials_reduced"], [12, 3, 1, "", "nvariables_reduced"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[13, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "get_reduced_parameters"], [13, 3, 1, "", "has_optimal_parameter"], [13, 3, 1, "", "linear_algebra_constant"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "n1"], [13, 3, 1, "", "npolynomials_reduced"], [13, 3, 1, "", "nvariables_reduced"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[14, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[14, 2, 1, "", "complexity_type"], [14, 3, 1, "", "get_optimal_parameters_dict"], [14, 3, 1, "", "get_reduced_parameters"], [14, 3, 1, "", "has_optimal_parameter"], [14, 3, 1, "", "linear_algebra_constant"], [14, 2, 1, "", "memory_access"], [14, 3, 1, "", "memory_complexity"], [14, 3, 1, "", "npolynomials_reduced"], [14, 3, 1, "", "nvariables_reduced"], [14, 3, 1, "", "optimal_parameters"], [14, 3, 1, "", "parameter_names"], [14, 2, 1, "", "parameter_ranges"], [14, 3, 1, "", "reset"], [14, 3, 1, "", "set_parameter_ranges"], [14, 3, 1, "", "set_parameters"], [14, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[15, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "degree_of_polynomials"], [15, 3, 1, "", "get_optimal_parameters_dict"], [15, 3, 1, "", "get_reduced_parameters"], [15, 3, 1, "", "has_optimal_parameter"], [15, 3, 1, "", "linear_algebra_constant"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "memory_complexity"], [15, 3, 1, "", "npolynomials_reduced"], [15, 3, 1, "", "nvariables_reduced"], [15, 3, 1, "", "optimal_parameters"], [15, 3, 1, "", "parameter_names"], [15, 2, 1, "", "parameter_ranges"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "set_parameter_ranges"], [15, 3, 1, "", "set_parameters"], [15, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[16, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[16, 2, 1, "", "complexity_type"], [16, 3, 1, "", "degree_of_polynomials"], [16, 3, 1, "", "get_optimal_parameters_dict"], [16, 3, 1, "", "get_reduced_parameters"], [16, 3, 1, "", "has_optimal_parameter"], [16, 3, 1, "", "k"], [16, 3, 1, "", "linear_algebra_constant"], [16, 2, 1, "", "memory_access"], [16, 3, 1, "", "memory_complexity"], [16, 3, 1, "", "npolynomials_reduced"], [16, 3, 1, "", "nvariables_reduced"], [16, 3, 1, "", "optimal_parameters"], [16, 3, 1, "", "parameter_names"], [16, 2, 1, "", "parameter_ranges"], [16, 3, 1, "", "reset"], [16, 3, 1, "", "set_parameter_ranges"], [16, 3, 1, "", "set_parameters"], [16, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[17, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[17, 2, 1, "", "complexity_type"], [17, 3, 1, "", "get_optimal_parameters_dict"], [17, 3, 1, "", "get_reduced_parameters"], [17, 3, 1, "", "has_optimal_parameter"], [17, 3, 1, "", "linear_algebra_constant"], [17, 2, 1, "", "memory_access"], [17, 3, 1, "", "memory_complexity"], [17, 3, 1, "", "npolynomials_reduced"], [17, 3, 1, "", "nvariables_reduced"], [17, 3, 1, "", "optimal_parameters"], [17, 3, 1, "", "parameter_names"], [17, 2, 1, "", "parameter_ranges"], [17, 3, 1, "", "reset"], [17, 3, 1, "", "set_parameter_ranges"], [17, 3, 1, "", "set_parameters"], [17, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[18, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[18, 2, 1, "", "complexity_type"], [18, 3, 1, "", "delta"], [18, 3, 1, "", "get_optimal_parameters_dict"], [18, 3, 1, "", "get_reduced_parameters"], [18, 3, 1, "", "has_optimal_parameter"], [18, 3, 1, "", "linear_algebra_constant"], [18, 2, 1, "", "memory_access"], [18, 3, 1, "", "memory_complexity"], [18, 3, 1, "", "npolynomials_reduced"], [18, 3, 1, "", "nvariables_reduced"], [18, 3, 1, "", "optimal_parameters"], [18, 3, 1, "", "parameter_names"], [18, 2, 1, "", "parameter_ranges"], [18, 3, 1, "", "reset"], [18, 3, 1, "", "set_parameter_ranges"], [18, 3, 1, "", "set_parameters"], [18, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[19, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "get_optimal_parameters_dict"], [19, 3, 1, "", "get_reduced_parameters"], [19, 3, 1, "", "has_optimal_parameter"], [19, 3, 1, "", "linear_algebra_constant"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "memory_complexity"], [19, 3, 1, "", "npolynomials_reduced"], [19, 3, 1, "", "nvariables_reduced"], [19, 3, 1, "", "optimal_parameters"], [19, 3, 1, "", "parameter_names"], [19, 2, 1, "", "parameter_ranges"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "set_parameter_ranges"], [19, 3, 1, "", "set_parameters"], [19, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator": [[20, 0, 0, "-", "degree_of_regularity"], [21, 0, 0, "-", "mq_algorithm"], [22, 0, 0, "-", "mq_constants"], [23, 0, 0, "-", "mq_estimator"], [24, 0, 0, "-", "mq_helper"], [25, 0, 0, "-", "mq_problem"], [28, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[20, 5, 1, "", "generic_system"], [20, 5, 1, "", "quadratic_system"], [20, 5, 1, "", "regular_system"], [20, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[21, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[21, 2, 1, "", "complexity_type"], [21, 3, 1, "", "get_optimal_parameters_dict"], [21, 3, 1, "", "get_reduced_parameters"], [21, 3, 1, "", "has_optimal_parameter"], [21, 3, 1, "", "linear_algebra_constant"], [21, 2, 1, "", "memory_access"], [21, 3, 1, "", "memory_complexity"], [21, 3, 1, "", "npolynomials_reduced"], [21, 3, 1, "", "nvariables_reduced"], [21, 3, 1, "", "optimal_parameters"], [21, 3, 1, "", "parameter_names"], [21, 2, 1, "", "parameter_ranges"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "set_parameter_ranges"], [21, 3, 1, "", "set_parameters"], [21, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[23, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[23, 3, 1, "", "algorithm_names"], [23, 3, 1, "", "algorithms"], [23, 2, 1, "", "bit_complexities"], [23, 2, 1, "", "complexity_type"], [23, 3, 1, "", "estimate"], [23, 4, 1, "", "excluded_algorithms_by_default"], [23, 3, 1, "", "fastest_algorithm"], [23, 2, 1, "", "memory_access"], [23, 3, 1, "", "nalgorithms"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[24, 5, 1, "", "ngates"], [24, 5, 1, "", "nmonomials_of_degree"], [24, 5, 1, "", "nmonomials_up_to_degree"], [24, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[25, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[25, 3, 1, "", "expected_number_solutions"], [25, 3, 1, "", "get_problem_parameters"], [25, 3, 1, "", "is_defined_over_finite_field"], [25, 3, 1, "", "is_overdefined_system"], [25, 3, 1, "", "is_square_system"], [25, 3, 1, "", "is_underdefined_system"], [25, 3, 1, "", "npolynomials"], [25, 3, 1, "", "nvariables"], [25, 3, 1, "", "order_of_the_field"], [25, 2, 1, "", "theta"], [25, 3, 1, "", "to_bitcomplexity_memory"], [25, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[26, 0, 0, "-", "hilbert"], [27, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[26, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[26, 2, 1, "", "degrees"], [26, 3, 1, "", "first_nonpositive_integer"], [26, 2, 1, "", "npolynomials"], [26, 2, 1, "", "nvariables"], [26, 2, 1, "", "precision"], [26, 2, 1, "", "ring"], [26, 2, 1, "", "series"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[27, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[27, 3, 1, "", "nmonomials_of_degree"], [27, 3, 1, "", "nmonomials_up_to_degree"], [27, 3, 1, "", "series_monomials_of_degree"], [27, 3, 1, "", "series_monomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[28, 5, 1, "", "quadratic_system"], [28, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.PEEstimator.PEAlgorithms": [[29, 0, 0, "-", "sample"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.sample": [[29, 1, 1, "", "Sample"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample": [[29, 2, 1, "", "complexity_type"], [29, 3, 1, "", "get_optimal_parameters_dict"], [29, 3, 1, "", "has_optimal_parameter"], [29, 2, 1, "", "memory_access"], [29, 3, 1, "", "memory_complexity"], [29, 3, 1, "", "optimal_parameters"], [29, 3, 1, "", "parameter_names"], [29, 2, 1, "", "parameter_ranges"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "set_parameter_ranges"], [29, 3, 1, "", "set_parameters"], [29, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator": [[30, 0, 0, "-", "pe_algorithm"], [31, 0, 0, "-", "pe_estimator"], [32, 0, 0, "-", "pe_problem"]], "cryptographic_estimators.PEEstimator.pe_algorithm": [[30, 1, 1, "", "PEAlgorithm"]], "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm": [[30, 2, 1, "", "complexity_type"], [30, 3, 1, "", "get_optimal_parameters_dict"], [30, 3, 1, "", "has_optimal_parameter"], [30, 2, 1, "", "memory_access"], [30, 3, 1, "", "memory_complexity"], [30, 3, 1, "", "optimal_parameters"], [30, 3, 1, "", "parameter_names"], [30, 2, 1, "", "parameter_ranges"], [30, 3, 1, "", "reset"], [30, 3, 1, "", "set_parameter_ranges"], [30, 3, 1, "", "set_parameters"], [30, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_estimator": [[31, 1, 1, "", "PEEstimator"]], "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator": [[31, 3, 1, "", "algorithm_names"], [31, 3, 1, "", "algorithms"], [31, 2, 1, "", "bit_complexities"], [31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "estimate"], [31, 4, 1, "", "excluded_algorithms_by_default"], [31, 3, 1, "", "fastest_algorithm"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "nalgorithms"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "table"]], "cryptographic_estimators.PEEstimator.pe_problem": [[32, 1, 1, "", "PEProblem"]], "cryptographic_estimators.PEEstimator.pe_problem.PEProblem": [[32, 3, 1, "", "expected_number_solutions"], [32, 3, 1, "", "get_parameters"], [32, 3, 1, "", "to_bitcomplexity_memory"], [32, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PKEstimator.PKAlgorithms": [[33, 0, 0, "-", "sample"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sample": [[33, 1, 1, "", "Sample"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample": [[33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "get_optimal_parameters_dict"], [33, 3, 1, "", "has_optimal_parameter"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "memory_complexity"], [33, 3, 1, "", "optimal_parameters"], [33, 3, 1, "", "parameter_names"], [33, 2, 1, "", "parameter_ranges"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_parameter_ranges"], [33, 3, 1, "", "set_parameters"], [33, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator": [[34, 0, 0, "-", "pk_algorithm"], [35, 0, 0, "-", "pk_estimator"], [36, 0, 0, "-", "pk_problem"]], "cryptographic_estimators.PKEstimator.pk_algorithm": [[34, 1, 1, "", "PKAlgorithm"]], "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm": [[34, 2, 1, "", "complexity_type"], [34, 3, 1, "", "get_optimal_parameters_dict"], [34, 3, 1, "", "has_optimal_parameter"], [34, 2, 1, "", "memory_access"], [34, 3, 1, "", "memory_complexity"], [34, 3, 1, "", "optimal_parameters"], [34, 3, 1, "", "parameter_names"], [34, 2, 1, "", "parameter_ranges"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_parameter_ranges"], [34, 3, 1, "", "set_parameters"], [34, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator.pk_estimator": [[35, 1, 1, "", "PKEstimator"]], "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator": [[35, 3, 1, "", "algorithm_names"], [35, 3, 1, "", "algorithms"], [35, 2, 1, "", "bit_complexities"], [35, 2, 1, "", "complexity_type"], [35, 3, 1, "", "estimate"], [35, 4, 1, "", "excluded_algorithms_by_default"], [35, 3, 1, "", "fastest_algorithm"], [35, 2, 1, "", "memory_access"], [35, 3, 1, "", "nalgorithms"], [35, 3, 1, "", "reset"], [35, 3, 1, "", "table"]], "cryptographic_estimators.PKEstimator.pk_problem": [[36, 1, 1, "", "PKProblem"]], "cryptographic_estimators.PKEstimator.pk_problem.PKProblem": [[36, 3, 1, "", "expected_number_solutions"], [36, 3, 1, "", "get_parameters"], [36, 3, 1, "", "to_bitcomplexity_memory"], [36, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[37, 0, 0, "-", "ball_collision"], [38, 0, 0, "-", "bjmm"], [39, 0, 0, "-", "bjmm_dw"], [40, 0, 0, "-", "bjmm_pdw"], [41, 0, 0, "-", "both_may"], [42, 0, 0, "-", "dumer"], [43, 0, 0, "-", "may_ozerov"], [44, 0, 0, "-", "prange"], [45, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[37, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[37, 2, 1, "", "complexity_type"], [37, 3, 1, "", "get_optimal_parameters_dict"], [37, 3, 1, "", "has_optimal_parameter"], [37, 3, 1, "", "l"], [37, 2, 1, "", "memory_access"], [37, 3, 1, "", "memory_complexity"], [37, 3, 1, "", "optimal_parameters"], [37, 3, 1, "", "p"], [37, 3, 1, "", "parameter_names"], [37, 2, 1, "", "parameter_ranges"], [37, 3, 1, "", "pl"], [37, 3, 1, "", "r"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "set_parameter_ranges"], [37, 3, 1, "", "set_parameters"], [37, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[38, 1, 1, "", "BJMM"], [38, 1, 1, "", "BJMMd2"], [38, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "depth"], [38, 3, 1, "", "get_optimal_parameters_dict"], [38, 3, 1, "", "has_optimal_parameter"], [38, 3, 1, "", "initialize_parameter_ranges"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "memory_complexity"], [38, 3, 1, "", "optimal_parameters"], [38, 3, 1, "", "parameter_names"], [38, 2, 1, "", "parameter_ranges"], [38, 3, 1, "", "r"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "set_parameter_ranges"], [38, 3, 1, "", "set_parameters"], [38, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "get_optimal_parameters_dict"], [38, 3, 1, "", "has_optimal_parameter"], [38, 3, 1, "", "initialize_parameter_ranges"], [38, 3, 1, "", "l"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "memory_complexity"], [38, 3, 1, "", "optimal_parameters"], [38, 3, 1, "", "p"], [38, 3, 1, "", "p1"], [38, 3, 1, "", "parameter_names"], [38, 2, 1, "", "parameter_ranges"], [38, 3, 1, "", "r"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "set_parameter_ranges"], [38, 3, 1, "", "set_parameters"], [38, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "get_optimal_parameters_dict"], [38, 3, 1, "", "has_optimal_parameter"], [38, 3, 1, "", "initialize_parameter_ranges"], [38, 3, 1, "", "l"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "memory_complexity"], [38, 3, 1, "", "optimal_parameters"], [38, 3, 1, "", "p"], [38, 3, 1, "", "p1"], [38, 3, 1, "", "p2"], [38, 3, 1, "", "parameter_names"], [38, 2, 1, "", "parameter_ranges"], [38, 3, 1, "", "r"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "set_parameter_ranges"], [38, 3, 1, "", "set_parameters"], [38, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[39, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[39, 2, 1, "", "complexity_type"], [39, 3, 1, "", "get_optimal_parameters_dict"], [39, 3, 1, "", "has_optimal_parameter"], [39, 3, 1, "", "initialize_parameter_ranges"], [39, 2, 1, "", "memory_access"], [39, 3, 1, "", "memory_complexity"], [39, 3, 1, "", "optimal_parameters"], [39, 3, 1, "", "p"], [39, 3, 1, "", "p1"], [39, 3, 1, "", "parameter_names"], [39, 2, 1, "", "parameter_ranges"], [39, 3, 1, "", "r"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "set_parameter_ranges"], [39, 3, 1, "", "set_parameters"], [39, 3, 1, "", "time_complexity"], [39, 3, 1, "", "w1"], [39, 3, 1, "", "w11"], [39, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[40, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[40, 2, 1, "", "complexity_type"], [40, 3, 1, "", "get_optimal_parameters_dict"], [40, 3, 1, "", "has_optimal_parameter"], [40, 3, 1, "", "initialize_parameter_ranges"], [40, 2, 1, "", "memory_access"], [40, 3, 1, "", "memory_complexity"], [40, 3, 1, "", "optimal_parameters"], [40, 3, 1, "", "p"], [40, 3, 1, "", "p1"], [40, 3, 1, "", "parameter_names"], [40, 2, 1, "", "parameter_ranges"], [40, 3, 1, "", "r"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "set_parameter_ranges"], [40, 3, 1, "", "set_parameters"], [40, 3, 1, "", "time_complexity"], [40, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[41, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[41, 2, 1, "", "complexity_type"], [41, 3, 1, "", "get_optimal_parameters_dict"], [41, 3, 1, "", "has_optimal_parameter"], [41, 3, 1, "", "initialize_parameter_ranges"], [41, 3, 1, "", "l"], [41, 2, 1, "", "memory_access"], [41, 3, 1, "", "memory_complexity"], [41, 3, 1, "", "optimal_parameters"], [41, 3, 1, "", "p"], [41, 3, 1, "", "p1"], [41, 3, 1, "", "parameter_names"], [41, 2, 1, "", "parameter_ranges"], [41, 3, 1, "", "r"], [41, 3, 1, "", "reset"], [41, 3, 1, "", "set_parameter_ranges"], [41, 3, 1, "", "set_parameters"], [41, 3, 1, "", "time_complexity"], [41, 3, 1, "", "w1"], [41, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[42, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[42, 2, 1, "", "complexity_type"], [42, 3, 1, "", "get_optimal_parameters_dict"], [42, 3, 1, "", "has_optimal_parameter"], [42, 3, 1, "", "initialize_parameter_ranges"], [42, 3, 1, "", "l"], [42, 2, 1, "", "memory_access"], [42, 3, 1, "", "memory_complexity"], [42, 3, 1, "", "optimal_parameters"], [42, 3, 1, "", "p"], [42, 3, 1, "", "parameter_names"], [42, 2, 1, "", "parameter_ranges"], [42, 3, 1, "", "r"], [42, 3, 1, "", "reset"], [42, 3, 1, "", "set_parameter_ranges"], [42, 3, 1, "", "set_parameters"], [42, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[43, 1, 1, "", "MayOzerov"], [43, 1, 1, "", "MayOzerovD2"], [43, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "depth"], [43, 3, 1, "", "get_optimal_parameters_dict"], [43, 3, 1, "", "has_optimal_parameter"], [43, 3, 1, "", "initialize_parameter_ranges"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "memory_complexity"], [43, 3, 1, "", "optimal_parameters"], [43, 3, 1, "", "parameter_names"], [43, 2, 1, "", "parameter_ranges"], [43, 3, 1, "", "r"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_parameter_ranges"], [43, 3, 1, "", "set_parameters"], [43, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "get_optimal_parameters_dict"], [43, 3, 1, "", "has_optimal_parameter"], [43, 3, 1, "", "initialize_parameter_ranges"], [43, 3, 1, "", "l"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "memory_complexity"], [43, 3, 1, "", "optimal_parameters"], [43, 3, 1, "", "p"], [43, 3, 1, "", "p1"], [43, 3, 1, "", "parameter_names"], [43, 2, 1, "", "parameter_ranges"], [43, 3, 1, "", "r"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_parameter_ranges"], [43, 3, 1, "", "set_parameters"], [43, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "get_optimal_parameters_dict"], [43, 3, 1, "", "has_optimal_parameter"], [43, 3, 1, "", "initialize_parameter_ranges"], [43, 3, 1, "", "l"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "memory_complexity"], [43, 3, 1, "", "optimal_parameters"], [43, 3, 1, "", "p"], [43, 3, 1, "", "p1"], [43, 3, 1, "", "p2"], [43, 3, 1, "", "parameter_names"], [43, 2, 1, "", "parameter_ranges"], [43, 3, 1, "", "r"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_parameter_ranges"], [43, 3, 1, "", "set_parameters"], [43, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[44, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[44, 2, 1, "", "complexity_type"], [44, 3, 1, "", "get_optimal_parameters_dict"], [44, 3, 1, "", "has_optimal_parameter"], [44, 2, 1, "", "memory_access"], [44, 3, 1, "", "memory_complexity"], [44, 3, 1, "", "optimal_parameters"], [44, 3, 1, "", "parameter_names"], [44, 2, 1, "", "parameter_ranges"], [44, 3, 1, "", "r"], [44, 3, 1, "", "reset"], [44, 3, 1, "", "set_parameter_ranges"], [44, 3, 1, "", "set_parameters"], [44, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[45, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[45, 2, 1, "", "complexity_type"], [45, 3, 1, "", "get_optimal_parameters_dict"], [45, 3, 1, "", "has_optimal_parameter"], [45, 3, 1, "", "initialize_parameter_ranges"], [45, 3, 1, "", "l"], [45, 2, 1, "", "memory_access"], [45, 3, 1, "", "memory_complexity"], [45, 3, 1, "", "optimal_parameters"], [45, 3, 1, "", "p"], [45, 3, 1, "", "parameter_names"], [45, 2, 1, "", "parameter_ranges"], [45, 3, 1, "", "r"], [45, 3, 1, "", "reset"], [45, 3, 1, "", "set_parameter_ranges"], [45, 3, 1, "", "set_parameters"], [45, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[46, 0, 0, "-", "ball_collision"], [47, 0, 0, "-", "bjmm"], [48, 0, 0, "-", "both_may"], [49, 0, 0, "-", "dumer"], [50, 0, 0, "-", "may_ozerov"], [51, 0, 0, "-", "prange"], [52, 0, 0, "-", "stern"], [53, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[46, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[46, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[47, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[47, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[48, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[48, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[49, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[49, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[50, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[50, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[51, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[51, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[52, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[52, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[53, 5, 1, "", "binary_entropy"], [53, 5, 1, "", "binomial_approximation"], [53, 5, 1, "", "inverse_binary_entropy"], [53, 5, 1, "", "list_of_random_tuples"], [53, 5, 1, "", "may_ozerov_near_neighbor_time"], [53, 5, 1, "", "representations_asymptotic"], [53, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator": [[54, 0, 0, "-", "sd_algorithm"], [55, 0, 0, "-", "sd_constants"], [56, 0, 0, "-", "sd_estimator"], [57, 0, 0, "-", "sd_helper"], [58, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[54, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "get_optimal_parameters_dict"], [54, 3, 1, "", "has_optimal_parameter"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "memory_complexity"], [54, 3, 1, "", "optimal_parameters"], [54, 3, 1, "", "parameter_names"], [54, 2, 1, "", "parameter_ranges"], [54, 3, 1, "", "r"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "set_parameter_ranges"], [54, 3, 1, "", "set_parameters"], [54, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[55, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[55, 4, 1, "", "CONSTRAINTS"], [55, 4, 1, "", "GAUSS"], [55, 4, 1, "", "LISTS"], [55, 4, 1, "", "PERMUTATIONS"], [55, 4, 1, "", "REPRESENTATIONS"], [55, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[56, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[56, 3, 1, "", "algorithm_names"], [56, 3, 1, "", "algorithms"], [56, 2, 1, "", "bit_complexities"], [56, 2, 1, "", "complexity_type"], [56, 3, 1, "", "estimate"], [56, 4, 1, "", "excluded_algorithms_by_default"], [56, 3, 1, "", "fastest_algorithm"], [56, 2, 1, "", "memory_access"], [56, 3, 1, "", "nalgorithms"], [56, 3, 1, "", "reset"], [56, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[57, 5, 1, "", "binom"], [57, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[58, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[58, 3, 1, "", "expected_number_solutions"], [58, 3, 1, "", "get_parameters"], [58, 3, 1, "", "to_bitcomplexity_memory"], [58, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms": [[59, 0, 0, "-", "leebrickell"], [60, 0, 0, "-", "prange"], [61, 0, 0, "-", "stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell": [[59, 1, 1, "", "LeeBrickell"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell": [[59, 2, 1, "", "complexity_type"], [59, 3, 1, "", "get_optimal_parameters_dict"], [59, 3, 1, "", "has_optimal_parameter"], [59, 3, 1, "", "initialize_parameter_ranges"], [59, 2, 1, "", "memory_access"], [59, 3, 1, "", "memory_complexity"], [59, 3, 1, "", "optimal_parameters"], [59, 3, 1, "", "p"], [59, 3, 1, "", "parameter_names"], [59, 2, 1, "", "parameter_ranges"], [59, 3, 1, "", "reset"], [59, 3, 1, "", "set_parameter_ranges"], [59, 3, 1, "", "set_parameters"], [59, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange": [[60, 1, 1, "", "Prange"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange": [[60, 2, 1, "", "complexity_type"], [60, 3, 1, "", "get_optimal_parameters_dict"], [60, 3, 1, "", "has_optimal_parameter"], [60, 2, 1, "", "memory_access"], [60, 3, 1, "", "memory_complexity"], [60, 3, 1, "", "optimal_parameters"], [60, 3, 1, "", "parameter_names"], [60, 2, 1, "", "parameter_ranges"], [60, 3, 1, "", "reset"], [60, 3, 1, "", "set_parameter_ranges"], [60, 3, 1, "", "set_parameters"], [60, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern": [[61, 1, 1, "", "Stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern": [[61, 2, 1, "", "complexity_type"], [61, 3, 1, "", "get_optimal_parameters_dict"], [61, 3, 1, "", "has_optimal_parameter"], [61, 3, 1, "", "initialize_parameter_ranges"], [61, 3, 1, "", "l"], [61, 2, 1, "", "memory_access"], [61, 3, 1, "", "memory_complexity"], [61, 3, 1, "", "optimal_parameters"], [61, 3, 1, "", "p"], [61, 3, 1, "", "parameter_names"], [61, 2, 1, "", "parameter_ranges"], [61, 3, 1, "", "reset"], [61, 3, 1, "", "set_parameter_ranges"], [61, 3, 1, "", "set_parameters"], [61, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator": [[62, 0, 0, "-", "sdfq_algorithm"], [63, 0, 0, "-", "sdfq_constants"], [64, 0, 0, "-", "sdfq_estimator"], [65, 0, 0, "-", "sdfq_helper"], [66, 0, 0, "-", "sdfq_problem"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm": [[62, 1, 1, "", "SDFqAlgorithm"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm": [[62, 2, 1, "", "complexity_type"], [62, 3, 1, "", "get_optimal_parameters_dict"], [62, 3, 1, "", "has_optimal_parameter"], [62, 2, 1, "", "memory_access"], [62, 3, 1, "", "memory_complexity"], [62, 3, 1, "", "optimal_parameters"], [62, 3, 1, "", "parameter_names"], [62, 2, 1, "", "parameter_ranges"], [62, 3, 1, "", "reset"], [62, 3, 1, "", "set_parameter_ranges"], [62, 3, 1, "", "set_parameters"], [62, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants": [[63, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation": [[63, 4, 1, "", "CONSTRAINTS"], [63, 4, 1, "", "GAUSS"], [63, 4, 1, "", "LISTS"], [63, 4, 1, "", "PERMUTATIONS"], [63, 4, 1, "", "REPRESENTATIONS"], [63, 4, 1, "", "TREE"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator": [[64, 1, 1, "", "SDFqEstimator"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator": [[64, 3, 1, "", "algorithm_names"], [64, 3, 1, "", "algorithms"], [64, 2, 1, "", "bit_complexities"], [64, 2, 1, "", "complexity_type"], [64, 3, 1, "", "estimate"], [64, 4, 1, "", "excluded_algorithms_by_default"], [64, 3, 1, "", "fastest_algorithm"], [64, 2, 1, "", "memory_access"], [64, 3, 1, "", "nalgorithms"], [64, 3, 1, "", "reset"], [64, 3, 1, "", "table"]], "cryptographic_estimators.SDFqEstimator.sdfq_helper": [[65, 5, 1, "", "binom"], [65, 5, 1, "", "min_max"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem": [[66, 1, 1, "", "SDFqProblem"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem": [[66, 3, 1, "", "expected_number_solutions"], [66, 3, 1, "", "get_parameters"], [66, 3, 1, "", "to_bitcomplexity_memory"], [66, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SEEstimator.SEAlgorithms": [[67, 0, 0, "-", "sample"]], "cryptographic_estimators.SEEstimator.SEAlgorithms.sample": [[67, 1, 1, "", "Sample"]], "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample": [[67, 2, 1, "", "complexity_type"], [67, 3, 1, "", "get_optimal_parameters_dict"], [67, 3, 1, "", "has_optimal_parameter"], [67, 2, 1, "", "memory_access"], [67, 3, 1, "", "memory_complexity"], [67, 3, 1, "", "optimal_parameters"], [67, 3, 1, "", "parameter_names"], [67, 2, 1, "", "parameter_ranges"], [67, 3, 1, "", "reset"], [67, 3, 1, "", "set_parameter_ranges"], [67, 3, 1, "", "set_parameters"], [67, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SEEstimator": [[68, 0, 0, "-", "se_algorithm"], [69, 0, 0, "-", "se_estimator"], [70, 0, 0, "-", "se_problem"]], "cryptographic_estimators.SEEstimator.se_algorithm": [[68, 1, 1, "", "SEAlgorithm"]], "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm": [[68, 2, 1, "", "complexity_type"], [68, 3, 1, "", "get_optimal_parameters_dict"], [68, 3, 1, "", "has_optimal_parameter"], [68, 2, 1, "", "memory_access"], [68, 3, 1, "", "memory_complexity"], [68, 3, 1, "", "optimal_parameters"], [68, 3, 1, "", "parameter_names"], [68, 2, 1, "", "parameter_ranges"], [68, 3, 1, "", "reset"], [68, 3, 1, "", "set_parameter_ranges"], [68, 3, 1, "", "set_parameters"], [68, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SEEstimator.se_estimator": [[69, 1, 1, "", "SEEstimator"]], "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator": [[69, 3, 1, "", "algorithm_names"], [69, 3, 1, "", "algorithms"], [69, 2, 1, "", "bit_complexities"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "estimate"], [69, 4, 1, "", "excluded_algorithms_by_default"], [69, 3, 1, "", "fastest_algorithm"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "nalgorithms"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "table"]], "cryptographic_estimators.SEEstimator.se_problem": [[70, 1, 1, "", "SEProblem"]], "cryptographic_estimators.SEEstimator.se_problem.SEProblem": [[70, 3, 1, "", "expected_number_solutions"], [70, 3, 1, "", "get_parameters"], [70, 3, 1, "", "to_bitcomplexity_memory"], [70, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators": [[71, 0, 0, "-", "base_algorithm"], [72, 0, 0, "-", "base_constants"], [73, 0, 0, "-", "base_estimator"], [74, 0, 0, "-", "base_problem"], [75, 0, 0, "-", "helper"]], "cryptographic_estimators.base_algorithm": [[71, 1, 1, "", "BaseAlgorithm"], [71, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[71, 2, 1, "", "complexity_type"], [71, 3, 1, "", "get_optimal_parameters_dict"], [71, 3, 1, "", "has_optimal_parameter"], [71, 2, 1, "", "memory_access"], [71, 3, 1, "", "memory_complexity"], [71, 3, 1, "", "optimal_parameters"], [71, 3, 1, "", "parameter_names"], [71, 2, 1, "", "parameter_ranges"], [71, 3, 1, "", "reset"], [71, 3, 1, "", "set_parameter_ranges"], [71, 3, 1, "", "set_parameters"], [71, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[73, 1, 1, "", "BaseEstimator"], [73, 5, 1, "", "channels"], [73, 5, 1, "", "codes"], [73, 5, 1, "", "cones"], [73, 5, 1, "", "crystals"], [73, 5, 1, "", "finance"], [73, 5, 1, "", "finite_dynamical_systems"], [73, 5, 1, "", "game_theory"], [73, 5, 1, "", "graph_coloring"], [73, 5, 1, "", "groups"], [73, 5, 1, "", "lattice_polytope"], [73, 5, 1, "", "lie_algebras"], [73, 5, 1, "", "lie_conformal_algebras"], [73, 5, 1, "", "manifolds"], [73, 5, 1, "", "matroids"], [73, 5, 1, "", "path_tableaux"], [73, 5, 1, "", "simplicial_complexes"], [73, 5, 1, "", "simplicial_sets"], [73, 5, 1, "", "tests"], [73, 5, 1, "", "toric_plotter"], [73, 5, 1, "", "valuations"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[73, 3, 1, "", "algorithm_names"], [73, 3, 1, "", "algorithms"], [73, 2, 1, "", "bit_complexities"], [73, 2, 1, "", "complexity_type"], [73, 3, 1, "", "estimate"], [73, 4, 1, "", "excluded_algorithms_by_default"], [73, 3, 1, "", "fastest_algorithm"], [73, 2, 1, "", "memory_access"], [73, 3, 1, "", "nalgorithms"], [73, 3, 1, "", "reset"], [73, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[74, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[74, 3, 1, "", "expected_number_solutions"], [74, 3, 1, "", "to_bitcomplexity_memory"], [74, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.helper": [[75, 1, 1, "", "ComplexityType"], [75, 5, 1, "", "concat_all_tables"], [75, 5, 1, "", "concat_pretty_tables"], [75, 5, 1, "", "memory_access_cost"], [75, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[75, 4, 1, "", "ESTIMATE"], [75, 4, 1, "", "TILDEO"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"dummy_algorithm1": 0, "dummy_algorithm": 1, "dummy_estim": 2, "dummy_problem": 3, "sampl": [4, 29, 33, 67], "le_algorithm": 5, "le_estim": 6, "le_problem": 7, "bjorklund": 8, "boolean_solve_fxl": 9, "cgmta": 10, "crossbr": 11, "dinur1": 12, "dinur2": 13, "exhaustive_search": 14, "f5": 15, "hybrid_f5": 16, "kpg": 17, "lokshtanov": 18, "mht": 19, "degree_of_regular": 20, "mq_algorithm": 21, "mq_constant": 22, "mq_estim": 23, "mq_helper": 24, "mq_problem": 25, "hilbert": 26, "nmonomi": 27, "witness_degre": 28, "pe_algorithm": 30, "pe_estim": 31, "pe_problem": 32, "pk_algorithm": 34, "pk_estim": 35, "pk_problem": 36, "ball_collis": [37, 46], "bjmm": [38, 47], "bjmm_dw": 39, "bjmm_pdw": 40, "both_mai": [41, 48], "dumer": [42, 49], "may_ozerov": [43, 50], "prang": [44, 51, 60], "stern": [45, 52, 61], "workfactor_help": 53, "sd_algorithm": 54, "sd_constant": 55, "sd_estim": 56, "sd_helper": 57, "sd_problem": 58, "leebrickel": 59, "sdfq_algorithm": 62, "sdfq_constant": 63, "sdfq_estim": 64, "sdfq_helper": 65, "sdfq_problem": 66, "se_algorithm": 68, "se_estim": 69, "se_problem": 70, "base_algorithm": 71, "base_const": 72, "base_estim": 73, "famili": 73, "code": 73, "rich": 73, "represent": 73, "gener": [73, 76], "matrix": 73, "deriv": 73, "catalog": 73, "function": 73, "method": 73, "base_problem": 74, "helper": 75, "tii": 76, "cryptanalysi": 76, "librari": 76, "dummyestim": 76, "dummyalgorithm": 76, "sdfqestim": 76, "sdfqalgorithm": 76, "leestim": 76, "lealgorithm": 76, "seestim": 76, "sealgorithm": 76, "peestim": 76, "pealgorithm": 76, "mqestim": 76, "mqalgorithm": 76, "seri": 76, "pkestim": 76, "pkalgorithm": 76, "sdestim": 76, "sdworkfactormodel": 76, "sdalgorithm": 76, "inform": 76, "indic": 76, "tabl": 76, "refer": 77}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "sample": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.sample"], [29, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.sample"], [33, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sample"], [67, "module-cryptographic_estimators.SEEstimator.SEAlgorithms.sample"]], "le_algorithm": [[5, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "le_estimator": [[6, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "le_problem": [[7, "module-cryptographic_estimators.LEEstimator.le_problem"]], "bjorklund": [[8, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "boolean_solve_fxl": [[9, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"]], "cgmta": [[10, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "crossbred": [[11, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "dinur1": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "dinur2": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "exhaustive_search": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "f5": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "hybrid_f5": [[16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "kpg": [[17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "lokshtanov": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "mht": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "degree_of_regularity": [[20, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "mq_algorithm": [[21, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "mq_constants": [[22, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mq_estimator": [[23, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "mq_helper": [[24, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "mq_problem": [[25, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "hilbert": [[26, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "nmonomial": [[27, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "witness_degree": [[28, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "pe_algorithm": [[30, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "pe_estimator": [[31, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "pe_problem": [[32, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "pk_algorithm": [[34, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "pk_estimator": [[35, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "pk_problem": [[36, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "ball_collision": [[37, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [46, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "bjmm": [[38, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [47, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "bjmm_dw": [[39, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "bjmm_pdw": [[40, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "both_may": [[41, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [48, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "dumer": [[42, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [49, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "may_ozerov": [[43, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [50, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "prange": [[44, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [51, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [60, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "stern": [[45, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [52, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [61, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "workfactor_helper": [[53, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "sd_algorithm": [[54, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "sd_constants": [[55, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sd_estimator": [[56, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "sd_helper": [[57, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "sd_problem": [[58, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "leebrickell": [[59, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "sdfq_algorithm": [[62, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "sdfq_constants": [[63, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfq_estimator": [[64, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "sdfq_helper": [[65, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "sdfq_problem": [[66, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "se_algorithm": [[68, "module-cryptographic_estimators.SEEstimator.se_algorithm"]], "se_estimator": [[69, "module-cryptographic_estimators.SEEstimator.se_estimator"]], "se_problem": [[70, "module-cryptographic_estimators.SEEstimator.se_problem"]], "base_algorithm": [[71, "module-cryptographic_estimators.base_algorithm"]], "base_constants": [[72, "module-cryptographic_estimators.base_constants"]], "base_estimator": [[73, "module-cryptographic_estimators.base_estimator"]], "Families of Codes (Rich representation)": [[73, "families-of-codes-rich-representation"]], "Families of Codes (Generator matrix representation)": [[73, "families-of-codes-generator-matrix-representation"]], "Derived Codes": [[73, "derived-codes"]], "Catalog": [[73, "catalog"]], "Functions": [[73, "functions"]], "Methods": [[73, "methods"]], "base_problem": [[74, "module-cryptographic_estimators.base_problem"]], "helper": [[75, "module-cryptographic_estimators.helper"]], "TII Cryptanalysis Library": [[76, "tii-cryptanalysis-library"]], "DummyEstimator": [[76, "dummyestimator"]], "DummyAlgorithms": [[76, "dummyalgorithms"]], "SDFqEstimator": [[76, "sdfqestimator"]], "SDFqAlgorithms": [[76, "sdfqalgorithms"]], "LEEstimator": [[76, "leestimator"]], "LEAlgorithms": [[76, "lealgorithms"]], "SEEstimator": [[76, "seestimator"]], "SEAlgorithms": [[76, "sealgorithms"]], "PEEstimator": [[76, "peestimator"]], "PEAlgorithms": [[76, "pealgorithms"]], "MQEstimator": [[76, "mqestimator"]], "MQAlgorithms": [[76, "mqalgorithms"]], "series": [[76, "series"]], "PKEstimator": [[76, "pkestimator"]], "PKAlgorithms": [[76, "pkalgorithms"]], "SDEstimator": [[76, "sdestimator"]], "SDWorkfactorModels": [[76, "sdworkfactormodels"]], "SDAlgorithms": [[76, "sdalgorithms"]], "General Information": [[76, "general-information"]], "Indices and Tables": [[76, "indices-and-tables"]], "References": [[77, "references"]]}, "indexentries": {"dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1"]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type"]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity"]], "module": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"], [1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"], [2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"], [3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"], [4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.sample"], [5, "module-cryptographic_estimators.LEEstimator.le_algorithm"], [6, "module-cryptographic_estimators.LEEstimator.le_estimator"], [7, "module-cryptographic_estimators.LEEstimator.le_problem"], [8, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"], [9, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"], [10, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"], [11, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"], [12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"], [13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"], [14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"], [15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"], [16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"], [17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"], [18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"], [19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"], [20, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"], [21, "module-cryptographic_estimators.MQEstimator.mq_algorithm"], [22, "module-cryptographic_estimators.MQEstimator.mq_constants"], [23, "module-cryptographic_estimators.MQEstimator.mq_estimator"], [24, "module-cryptographic_estimators.MQEstimator.mq_helper"], [25, "module-cryptographic_estimators.MQEstimator.mq_problem"], [26, "module-cryptographic_estimators.MQEstimator.series.hilbert"], [27, "module-cryptographic_estimators.MQEstimator.series.nmonomial"], [28, "module-cryptographic_estimators.MQEstimator.witness_degree"], [29, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.sample"], [30, "module-cryptographic_estimators.PEEstimator.pe_algorithm"], [31, "module-cryptographic_estimators.PEEstimator.pe_estimator"], [32, "module-cryptographic_estimators.PEEstimator.pe_problem"], [33, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sample"], [34, "module-cryptographic_estimators.PKEstimator.pk_algorithm"], [35, "module-cryptographic_estimators.PKEstimator.pk_estimator"], [36, "module-cryptographic_estimators.PKEstimator.pk_problem"], [37, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [38, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [39, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"], [40, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"], [41, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [42, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [43, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [44, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [45, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [46, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"], [47, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"], [48, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"], [49, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"], [50, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"], [51, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [52, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [53, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"], [54, "module-cryptographic_estimators.SDEstimator.sd_algorithm"], [55, "module-cryptographic_estimators.SDEstimator.sd_constants"], [56, "module-cryptographic_estimators.SDEstimator.sd_estimator"], [57, "module-cryptographic_estimators.SDEstimator.sd_helper"], [58, "module-cryptographic_estimators.SDEstimator.sd_problem"], [59, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"], [60, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"], [61, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"], [62, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"], [63, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"], [64, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"], [65, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"], [66, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"], [67, "module-cryptographic_estimators.SEEstimator.SEAlgorithms.sample"], [68, "module-cryptographic_estimators.SEEstimator.se_algorithm"], [69, "module-cryptographic_estimators.SEEstimator.se_estimator"], [70, "module-cryptographic_estimators.SEEstimator.se_problem"], [71, "module-cryptographic_estimators.base_algorithm"], [72, "module-cryptographic_estimators.base_constants"], [73, "module-cryptographic_estimators.base_estimator"], [74, "module-cryptographic_estimators.base_problem"], [75, "module-cryptographic_estimators.helper"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters"]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1"]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2"]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity"]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity"]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator"]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms"]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset"]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table"]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem"]], "cryptographic_estimators.dummyestimator.dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time"]], "sample (class in cryptographic_estimators.leestimator.lealgorithms.sample)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.sample.sample property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.sample": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.sample"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.sample.sample property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.memory_access"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.sample.sample property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.sample.sample method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.sample.Sample.time_complexity"]], "lealgorithm (class in cryptographic_estimators.leestimator.le_algorithm)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm"]], "complexity_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.complexity_type"]], "cryptographic_estimators.leestimator.le_algorithm": [[5, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[5, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.time_complexity"]], "leestimator (class in cryptographic_estimators.leestimator.le_estimator)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator"]], "algorithm_names() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.complexity_type"]], "cryptographic_estimators.leestimator.le_estimator": [[6, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "estimate() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.leestimator.le_estimator.leestimator attribute)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.reset"]], "table() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[6, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.table"]], "leproblem (class in cryptographic_estimators.leestimator.le_problem)": [[7, "cryptographic_estimators.LEEstimator.le_problem.LEProblem"]], "cryptographic_estimators.leestimator.le_problem": [[7, "module-cryptographic_estimators.LEEstimator.le_problem"]], "expected_number_solutions() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[7, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[7, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[7, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[7, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_time"]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[8, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity"]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl": [[9, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.time_complexity"]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.variant"]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[10, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity"]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred"]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D"], [11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[11, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant"]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity"]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter"]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity"]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity"]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity"]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity"]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity"]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity"]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity"]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity"]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity"]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[20, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[20, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[20, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system"]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[20, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[20, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system"]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm"]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type"]], "cryptographic_estimators.mqestimator.mq_algorithm": [[21, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[21, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity"]], "cryptographic_estimators.mqestimator.mq_constants": [[22, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator"]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type"]], "cryptographic_estimators.mqestimator.mq_estimator": [[23, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset"]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[23, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table"]], "cryptographic_estimators.mqestimator.mq_helper": [[24, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "ngates() (in module cryptographic_estimators.mqestimator.mq_helper)": [[24, "cryptographic_estimators.MQEstimator.mq_helper.ngates"]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[24, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree"]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[24, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree"]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[24, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients"]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem"]], "cryptographic_estimators.mqestimator.mq_problem": [[25, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions"]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters"]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field"]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system"]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system"]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system"]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field"]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[25, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time"]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries"]], "cryptographic_estimators.mqestimator.series.hilbert": [[26, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees"]], "first_nonpositive_integer() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_integer"]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials"]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables"]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision"]], "ring (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.ring"]], "series (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[26, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.series"]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[27, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries"]], "cryptographic_estimators.mqestimator.series.nmonomial": [[27, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[27, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree"]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[27, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree"]], "series_monomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[27, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_of_degree"]], "series_monomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[27, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_up_to_degree"]], "cryptographic_estimators.mqestimator.witness_degree": [[28, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[28, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[28, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system"]], "sample (class in cryptographic_estimators.peestimator.pealgorithms.sample)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.sample.sample property)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.sample": [[29, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.sample"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.sample.sample property)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.memory_access"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.sample.sample property)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.sample.sample method)": [[29, "cryptographic_estimators.PEEstimator.PEAlgorithms.sample.Sample.time_complexity"]], "pealgorithm (class in cryptographic_estimators.peestimator.pe_algorithm)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm"]], "complexity_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.complexity_type"]], "cryptographic_estimators.peestimator.pe_algorithm": [[30, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[30, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.time_complexity"]], "peestimator (class in cryptographic_estimators.peestimator.pe_estimator)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator"]], "algorithm_names() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.complexity_type"]], "cryptographic_estimators.peestimator.pe_estimator": [[31, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "estimate() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.peestimator.pe_estimator.peestimator attribute)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.reset"]], "table() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[31, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.table"]], "peproblem (class in cryptographic_estimators.peestimator.pe_problem)": [[32, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem"]], "cryptographic_estimators.peestimator.pe_problem": [[32, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "expected_number_solutions() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[32, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[32, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[32, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[32, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_time"]], "sample (class in cryptographic_estimators.pkestimator.pkalgorithms.sample)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample property)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.sample": [[33, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sample"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample property)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.memory_access"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample property)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sample.sample method)": [[33, "cryptographic_estimators.PKEstimator.PKAlgorithms.sample.Sample.time_complexity"]], "pkalgorithm (class in cryptographic_estimators.pkestimator.pk_algorithm)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm"]], "complexity_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.complexity_type"]], "cryptographic_estimators.pkestimator.pk_algorithm": [[34, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[34, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.time_complexity"]], "pkestimator (class in cryptographic_estimators.pkestimator.pk_estimator)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator"]], "algorithm_names() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.complexity_type"]], "cryptographic_estimators.pkestimator.pk_estimator": [[35, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "estimate() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.pkestimator.pk_estimator.pkestimator attribute)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.nalgorithms"]], "reset() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.reset"]], "table() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[35, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.table"]], "pkproblem (class in cryptographic_estimators.pkestimator.pk_problem)": [[36, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem"]], "cryptographic_estimators.pkestimator.pk_problem": [[36, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "expected_number_solutions() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[36, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[36, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[36, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[36, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_time"]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[37, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges"]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[37, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity"]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM"]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2"]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[38, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[38, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity"]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[39, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1"]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[39, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2"]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[40, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[40, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2"]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[41, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[41, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2"]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[42, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[42, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity"]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov"]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2"]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[43, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[43, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity"]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[44, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[44, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[45, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[45, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity"]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[46, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[46, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[46, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters"]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[47, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[47, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[47, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters"]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[48, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[48, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[48, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters"]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[49, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[49, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[49, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters"]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[50, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[50, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[50, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters"]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[51, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[51, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[51, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters"]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[52, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[52, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[52, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters"]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy"]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[53, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy"]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples"]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time"]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic"]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[53, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap"]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm"]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type"]], "cryptographic_estimators.sdestimator.sd_algorithm": [[54, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r"]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[54, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[55, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation"]], "cryptographic_estimators.sdestimator.sd_constants": [[55, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator"]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type"]], "cryptographic_estimators.sdestimator.sd_estimator": [[56, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset"]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[56, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table"]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[57, "cryptographic_estimators.SDEstimator.sd_helper.binom"]], "cryptographic_estimators.sdestimator.sd_helper": [[57, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[57, "cryptographic_estimators.SDEstimator.sd_helper.min_max"]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[58, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem"]], "cryptographic_estimators.sdestimator.sd_problem": [[58, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[58, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[58, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[58, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[58, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time"]], "leebrickell (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell": [[59, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[59, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.time_complexity"]], "prange (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange": [[60, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[60, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern": [[61, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[61, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.time_complexity"]], "sdfqalgorithm (class in cryptographic_estimators.sdfqestimator.sdfq_algorithm)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_algorithm": [[62, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[62, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdfqestimator.sdfq_constants)": [[63, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation"]], "cryptographic_estimators.sdfqestimator.sdfq_constants": [[63, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfqestimator (class in cryptographic_estimators.sdfqestimator.sdfq_estimator)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator"]], "algorithm_names() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_estimator": [[64, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "estimate() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator attribute)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.reset"]], "table() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[64, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.table"]], "binom() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[65, "cryptographic_estimators.SDFqEstimator.sdfq_helper.binom"]], "cryptographic_estimators.sdfqestimator.sdfq_helper": [[65, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "min_max() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[65, "cryptographic_estimators.SDFqEstimator.sdfq_helper.min_max"]], "sdfqproblem (class in cryptographic_estimators.sdfqestimator.sdfq_problem)": [[66, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem"]], "cryptographic_estimators.sdfqestimator.sdfq_problem": [[66, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "expected_number_solutions() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[66, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[66, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[66, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[66, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_time"]], "sample (class in cryptographic_estimators.seestimator.sealgorithms.sample)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample"]], "complexity_type (cryptographic_estimators.seestimator.sealgorithms.sample.sample property)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.complexity_type"]], "cryptographic_estimators.seestimator.sealgorithms.sample": [[67, "module-cryptographic_estimators.SEEstimator.SEAlgorithms.sample"]], "get_optimal_parameters_dict() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.has_optimal_parameter"]], "memory_access (cryptographic_estimators.seestimator.sealgorithms.sample.sample property)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.memory_access"]], "memory_complexity() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.optimal_parameters"]], "parameter_names() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.parameter_names"]], "parameter_ranges (cryptographic_estimators.seestimator.sealgorithms.sample.sample property)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.parameter_ranges"]], "reset() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.reset"]], "set_parameter_ranges() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.set_parameters"]], "time_complexity() (cryptographic_estimators.seestimator.sealgorithms.sample.sample method)": [[67, "cryptographic_estimators.SEEstimator.SEAlgorithms.sample.Sample.time_complexity"]], "sealgorithm (class in cryptographic_estimators.seestimator.se_algorithm)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm"]], "complexity_type (cryptographic_estimators.seestimator.se_algorithm.sealgorithm property)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.complexity_type"]], "cryptographic_estimators.seestimator.se_algorithm": [[68, "module-cryptographic_estimators.SEEstimator.se_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.seestimator.se_algorithm.sealgorithm property)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.seestimator.se_algorithm.sealgorithm property)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.seestimator.se_algorithm.sealgorithm method)": [[68, "cryptographic_estimators.SEEstimator.se_algorithm.SEAlgorithm.time_complexity"]], "seestimator (class in cryptographic_estimators.seestimator.se_estimator)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator"]], "algorithm_names() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.seestimator.se_estimator.seestimator property)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.seestimator.se_estimator.seestimator property)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.complexity_type"]], "cryptographic_estimators.seestimator.se_estimator": [[69, "module-cryptographic_estimators.SEEstimator.se_estimator"]], "estimate() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.seestimator.se_estimator.seestimator attribute)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.seestimator.se_estimator.seestimator property)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.reset"]], "table() (cryptographic_estimators.seestimator.se_estimator.seestimator method)": [[69, "cryptographic_estimators.SEEstimator.se_estimator.SEEstimator.table"]], "seproblem (class in cryptographic_estimators.seestimator.se_problem)": [[70, "cryptographic_estimators.SEEstimator.se_problem.SEProblem"]], "cryptographic_estimators.seestimator.se_problem": [[70, "module-cryptographic_estimators.SEEstimator.se_problem"]], "expected_number_solutions() (cryptographic_estimators.seestimator.se_problem.seproblem method)": [[70, "cryptographic_estimators.SEEstimator.se_problem.SEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.seestimator.se_problem.seproblem method)": [[70, "cryptographic_estimators.SEEstimator.se_problem.SEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.seestimator.se_problem.seproblem method)": [[70, "cryptographic_estimators.SEEstimator.se_problem.SEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.seestimator.se_problem.seproblem method)": [[70, "cryptographic_estimators.SEEstimator.se_problem.SEProblem.to_bitcomplexity_time"]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm"]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type"]], "cryptographic_estimators.base_algorithm": [[71, "module-cryptographic_estimators.base_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity"]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[71, "cryptographic_estimators.base_algorithm.optimal_parameter"]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[71, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity"]], "cryptographic_estimators.base_constants": [[72, "module-cryptographic_estimators.base_constants"]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator"]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities"]], "channels() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.channels"]], "codes() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.codes"]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type"]], "cones() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.cones"]], "cryptographic_estimators.base_estimator": [[73, "module-cryptographic_estimators.base_estimator"]], "crystals() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.crystals"]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm"]], "finance() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.finance"]], "finite_dynamical_systems() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.finite_dynamical_systems"]], "game_theory() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.game_theory"]], "graph_coloring() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.graph_coloring"]], "groups() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.groups"]], "lattice_polytope() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.lattice_polytope"]], "lie_algebras() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.lie_algebras"]], "lie_conformal_algebras() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.lie_conformal_algebras"]], "manifolds() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.manifolds"]], "matroids() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.matroids"]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms"]], "path_tableaux() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.path_tableaux"]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.reset"]], "simplicial_complexes() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.simplicial_complexes"]], "simplicial_sets() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.simplicial_sets"]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[73, "cryptographic_estimators.base_estimator.BaseEstimator.table"]], "tests() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.tests"]], "toric_plotter() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.toric_plotter"]], "valuations() (in module cryptographic_estimators.base_estimator)": [[73, "cryptographic_estimators.base_estimator.valuations"]], "baseproblem (class in cryptographic_estimators.base_problem)": [[74, "cryptographic_estimators.base_problem.BaseProblem"]], "cryptographic_estimators.base_problem": [[74, "module-cryptographic_estimators.base_problem"]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[74, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions"]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[74, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[74, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time"]], "complexitytype (class in cryptographic_estimators.helper)": [[75, "cryptographic_estimators.helper.ComplexityType"]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[75, "cryptographic_estimators.helper.ComplexityType.ESTIMATE"]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[75, "cryptographic_estimators.helper.ComplexityType.TILDEO"]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[75, "cryptographic_estimators.helper.concat_all_tables"]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[75, "cryptographic_estimators.helper.concat_pretty_tables"]], "cryptographic_estimators.helper": [[75, "module-cryptographic_estimators.helper"]], "memory_access_cost() (in module cryptographic_estimators.helper)": [[75, "cryptographic_estimators.helper.memory_access_cost"]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[75, "cryptographic_estimators.helper.round_or_truncate"]]}})