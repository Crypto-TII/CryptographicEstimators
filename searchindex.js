Search.setIndex({"alltitles": {"BIKEAlgorithms": [[145, "bikealgorithms"]], "BIKEEstimator": [[145, "bikeestimator"]], "CryptographicEstimators Library": [[145, null]], "DummyAlgorithms": [[145, "dummyalgorithms"]], "DummyEstimator": [[145, "dummyestimator"]], "General Information": [[145, "general-information"]], "Indices and Tables": [[145, "indices-and-tables"]], "LEAlgorithms": [[145, "lealgorithms"]], "LEEstimator": [[145, "leestimator"]], "MAYOAlgorithms": [[145, "mayoalgorithms"]], "MAYOEstimator": [[145, "mayoestimator"]], "MQAlgorithms": [[145, "mqalgorithms"]], "MQEstimator": [[145, "mqestimator"]], "MRAlgorithms": [[145, "mralgorithms"]], "MREstimator": [[145, "mrestimator"]], "PEAlgorithms": [[145, "pealgorithms"]], "PEEstimator": [[145, "peestimator"]], "PKAlgorithms": [[145, "pkalgorithms"]], "PKEstimator": [[145, "pkestimator"]], "RankSDAlgorithms": [[145, "ranksdalgorithms"]], "RankSDEstimator": [[145, "ranksdestimator"]], "References": [[146, null]], "RegSDAlgorithms": [[145, "regsdalgorithms"]], "RegSDEstimator": [[145, "regsdestimator"]], "SDAlgorithms": [[145, "sdalgorithms"]], "SDEstimator": [[145, "sdestimator"]], "SDFqAlgorithms": [[145, "sdfqalgorithms"]], "SDFqEstimator": [[145, "sdfqestimator"]], "SDWorkfactorModels": [[145, "sdworkfactormodels"]], "UOVAlgorithms": [[145, "uovalgorithms"]], "UOVEstimator": [[145, "uovestimator"]], "ball_collision": [[100, null], [110, null]], "base_algorithm": [[139, null]], "base_constants": [[140, null]], "base_estimator": [[141, null]], "base_problem": [[142, null]], "basis_enumeration": [[75, null]], "bbps": [[10, null]], "beullens": [[11, null], [60, null]], "big_k": [[50, null]], "bike_algorithm": [[2, null]], "bike_constants": [[3, null]], "bike_estimator": [[4, null]], "bike_problem": [[5, null]], "bjmm": [[101, null], [111, null]], "bjmm_dw": [[102, null]], "bjmm_pdw": [[103, null]], "bjmm_plus": [[104, null]], "bjorklund": [[28, null]], "booleansolve_fxl": [[29, null]], "both_may": [[105, null], [112, null]], "bruteforce": [[51, null]], "ccj": [[89, null]], "ccj_lin": [[90, null]], "cgmta": [[30, null]], "claw_finding": [[18, null]], "collision_attack": [[131, null]], "crossbred": [[31, null]], "degree_of_regularity": [[41, null]], "dinur1": [[32, null]], "dinur2": [[33, null]], "direct_attack": [[19, null], [132, null]], "dumer": [[106, null], [113, null]], "dummy_algorithm": [[7, null]], "dummy_algorithm1": [[6, null]], "dummy_estimator": [[8, null]], "dummy_problem": [[9, null]], "estimation_renderer": [[143, null]], "exhaustive_search": [[34, null]], "f5": [[35, null]], "grs": [[76, null]], "guessing_enhanced_grs": [[77, null]], "hashimoto": [[36, null]], "helper": [[144, null]], "hilbert": [[47, null]], "hybrid_f5": [[37, null]], "hybrid_linearization": [[78, null]], "improved_grs": [[79, null]], "intersection_attack": [[20, null], [133, null]], "kernel_search": [[52, null]], "kipnis_shamir": [[21, null], [134, null]], "kmp": [[68, null]], "kpg": [[38, null]], "le_algorithm": [[13, null]], "le_constants": [[14, null]], "le_estimator": [[15, null]], "le_helper": [[16, null]], "le_problem": [[17, null]], "leebrickell": [[123, null]], "leon": [[12, null], [61, null]], "lokshtanov": [[39, null]], "max_minors": [[80, null]], "may_ozerov": [[107, null], [114, null]], "mayo_algorithm": [[23, null]], "mayo_constants": [[24, null]], "mayo_estimator": [[25, null]], "mayo_helper": [[26, null]], "mayo_problem": [[27, null]], "mht": [[40, null]], "minors": [[53, null]], "mq_algorithm": [[42, null]], "mq_constants": [[43, null]], "mq_estimator": [[44, null]], "mq_helper": [[45, null]], "mq_problem": [[46, null]], "mr_algorithm": [[55, null]], "mr_constants": [[56, null]], "mr_estimator": [[57, null]], "mr_helper": [[58, null]], "mr_problem": [[59, null]], "nmonomial": [[48, null]], "ourivski_johansson_1": [[81, null]], "ourivski_johansson_2": [[82, null]], "pe_algorithm": [[63, null]], "pe_constants": [[64, null]], "pe_estimator": [[65, null]], "pe_helper": [[66, null]], "pe_problem": [[67, null]], "pk_algorithm": [[70, null]], "pk_constants": [[71, null]], "pk_estimator": [[72, null]], "pk_helper": [[73, null]], "pk_problem": [[74, null]], "prange": [[108, null], [115, null], [124, null]], "ranksd_algorithm": [[84, null]], "ranksd_constants": [[85, null]], "ranksd_estimator": [[86, null]], "ranksd_helper": [[87, null]], "ranksd_problem": [[88, null]], "reconciliation_attack": [[22, null]], "regisd_enum": [[91, null]], "regisd_perm": [[92, null]], "regisd_rep": [[93, null]], "regsd_algorithm": [[95, null]], "regsd_constants": [[96, null]], "regsd_estimator": [[97, null]], "regsd_helper": [[98, null]], "regsd_problem": [[99, null]], "sbc": [[69, null]], "sd_algorithm": [[118, null]], "sd_attack": [[94, null]], "sd_constants": [[119, null]], "sd_estimator": [[120, null]], "sd_helper": [[121, null]], "sd_key_attack": [[0, null]], "sd_msg_attack": [[1, null]], "sd_problem": [[122, null]], "sdfq_algorithm": [[126, null]], "sdfq_constants": [[127, null]], "sdfq_estimator": [[128, null]], "sdfq_helper": [[129, null]], "sdfq_problem": [[130, null]], "series": [[145, "series"]], "ssa": [[62, null]], "stern": [[109, null], [116, null], [125, null]], "support_minors": [[54, null], [83, null]], "uov_algorithm": [[135, null]], "uov_constants": [[136, null]], "uov_estimator": [[137, null]], "uov_problem": [[138, null]], "witness_degree": [[49, null]], "workfactor_helper": [[117, null]]}, "docnames": ["BIKEEstimator/BIKEAlgorithms/sd_key_attack", "BIKEEstimator/BIKEAlgorithms/sd_msg_attack", "BIKEEstimator/bike_algorithm", "BIKEEstimator/bike_constants", "BIKEEstimator/bike_estimator", "BIKEEstimator/bike_problem", "DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "LEEstimator/LEAlgorithms/bbps", "LEEstimator/LEAlgorithms/beullens", "LEEstimator/LEAlgorithms/leon", "LEEstimator/le_algorithm", "LEEstimator/le_constants", "LEEstimator/le_estimator", "LEEstimator/le_helper", "LEEstimator/le_problem", "MAYOEstimator/MAYOAlgorithms/claw_finding", "MAYOEstimator/MAYOAlgorithms/direct_attack", "MAYOEstimator/MAYOAlgorithms/intersection_attack", "MAYOEstimator/MAYOAlgorithms/kipnis_shamir", "MAYOEstimator/MAYOAlgorithms/reconciliation_attack", "MAYOEstimator/mayo_algorithm", "MAYOEstimator/mayo_constants", "MAYOEstimator/mayo_estimator", "MAYOEstimator/mayo_helper", "MAYOEstimator/mayo_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/booleansolve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hashimoto", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "MREstimator/MRAlgorithms/big_k", "MREstimator/MRAlgorithms/bruteforce", "MREstimator/MRAlgorithms/kernel_search", "MREstimator/MRAlgorithms/minors", "MREstimator/MRAlgorithms/support_minors", "MREstimator/mr_algorithm", "MREstimator/mr_constants", "MREstimator/mr_estimator", "MREstimator/mr_helper", "MREstimator/mr_problem", "PEEstimator/PEAlgorithms/beullens", "PEEstimator/PEAlgorithms/leon", "PEEstimator/PEAlgorithms/ssa", "PEEstimator/pe_algorithm", "PEEstimator/pe_constants", "PEEstimator/pe_estimator", "PEEstimator/pe_helper", "PEEstimator/pe_problem", "PKEstimator/PKAlgorithms/kmp", "PKEstimator/PKAlgorithms/sbc", "PKEstimator/pk_algorithm", "PKEstimator/pk_constants", "PKEstimator/pk_estimator", "PKEstimator/pk_helper", "PKEstimator/pk_problem", "RankSDEstimator/RankSDAlgorithms/basis_enumeration", "RankSDEstimator/RankSDAlgorithms/grs", "RankSDEstimator/RankSDAlgorithms/guessing_enhanced_grs", "RankSDEstimator/RankSDAlgorithms/hybrid_linearization", "RankSDEstimator/RankSDAlgorithms/improved_grs", "RankSDEstimator/RankSDAlgorithms/max_minors", "RankSDEstimator/RankSDAlgorithms/ourivski_johansson_1", "RankSDEstimator/RankSDAlgorithms/ourivski_johansson_2", "RankSDEstimator/RankSDAlgorithms/support_minors", "RankSDEstimator/ranksd_algorithm", "RankSDEstimator/ranksd_constants", "RankSDEstimator/ranksd_estimator", "RankSDEstimator/ranksd_helper", "RankSDEstimator/ranksd_problem", "RegSDEstimator/RegSDAlgorithms/ccj", "RegSDEstimator/RegSDAlgorithms/ccj_lin", "RegSDEstimator/RegSDAlgorithms/regisd_enum", "RegSDEstimator/RegSDAlgorithms/regisd_perm", "RegSDEstimator/RegSDAlgorithms/regisd_rep", "RegSDEstimator/RegSDAlgorithms/sd_attack", "RegSDEstimator/regsd_algorithm", "RegSDEstimator/regsd_constants", "RegSDEstimator/regsd_estimator", "RegSDEstimator/regsd_helper", "RegSDEstimator/regsd_problem", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/bjmm_plus", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "SDFqEstimator/SDFqAlgorithms/leebrickell", "SDFqEstimator/SDFqAlgorithms/prange", "SDFqEstimator/SDFqAlgorithms/stern", "SDFqEstimator/sdfq_algorithm", "SDFqEstimator/sdfq_constants", "SDFqEstimator/sdfq_estimator", "SDFqEstimator/sdfq_helper", "SDFqEstimator/sdfq_problem", "UOVEstimator/UOVAlgorithms/collision_attack", "UOVEstimator/UOVAlgorithms/direct_attack", "UOVEstimator/UOVAlgorithms/intersection_attack", "UOVEstimator/UOVAlgorithms/kipnis_shamir", "UOVEstimator/uov_algorithm", "UOVEstimator/uov_constants", "UOVEstimator/uov_estimator", "UOVEstimator/uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "index", "references"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["BIKEEstimator/BIKEAlgorithms/sd_key_attack.rst", "BIKEEstimator/BIKEAlgorithms/sd_msg_attack.rst", "BIKEEstimator/bike_algorithm.rst", "BIKEEstimator/bike_constants.rst", "BIKEEstimator/bike_estimator.rst", "BIKEEstimator/bike_problem.rst", "DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "LEEstimator/LEAlgorithms/bbps.rst", "LEEstimator/LEAlgorithms/beullens.rst", "LEEstimator/LEAlgorithms/leon.rst", "LEEstimator/le_algorithm.rst", "LEEstimator/le_constants.rst", "LEEstimator/le_estimator.rst", "LEEstimator/le_helper.rst", "LEEstimator/le_problem.rst", "MAYOEstimator/MAYOAlgorithms/claw_finding.rst", "MAYOEstimator/MAYOAlgorithms/direct_attack.rst", "MAYOEstimator/MAYOAlgorithms/intersection_attack.rst", "MAYOEstimator/MAYOAlgorithms/kipnis_shamir.rst", "MAYOEstimator/MAYOAlgorithms/reconciliation_attack.rst", "MAYOEstimator/mayo_algorithm.rst", "MAYOEstimator/mayo_constants.rst", "MAYOEstimator/mayo_estimator.rst", "MAYOEstimator/mayo_helper.rst", "MAYOEstimator/mayo_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/booleansolve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hashimoto.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "MREstimator/MRAlgorithms/big_k.rst", "MREstimator/MRAlgorithms/bruteforce.rst", "MREstimator/MRAlgorithms/kernel_search.rst", "MREstimator/MRAlgorithms/minors.rst", "MREstimator/MRAlgorithms/support_minors.rst", "MREstimator/mr_algorithm.rst", "MREstimator/mr_constants.rst", "MREstimator/mr_estimator.rst", "MREstimator/mr_helper.rst", "MREstimator/mr_problem.rst", "PEEstimator/PEAlgorithms/beullens.rst", "PEEstimator/PEAlgorithms/leon.rst", "PEEstimator/PEAlgorithms/ssa.rst", "PEEstimator/pe_algorithm.rst", "PEEstimator/pe_constants.rst", "PEEstimator/pe_estimator.rst", "PEEstimator/pe_helper.rst", "PEEstimator/pe_problem.rst", "PKEstimator/PKAlgorithms/kmp.rst", "PKEstimator/PKAlgorithms/sbc.rst", "PKEstimator/pk_algorithm.rst", "PKEstimator/pk_constants.rst", "PKEstimator/pk_estimator.rst", "PKEstimator/pk_helper.rst", "PKEstimator/pk_problem.rst", "RankSDEstimator/RankSDAlgorithms/basis_enumeration.rst", "RankSDEstimator/RankSDAlgorithms/grs.rst", "RankSDEstimator/RankSDAlgorithms/guessing_enhanced_grs.rst", "RankSDEstimator/RankSDAlgorithms/hybrid_linearization.rst", "RankSDEstimator/RankSDAlgorithms/improved_grs.rst", "RankSDEstimator/RankSDAlgorithms/max_minors.rst", "RankSDEstimator/RankSDAlgorithms/ourivski_johansson_1.rst", "RankSDEstimator/RankSDAlgorithms/ourivski_johansson_2.rst", "RankSDEstimator/RankSDAlgorithms/support_minors.rst", "RankSDEstimator/ranksd_algorithm.rst", "RankSDEstimator/ranksd_constants.rst", "RankSDEstimator/ranksd_estimator.rst", "RankSDEstimator/ranksd_helper.rst", "RankSDEstimator/ranksd_problem.rst", "RegSDEstimator/RegSDAlgorithms/ccj.rst", "RegSDEstimator/RegSDAlgorithms/ccj_lin.rst", "RegSDEstimator/RegSDAlgorithms/regisd_enum.rst", "RegSDEstimator/RegSDAlgorithms/regisd_perm.rst", "RegSDEstimator/RegSDAlgorithms/regisd_rep.rst", "RegSDEstimator/RegSDAlgorithms/sd_attack.rst", "RegSDEstimator/regsd_algorithm.rst", "RegSDEstimator/regsd_constants.rst", "RegSDEstimator/regsd_estimator.rst", "RegSDEstimator/regsd_helper.rst", "RegSDEstimator/regsd_problem.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/bjmm_plus.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "SDFqEstimator/SDFqAlgorithms/leebrickell.rst", "SDFqEstimator/SDFqAlgorithms/prange.rst", "SDFqEstimator/SDFqAlgorithms/stern.rst", "SDFqEstimator/sdfq_algorithm.rst", "SDFqEstimator/sdfq_constants.rst", "SDFqEstimator/sdfq_estimator.rst", "SDFqEstimator/sdfq_helper.rst", "SDFqEstimator/sdfq_problem.rst", "UOVEstimator/UOVAlgorithms/collision_attack.rst", "UOVEstimator/UOVAlgorithms/direct_attack.rst", "UOVEstimator/UOVAlgorithms/intersection_attack.rst", "UOVEstimator/UOVAlgorithms/kipnis_shamir.rst", "UOVEstimator/uov_algorithm.rst", "UOVEstimator/uov_constants.rst", "UOVEstimator/uov_estimator.rst", "UOVEstimator/uov_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "estimation_renderer.rst", "helper.rst", "index.rst", "references.rst"], "indexentries": {"a() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.a", false]], "a() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.a", false]], "a() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.a", false]], "a() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.a", false]], "a() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.a", false]], "a() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.a", false]], "a() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.a", false]], "a() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.a", false]], "a() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.a", false]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithm_names", false]], "algorithm_names() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithm_names", false]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithms", false]], "algorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithms", false]], "algorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithms", false]], "as_table() (cryptographic_estimators.estimation_renderer.estimationrenderer method)": [[143, "cryptographic_estimators.estimation_renderer.EstimationRenderer.as_table", false]], "attack_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.attack_type", false]], "attack_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.attack_type", false]], "attack_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.attack_type", false]], "attack_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.attack_type", false]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.attack_type", false]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.attack_type", false]], "attack_type (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.attack_type", false]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.attack_type", false]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.attack_type", false]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.attack_type", false]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.attack_type", false]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.attack_type", false]], "attack_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.attack_type", false]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.attack_type", false]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.attack_type", false]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.attack_type", false]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.attack_type", false]], "attack_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.attack_type", false]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.attack_type", false]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.attack_type", false]], "attack_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.attack_type", false]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm property)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration property)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs property)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs property)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization property)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs property)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors property)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 property)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 property)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.attack_type", false]], "attack_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors property)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.attack_type", false]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.attack_type", false]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.attack_type", false]], "attack_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.attack_type", false]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.attack_type", false]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.attack_type", false]], "attack_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.attack_type", false]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.attack_type", false]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.attack_type", false]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.attack_type", false]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.attack_type", false]], "b() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.b", false]], "b() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.b", false]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision", false]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[110, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel", false]], "base_field_order() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.base_field_order", false]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm", false]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator", false]], "baseproblem (class in cryptographic_estimators.base_problem)": [[142, "cryptographic_estimators.base_problem.BaseProblem", false]], "basisenumeration (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration", false]], "bbps (class in cryptographic_estimators.leestimator.lealgorithms.bbps)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS", false]], "beullens (class in cryptographic_estimators.leestimator.lealgorithms.beullens)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens", false]], "beullens (class in cryptographic_estimators.peestimator.pealgorithms.beullens)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens", false]], "beullens_lee_brickell_adaptation() (in module cryptographic_estimators.pkestimator.pk_helper)": [[73, "cryptographic_estimators.PKEstimator.pk_helper.beullens_lee_brickell_adaptation", false]], "bigk (class in cryptographic_estimators.mrestimator.mralgorithms.big_k)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK", false]], "bikealgorithm (class in cryptographic_estimators.bikeestimator.bike_algorithm)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm", false]], "bikeestimator (class in cryptographic_estimators.bikeestimator.bike_estimator)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator", false]], "bikeproblem (class in cryptographic_estimators.bikeestimator.bike_problem)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem", false]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy", false]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[121, "cryptographic_estimators.SDEstimator.sd_helper.binom", false]], "binom() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[129, "cryptographic_estimators.SDFqEstimator.sdfq_helper.binom", false]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation", false]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator property)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.bit_complexities", false]], "bit_complexities (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.bit_complexities", false]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM", false]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2", false]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3", false]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw", false]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw", false]], "bjmmplus (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus", false]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[111, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel", false]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund", false]], "block_wiedemann (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[58, "cryptographic_estimators.MREstimator.mr_helper.Variant.block_wiedemann", false]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL", false]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay", false]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[112, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel", false]], "bruteforce (class in cryptographic_estimators.mrestimator.mralgorithms.bruteforce)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce", false]], "ccj (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ", false]], "ccjlin (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin", false]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA", false]], "clawfinding (class in cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding", false]], "code_dimension() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.code_dimension", false]], "code_length() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.code_length", false]], "coefficient_of_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.coefficient_of_degree", false]], "coefficient_up_to_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.coefficient_up_to_degree", false]], "collisionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.collision_attack)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack", false]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type", false]], "complexity_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.complexity_type", false]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.complexity_type", false]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.complexity_type", false]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type", false]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.complexity_type", false]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.complexity_type", false]], "complexity_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.complexity_type", false]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.complexity_type", false]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.complexity_type", false]], "complexity_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.complexity_type", false]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm property)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator property)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration property)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs property)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs property)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization property)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs property)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors property)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 property)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 property)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.complexity_type", false]], "complexity_type (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors property)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.complexity_type", false]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type", false]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type", false]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.complexity_type", false]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.complexity_type", false]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.complexity_type", false]], "complexity_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.complexity_type", false]], "complexity_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.complexity_type", false]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.complexity_type", false]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.complexity_type", false]], "complexitytype (class in cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.ComplexityType", false]], "compute_mb() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.compute_mb", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.compute_memory_complexity_helper", false]], "compute_memory_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.compute_memory_complexity_helper", false]], "compute_nb() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.compute_nb", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.compute_time_complexity_helper", false]], "compute_time_complexity_helper() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.compute_time_complexity_helper", false]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.concat_all_tables", false]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.concat_pretty_tables", false]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS", false]], "constraints (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.CONSTRAINTS", false]], "cost_for_finding_subcode() (in module cryptographic_estimators.pkestimator.pk_helper)": [[73, "cryptographic_estimators.PKEstimator.pk_helper.cost_for_finding_subcode", false]], "cost_one_hash (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem property)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.cost_one_hash", false]], "cost_one_hash (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.cost_one_hash", false]], "cost_reduction() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.cost_reduction", false]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.cost_reduction", false]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.cost_reduction", false]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.cost_reduction", false]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.cost_reduction", false]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.cost_reduction", false]], "cost_to_find_random_2dim_subcodes_with_support_w() (in module cryptographic_estimators.leestimator.le_helper)": [[16, "cryptographic_estimators.LEEstimator.le_helper.cost_to_find_random_2dim_subcodes_with_support_w", false]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred", false]], "cryptographic_estimators.base_algorithm": [[139, "module-cryptographic_estimators.base_algorithm", false]], "cryptographic_estimators.base_constants": [[140, "module-cryptographic_estimators.base_constants", false]], "cryptographic_estimators.base_estimator": [[141, "module-cryptographic_estimators.base_estimator", false]], "cryptographic_estimators.base_problem": [[142, "module-cryptographic_estimators.base_problem", false]], "cryptographic_estimators.bikeestimator.bike_algorithm": [[2, "module-cryptographic_estimators.BIKEEstimator.bike_algorithm", false]], "cryptographic_estimators.bikeestimator.bike_constants": [[3, "module-cryptographic_estimators.BIKEEstimator.bike_constants", false]], "cryptographic_estimators.bikeestimator.bike_estimator": [[4, "module-cryptographic_estimators.BIKEEstimator.bike_estimator", false]], "cryptographic_estimators.bikeestimator.bike_problem": [[5, "module-cryptographic_estimators.BIKEEstimator.bike_problem", false]], "cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack": [[0, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack", false]], "cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack": [[1, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack", false]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[7, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm", false]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[8, "module-cryptographic_estimators.DummyEstimator.dummy_estimator", false]], "cryptographic_estimators.dummyestimator.dummy_problem": [[9, "module-cryptographic_estimators.DummyEstimator.dummy_problem", false]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[6, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1", false]], "cryptographic_estimators.estimation_renderer": [[143, "module-cryptographic_estimators.estimation_renderer", false]], "cryptographic_estimators.helper": [[144, "module-cryptographic_estimators.helper", false]], "cryptographic_estimators.leestimator.le_algorithm": [[13, "module-cryptographic_estimators.LEEstimator.le_algorithm", false]], "cryptographic_estimators.leestimator.le_constants": [[14, "module-cryptographic_estimators.LEEstimator.le_constants", false]], "cryptographic_estimators.leestimator.le_estimator": [[15, "module-cryptographic_estimators.LEEstimator.le_estimator", false]], "cryptographic_estimators.leestimator.le_helper": [[16, "module-cryptographic_estimators.LEEstimator.le_helper", false]], "cryptographic_estimators.leestimator.le_problem": [[17, "module-cryptographic_estimators.LEEstimator.le_problem", false]], "cryptographic_estimators.leestimator.lealgorithms.bbps": [[10, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps", false]], "cryptographic_estimators.leestimator.lealgorithms.beullens": [[11, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens", false]], "cryptographic_estimators.leestimator.lealgorithms.leon": [[12, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon", false]], "cryptographic_estimators.mayoestimator.mayo_algorithm": [[23, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm", false]], "cryptographic_estimators.mayoestimator.mayo_constants": [[24, "module-cryptographic_estimators.MAYOEstimator.mayo_constants", false]], "cryptographic_estimators.mayoestimator.mayo_estimator": [[25, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator", false]], "cryptographic_estimators.mayoestimator.mayo_helper": [[26, "module-cryptographic_estimators.MAYOEstimator.mayo_helper", false]], "cryptographic_estimators.mayoestimator.mayo_problem": [[27, "module-cryptographic_estimators.MAYOEstimator.mayo_problem", false]], "cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding": [[18, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding", false]], "cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack": [[19, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack", false]], "cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack": [[20, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack", false]], "cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir": [[21, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir", false]], "cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack": [[22, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack", false]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[41, "module-cryptographic_estimators.MQEstimator.degree_of_regularity", false]], "cryptographic_estimators.mqestimator.mq_algorithm": [[42, "module-cryptographic_estimators.MQEstimator.mq_algorithm", false]], "cryptographic_estimators.mqestimator.mq_constants": [[43, "module-cryptographic_estimators.MQEstimator.mq_constants", false]], "cryptographic_estimators.mqestimator.mq_estimator": [[44, "module-cryptographic_estimators.MQEstimator.mq_estimator", false]], "cryptographic_estimators.mqestimator.mq_helper": [[45, "module-cryptographic_estimators.MQEstimator.mq_helper", false]], "cryptographic_estimators.mqestimator.mq_problem": [[46, "module-cryptographic_estimators.MQEstimator.mq_problem", false]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund", false]], "cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl": [[29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl", false]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[30, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta", false]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[31, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred", false]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[32, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1", false]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[33, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2", false]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[34, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search", false]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[35, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5", false]], "cryptographic_estimators.mqestimator.mqalgorithms.hashimoto": [[36, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto", false]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[37, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5", false]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[38, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg", false]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[39, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov", false]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[40, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht", false]], "cryptographic_estimators.mqestimator.series.hilbert": [[47, "module-cryptographic_estimators.MQEstimator.series.hilbert", false]], "cryptographic_estimators.mqestimator.series.nmonomial": [[48, "module-cryptographic_estimators.MQEstimator.series.nmonomial", false]], "cryptographic_estimators.mqestimator.witness_degree": [[49, "module-cryptographic_estimators.MQEstimator.witness_degree", false]], "cryptographic_estimators.mrestimator.mr_algorithm": [[55, "module-cryptographic_estimators.MREstimator.mr_algorithm", false]], "cryptographic_estimators.mrestimator.mr_constants": [[56, "module-cryptographic_estimators.MREstimator.mr_constants", false]], "cryptographic_estimators.mrestimator.mr_estimator": [[57, "module-cryptographic_estimators.MREstimator.mr_estimator", false]], "cryptographic_estimators.mrestimator.mr_helper": [[58, "module-cryptographic_estimators.MREstimator.mr_helper", false]], "cryptographic_estimators.mrestimator.mr_problem": [[59, "module-cryptographic_estimators.MREstimator.mr_problem", false]], "cryptographic_estimators.mrestimator.mralgorithms.big_k": [[50, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k", false]], "cryptographic_estimators.mrestimator.mralgorithms.bruteforce": [[51, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce", false]], "cryptographic_estimators.mrestimator.mralgorithms.kernel_search": [[52, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search", false]], "cryptographic_estimators.mrestimator.mralgorithms.minors": [[53, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors", false]], "cryptographic_estimators.mrestimator.mralgorithms.support_minors": [[54, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors", false]], "cryptographic_estimators.peestimator.pe_algorithm": [[63, "module-cryptographic_estimators.PEEstimator.pe_algorithm", false]], "cryptographic_estimators.peestimator.pe_constants": [[64, "module-cryptographic_estimators.PEEstimator.pe_constants", false]], "cryptographic_estimators.peestimator.pe_estimator": [[65, "module-cryptographic_estimators.PEEstimator.pe_estimator", false]], "cryptographic_estimators.peestimator.pe_helper": [[66, "module-cryptographic_estimators.PEEstimator.pe_helper", false]], "cryptographic_estimators.peestimator.pe_problem": [[67, "module-cryptographic_estimators.PEEstimator.pe_problem", false]], "cryptographic_estimators.peestimator.pealgorithms.beullens": [[60, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens", false]], "cryptographic_estimators.peestimator.pealgorithms.leon": [[61, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon", false]], "cryptographic_estimators.peestimator.pealgorithms.ssa": [[62, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa", false]], "cryptographic_estimators.pkestimator.pk_algorithm": [[70, "module-cryptographic_estimators.PKEstimator.pk_algorithm", false]], "cryptographic_estimators.pkestimator.pk_constants": [[71, "module-cryptographic_estimators.PKEstimator.pk_constants", false]], "cryptographic_estimators.pkestimator.pk_estimator": [[72, "module-cryptographic_estimators.PKEstimator.pk_estimator", false]], "cryptographic_estimators.pkestimator.pk_helper": [[73, "module-cryptographic_estimators.PKEstimator.pk_helper", false]], "cryptographic_estimators.pkestimator.pk_problem": [[74, "module-cryptographic_estimators.PKEstimator.pk_problem", false]], "cryptographic_estimators.pkestimator.pkalgorithms.kmp": [[68, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp", false]], "cryptographic_estimators.pkestimator.pkalgorithms.sbc": [[69, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc", false]], "cryptographic_estimators.ranksdestimator.ranksd_algorithm": [[84, "module-cryptographic_estimators.RankSDEstimator.ranksd_algorithm", false]], "cryptographic_estimators.ranksdestimator.ranksd_constants": [[85, "module-cryptographic_estimators.RankSDEstimator.ranksd_constants", false]], "cryptographic_estimators.ranksdestimator.ranksd_estimator": [[86, "module-cryptographic_estimators.RankSDEstimator.ranksd_estimator", false]], "cryptographic_estimators.ranksdestimator.ranksd_helper": [[87, "module-cryptographic_estimators.RankSDEstimator.ranksd_helper", false]], "cryptographic_estimators.ranksdestimator.ranksd_problem": [[88, "module-cryptographic_estimators.RankSDEstimator.ranksd_problem", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration": [[75, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs": [[76, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs": [[77, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization": [[78, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs": [[79, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors": [[80, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1": [[81, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2": [[82, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2", false]], "cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors": [[83, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors", false]], "cryptographic_estimators.regsdestimator.regsd_algorithm": [[95, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm", false]], "cryptographic_estimators.regsdestimator.regsd_constants": [[96, "module-cryptographic_estimators.RegSDEstimator.regsd_constants", false]], "cryptographic_estimators.regsdestimator.regsd_estimator": [[97, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator", false]], "cryptographic_estimators.regsdestimator.regsd_helper": [[98, "module-cryptographic_estimators.RegSDEstimator.regsd_helper", false]], "cryptographic_estimators.regsdestimator.regsd_problem": [[99, "module-cryptographic_estimators.RegSDEstimator.regsd_problem", false]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj": [[89, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj", false]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin": [[90, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin", false]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum": [[91, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum", false]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm": [[92, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm", false]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep": [[93, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep", false]], "cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack": [[94, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack", false]], "cryptographic_estimators.sdestimator.sd_algorithm": [[118, "module-cryptographic_estimators.SDEstimator.sd_algorithm", false]], "cryptographic_estimators.sdestimator.sd_constants": [[119, "module-cryptographic_estimators.SDEstimator.sd_constants", false]], "cryptographic_estimators.sdestimator.sd_estimator": [[120, "module-cryptographic_estimators.SDEstimator.sd_estimator", false]], "cryptographic_estimators.sdestimator.sd_helper": [[121, "module-cryptographic_estimators.SDEstimator.sd_helper", false]], "cryptographic_estimators.sdestimator.sd_problem": [[122, "module-cryptographic_estimators.SDEstimator.sd_problem", false]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[100, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision", false]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[101, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm", false]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[102, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw", false]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[103, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw", false]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus": [[104, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus", false]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[105, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may", false]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[106, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer", false]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[107, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov", false]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[108, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange", false]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[109, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[110, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[111, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[112, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[113, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[114, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[115, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[116, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern", false]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[117, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper", false]], "cryptographic_estimators.sdfqestimator.sdfq_algorithm": [[126, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm", false]], "cryptographic_estimators.sdfqestimator.sdfq_constants": [[127, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants", false]], "cryptographic_estimators.sdfqestimator.sdfq_estimator": [[128, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator", false]], "cryptographic_estimators.sdfqestimator.sdfq_helper": [[129, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper", false]], "cryptographic_estimators.sdfqestimator.sdfq_problem": [[130, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem", false]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell": [[123, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell", false]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange": [[124, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange", false]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern": [[125, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern", false]], "cryptographic_estimators.uovestimator.uov_algorithm": [[135, "module-cryptographic_estimators.UOVEstimator.uov_algorithm", false]], "cryptographic_estimators.uovestimator.uov_constants": [[136, "module-cryptographic_estimators.UOVEstimator.uov_constants", false]], "cryptographic_estimators.uovestimator.uov_estimator": [[137, "module-cryptographic_estimators.UOVEstimator.uov_estimator", false]], "cryptographic_estimators.uovestimator.uov_problem": [[138, "module-cryptographic_estimators.UOVEstimator.uov_problem", false]], "cryptographic_estimators.uovestimator.uovalgorithms.collision_attack": [[131, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack", false]], "cryptographic_estimators.uovestimator.uovalgorithms.direct_attack": [[132, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack", false]], "cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack": [[133, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack", false]], "cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir": [[134, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir", false]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D", false], [31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d", false]], "d() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.d", false]], "degree_extension() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.degree_extension", false]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials", false]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials", false]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees", false]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta", false]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth", false]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth", false]], "determinant_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.determinant_of_A", false]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst", false]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond", false]], "directattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack", false]], "directattack (class in cryptographic_estimators.uovestimator.uovalgorithms.direct_attack)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack", false]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer", false]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[113, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel", false]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm", false]], "dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1", false]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator", false]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem", false]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.ell", false]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.ell", false]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.ell", false]], "entry_i_j_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.entry_i_j_of_A", false]], "eps_x() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_x", false]], "eps_y() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_y", false]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[144, "cryptographic_estimators.helper.ComplexityType.ESTIMATE", false]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.estimate", false]], "estimate() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.estimate", false]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate", false]], "estimate() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimate", false]], "estimate() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.estimate", false]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate", false]], "estimate() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimate", false]], "estimate() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimate", false]], "estimate() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimate", false]], "estimate() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.estimate", false]], "estimate() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimate", false]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate", false]], "estimate() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimate", false]], "estimate() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimate", false]], "estimationrenderer (class in cryptographic_estimators.estimation_renderer)": [[143, "cryptographic_estimators.estimation_renderer.EstimationRenderer", false]], "estimator_type (cryptographic_estimators.base_estimator.baseestimator property)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator property)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimator_type", false]], "estimator_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimator_type", false]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator attribute)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.leestimator.le_estimator.leestimator attribute)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator attribute)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.mrestimator.mr_estimator.mrestimator attribute)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.peestimator.pe_estimator.peestimator attribute)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.pkestimator.pk_estimator.pkestimator attribute)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator attribute)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator attribute)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator attribute)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.excluded_algorithms_by_default", false]], "excluded_algorithms_by_default (cryptographic_estimators.uovestimator.uov_estimator.uovestimator attribute)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.excluded_algorithms_by_default", false]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch", false]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[142, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[67, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[74, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[99, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[122, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[130, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.expected_number_solutions", false]], "expected_number_solutions() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.expected_number_solutions", false]], "extended_binomial() (in module cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.extended_binomial", false]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5", false]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.fastest_algorithm", false]], "fastest_algorithm() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.fastest_algorithm", false]], "find_b_sm_fqm() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.find_b_sm_fqm", false]], "find_best_choice_param_mm() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.find_best_choice_param_mm", false]], "find_p_sm_fqm() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.find_p_sm_fqm", false]], "find_valid_choices_param_sm_fqm() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.find_valid_choices_param_sm_fqm", false]], "first_nonpositive_coefficient() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_coefficient", false]], "first_nonpositive_coefficient_up_to_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_coefficient_up_to_degree", false]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS", false]], "gauss (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.GAUSS", false]], "gauss_binomial() (in module cryptographic_estimators.pkestimator.pk_helper)": [[73, "cryptographic_estimators.PKEstimator.pk_helper.gauss_binomial", false]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[41, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system", false]], "get_fastest_mq_algorithm() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_fastest_mq_algorithm", false]], "get_fastest_sd_algorithm() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.get_fastest_sd_algorithm", false]], "get_fastest_sd_algorithm() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.get_fastest_sd_algorithm", false]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.get_optimal_parameters_dict", false]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.get_optimal_parameters_dict", false]], "get_parameters() (cryptographic_estimators.base_problem.baseproblem method)": [[142, "cryptographic_estimators.base_problem.BaseProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[67, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[74, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[99, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[122, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[130, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.get_parameters", false]], "get_parameters() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.get_parameters", false]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters", false]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_problem_parameters_reduced", false]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_problem_parameters_reduced", false]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_problem_parameters_reduced", false]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_problem_parameters_reduced", false]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_problem_parameters_reduced", false]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_problem_parameters_reduced", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.get_reduced_instance_parameters", false]], "get_reduced_instance_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.get_reduced_instance_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters", false]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[110, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[111, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[112, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[113, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[114, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[115, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters", false]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[116, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters", false]], "gf_order_to_characteristic() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.gf_order_to_characteristic", false]], "gf_order_to_degree() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.gf_order_to_degree", false]], "grs (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS", false]], "guessingenhancedgrs (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS", false]], "gv_distance() (in module cryptographic_estimators.peestimator.pe_helper)": [[66, "cryptographic_estimators.PEEstimator.pe_helper.gv_distance", false]], "hamming_ball() (in module cryptographic_estimators.peestimator.pe_helper)": [[66, "cryptographic_estimators.PEEstimator.pe_helper.hamming_ball", false]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.has_optimal_parameter", false]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.has_optimal_parameter", false]], "hashes_to_basic_operations() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.hashes_to_basic_operations", false]], "hashes_to_basic_operations() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.hashes_to_basic_operations", false]], "hashimoto (class in cryptographic_estimators.mqestimator.mqalgorithms.hashimoto)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto", false]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries", false]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5", false]], "hybridization_factor() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.hybridization_factor", false]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.hybridization_factor", false]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.hybridization_factor", false]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.hybridization_factor", false]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.hybridization_factor", false]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.hybridization_factor", false]], "hybridlinearization (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization", false]], "improvedgrs (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges", false]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges", false]], "intersectionattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack", false]], "intersectionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack", false]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy", false]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field", false]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system", false]], "is_power_of_two() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.is_power_of_two", false]], "is_prime_power() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.is_prime_power", false]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system", false]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system", false]], "isd (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.ISD", false]], "k() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.k", false]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.k", false]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k", false]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.k", false]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k", false]], "k() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.k", false]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa", false]], "kernelsearch (class in cryptographic_estimators.mrestimator.mralgorithms.kernel_search)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch", false]], "kipnisshamir (class in cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir", false]], "kipnisshamir (class in cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir", false]], "kmp (class in cryptographic_estimators.pkestimator.pkalgorithms.kmp)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP", false]], "kmp_final_list (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[71, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_FINAL_LIST", false]], "kmp_l1 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[71, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L1", false]], "kmp_l2 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[71, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L2", false]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l", false]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l", false]], "l() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.l", false]], "l1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l1", false]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_", false]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_", false]], "lealgorithm (class in cryptographic_estimators.leestimator.le_algorithm)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm", false]], "leebrickell (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell", false]], "leestimator (class in cryptographic_estimators.leestimator.le_estimator)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator", false]], "length_solution_vector() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.length_solution_vector", false]], "leon (class in cryptographic_estimators.leestimator.lealgorithms.leon)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon", false]], "leon (class in cryptographic_estimators.peestimator.pealgorithms.leon)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon", false]], "leproblem (class in cryptographic_estimators.leestimator.le_problem)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem", false]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.linear_algebra_constant", false]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.linear_algebra_constant", false]], "list_computation (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[64, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LIST_COMPUTATION", false]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples", false]], "lists (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS", false]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS", false]], "lists (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.LISTS", false]], "lists_size (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS_SIZE", false]], "lists_size (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[64, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LISTS_SIZE", false]], "lof() (in module cryptographic_estimators.pkestimator.pk_helper)": [[73, "cryptographic_estimators.PKEstimator.pk_helper.lof", false]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov", false]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.lv", false]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.lv", false]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.lv", false]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.lv", false]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.lv", false]], "matrix_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.matrix_A", false]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D", false]], "maxminors (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors", false]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time", false]], "mayoalgorithm (class in cryptographic_estimators.mayoestimator.mayo_algorithm)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm", false]], "mayoestimator (class in cryptographic_estimators.mayoestimator.mayo_estimator)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator", false]], "mayoproblem (class in cryptographic_estimators.mayoestimator.mayo_problem)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem", false]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov", false]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2", false]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3", false]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[114, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel", false]], "median_size_of_random_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[66, "cryptographic_estimators.PEEstimator.pe_helper.median_size_of_random_orbit", false]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access", false]], "memory_access (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.memory_access", false]], "memory_access (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.memory_access", false]], "memory_access (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.memory_access", false]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access", false]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access", false]], "memory_access (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.memory_access", false]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access", false]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access", false]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.memory_access", false]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access", false]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access", false]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access", false]], "memory_access (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.memory_access", false]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access", false]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access", false]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access", false]], "memory_access (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.memory_access", false]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access", false]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm property)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator property)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration property)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs property)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs property)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization property)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs property)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors property)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 property)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 property)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.memory_access", false]], "memory_access (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors property)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access", false]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access", false]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access", false]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.memory_access", false]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access", false]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access", false]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access", false]], "memory_access (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access", false]], "memory_access (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.memory_access", false]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access", false]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access", false]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access", false]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access", false]], "memory_access_cost() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access_cost", false]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access_cost", false]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_complexity", false]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_complexity", false]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT", false]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[121, "cryptographic_estimators.SDEstimator.sd_helper.min_max", false]], "min_max() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[129, "cryptographic_estimators.SDFqEstimator.sdfq_helper.min_max", false]], "minors (class in cryptographic_estimators.mrestimator.mralgorithms.minors)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors", false]], "minors_polynomial_degree() (in module cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.minors_polynomial_degree", false]], "minors_series() (in module cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.minors_series", false]], "module": [[0, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack", false], [1, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack", false], [2, "module-cryptographic_estimators.BIKEEstimator.bike_algorithm", false], [3, "module-cryptographic_estimators.BIKEEstimator.bike_constants", false], [4, "module-cryptographic_estimators.BIKEEstimator.bike_estimator", false], [5, "module-cryptographic_estimators.BIKEEstimator.bike_problem", false], [6, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1", false], [7, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm", false], [8, "module-cryptographic_estimators.DummyEstimator.dummy_estimator", false], [9, "module-cryptographic_estimators.DummyEstimator.dummy_problem", false], [10, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps", false], [11, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens", false], [12, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon", false], [13, "module-cryptographic_estimators.LEEstimator.le_algorithm", false], [14, "module-cryptographic_estimators.LEEstimator.le_constants", false], [15, "module-cryptographic_estimators.LEEstimator.le_estimator", false], [16, "module-cryptographic_estimators.LEEstimator.le_helper", false], [17, "module-cryptographic_estimators.LEEstimator.le_problem", false], [18, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding", false], [19, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack", false], [20, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack", false], [21, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir", false], [22, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack", false], [23, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm", false], [24, "module-cryptographic_estimators.MAYOEstimator.mayo_constants", false], [25, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator", false], [26, "module-cryptographic_estimators.MAYOEstimator.mayo_helper", false], [27, "module-cryptographic_estimators.MAYOEstimator.mayo_problem", false], [28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund", false], [29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl", false], [30, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta", false], [31, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred", false], [32, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1", false], [33, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2", false], [34, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search", false], [35, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5", false], [36, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto", false], [37, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5", false], [38, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg", false], [39, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov", false], [40, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht", false], [41, "module-cryptographic_estimators.MQEstimator.degree_of_regularity", false], [42, "module-cryptographic_estimators.MQEstimator.mq_algorithm", false], [43, "module-cryptographic_estimators.MQEstimator.mq_constants", false], [44, "module-cryptographic_estimators.MQEstimator.mq_estimator", false], [45, "module-cryptographic_estimators.MQEstimator.mq_helper", false], [46, "module-cryptographic_estimators.MQEstimator.mq_problem", false], [47, "module-cryptographic_estimators.MQEstimator.series.hilbert", false], [48, "module-cryptographic_estimators.MQEstimator.series.nmonomial", false], [49, "module-cryptographic_estimators.MQEstimator.witness_degree", false], [50, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k", false], [51, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce", false], [52, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search", false], [53, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors", false], [54, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors", false], [55, "module-cryptographic_estimators.MREstimator.mr_algorithm", false], [56, "module-cryptographic_estimators.MREstimator.mr_constants", false], [57, "module-cryptographic_estimators.MREstimator.mr_estimator", false], [58, "module-cryptographic_estimators.MREstimator.mr_helper", false], [59, "module-cryptographic_estimators.MREstimator.mr_problem", false], [60, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens", false], [61, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon", false], [62, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa", false], [63, "module-cryptographic_estimators.PEEstimator.pe_algorithm", false], [64, "module-cryptographic_estimators.PEEstimator.pe_constants", false], [65, "module-cryptographic_estimators.PEEstimator.pe_estimator", false], [66, "module-cryptographic_estimators.PEEstimator.pe_helper", false], [67, "module-cryptographic_estimators.PEEstimator.pe_problem", false], [68, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp", false], [69, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc", false], [70, "module-cryptographic_estimators.PKEstimator.pk_algorithm", false], [71, "module-cryptographic_estimators.PKEstimator.pk_constants", false], [72, "module-cryptographic_estimators.PKEstimator.pk_estimator", false], [73, "module-cryptographic_estimators.PKEstimator.pk_helper", false], [74, "module-cryptographic_estimators.PKEstimator.pk_problem", false], [75, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration", false], [76, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs", false], [77, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs", false], [78, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization", false], [79, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs", false], [80, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors", false], [81, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1", false], [82, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2", false], [83, "module-cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors", false], [84, "module-cryptographic_estimators.RankSDEstimator.ranksd_algorithm", false], [85, "module-cryptographic_estimators.RankSDEstimator.ranksd_constants", false], [86, "module-cryptographic_estimators.RankSDEstimator.ranksd_estimator", false], [87, "module-cryptographic_estimators.RankSDEstimator.ranksd_helper", false], [88, "module-cryptographic_estimators.RankSDEstimator.ranksd_problem", false], [89, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj", false], [90, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin", false], [91, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum", false], [92, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm", false], [93, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep", false], [94, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack", false], [95, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm", false], [96, "module-cryptographic_estimators.RegSDEstimator.regsd_constants", false], [97, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator", false], [98, "module-cryptographic_estimators.RegSDEstimator.regsd_helper", false], [99, "module-cryptographic_estimators.RegSDEstimator.regsd_problem", false], [100, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision", false], [101, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm", false], [102, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw", false], [103, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw", false], [104, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus", false], [105, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may", false], [106, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer", false], [107, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov", false], [108, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange", false], [109, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern", false], [110, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision", false], [111, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm", false], [112, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may", false], [113, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer", false], [114, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov", false], [115, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange", false], [116, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern", false], [117, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper", false], [118, "module-cryptographic_estimators.SDEstimator.sd_algorithm", false], [119, "module-cryptographic_estimators.SDEstimator.sd_constants", false], [120, "module-cryptographic_estimators.SDEstimator.sd_estimator", false], [121, "module-cryptographic_estimators.SDEstimator.sd_helper", false], [122, "module-cryptographic_estimators.SDEstimator.sd_problem", false], [123, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell", false], [124, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange", false], [125, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern", false], [126, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm", false], [127, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants", false], [128, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator", false], [129, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper", false], [130, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem", false], [131, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack", false], [132, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack", false], [133, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack", false], [134, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir", false], [135, "module-cryptographic_estimators.UOVEstimator.uov_algorithm", false], [136, "module-cryptographic_estimators.UOVEstimator.uov_constants", false], [137, "module-cryptographic_estimators.UOVEstimator.uov_estimator", false], [138, "module-cryptographic_estimators.UOVEstimator.uov_problem", false], [139, "module-cryptographic_estimators.base_algorithm", false], [140, "module-cryptographic_estimators.base_constants", false], [141, "module-cryptographic_estimators.base_estimator", false], [142, "module-cryptographic_estimators.base_problem", false], [143, "module-cryptographic_estimators.estimation_renderer", false], [144, "module-cryptographic_estimators.helper", false]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm", false]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator", false]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem", false]], "mralgorithm (class in cryptographic_estimators.mrestimator.mr_algorithm)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm", false]], "mrestimator (class in cryptographic_estimators.mrestimator.mr_estimator)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator", false]], "mrproblem (class in cryptographic_estimators.mrestimator.mr_problem)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem", false]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1", false]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.nalgorithms", false]], "nalgorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.nalgorithms", false]], "nb_fq_syz() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.nb_fq_syz", false]], "nb_fqm() (in module cryptographic_estimators.ranksdestimator.ranksd_helper)": [[87, "cryptographic_estimators.RankSDEstimator.ranksd_helper.nb_fqm", false]], "ncolumns() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.ncolumns", false]], "ngates() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.ngates", false]], "nmatrices() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nmatrices", false]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[48, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree", false]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[45, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree", false]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[48, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree", false]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[45, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree", false]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[48, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries", false]], "normal_form (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NORMAL_FORM", false]], "normal_form (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[64, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.NORMAL_FORM", false]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials", false]], "npolynomials() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.npolynomials", false]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials", false]], "npolynomials() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.npolynomials", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced", false]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced", false]], "nprime() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.nprime", false]], "nrows() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nrows", false]], "number_of_weight_d_codewords() (in module cryptographic_estimators.peestimator.pe_helper)": [[66, "cryptographic_estimators.PEEstimator.pe_helper.number_of_weight_d_codewords", false]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables", false]], "nvariables() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.nvariables", false]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables", false]], "nvariables() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.nvariables", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced", false]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced", false]], "nw (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NW", false]], "oj1 (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1", false]], "oj2 (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2", false]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[139, "cryptographic_estimators.base_algorithm.optimal_parameter", false]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.optimal_parameters", false]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.optimal_parameters", false]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1", false]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2", false]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3", false]], "order_of_the_field() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.order_of_the_field", false]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field", false]], "order_of_the_field() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.order_of_the_field", false]], "order_of_the_field() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.order_of_the_field", false]], "order_oil_space() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.order_oil_space", false]], "p() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.p", false]], "p() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.p", false]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.p", false]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p", false]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p", false]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.p", false]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.p", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1", false]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1", false]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2", false]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2", false]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names", false]], "parameter_names() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_names", false]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_names", false]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_names", false]], "parameter_names() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.parameter_names", false]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.parameter_names", false]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names", false]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names", false]], "parameter_names() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_names", false]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_names", false]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_names", false]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_names", false]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_names", false]], "parameter_names() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_names", false]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_names", false]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_names", false]], "parameter_names() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_names", false]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.parameter_names", false]], "parameter_names() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_names", false]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_names", false]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_names", false]], "parameter_names() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_names", false]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_names", false]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_names", false]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm property)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration property)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs property)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs property)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization property)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs property)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors property)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 property)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 property)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors property)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_ranges", false]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_ranges", false]], "pealgorithm (class in cryptographic_estimators.peestimator.pe_algorithm)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm", false]], "peestimator (class in cryptographic_estimators.peestimator.pe_estimator)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator", false]], "peproblem (class in cryptographic_estimators.peestimator.pe_problem)": [[67, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem", false]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS", false]], "permutations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.PERMUTATIONS", false]], "pkalgorithm (class in cryptographic_estimators.pkestimator.pk_algorithm)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm", false]], "pkestimator (class in cryptographic_estimators.pkestimator.pk_estimator)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator", false]], "pkproblem (class in cryptographic_estimators.pkestimator.pk_problem)": [[74, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem", false]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl", false]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange", false]], "prange (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange", false]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[115, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel", false]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[47, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision", false]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[41, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system", false]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[49, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system", false]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r", false]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r", false]], "r_int() (in module cryptographic_estimators.regsdestimator.regsd_helper)": [[98, "cryptographic_estimators.RegSDEstimator.regsd_helper.r_int", false]], "random_sparse_vec_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[66, "cryptographic_estimators.PEEstimator.pe_helper.random_sparse_vec_orbit", false]], "ranksdalgorithm (class in cryptographic_estimators.ranksdestimator.ranksd_algorithm)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm", false]], "ranksdestimator (class in cryptographic_estimators.ranksdestimator.ranksd_estimator)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator", false]], "ranksdproblem (class in cryptographic_estimators.ranksdestimator.ranksd_problem)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem", false]], "reconciliationattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack", false]], "regsdalgorithm (class in cryptographic_estimators.regsdestimator.regsd_algorithm)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm", false]], "regsdestimator (class in cryptographic_estimators.regsdestimator.regsd_estimator)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator", false]], "regsdproblem (class in cryptographic_estimators.regsdestimator.regsd_problem)": [[99, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem", false]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[41, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system", false]], "regularisdenum (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum", false]], "regularisdperm (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm", false]], "regularisdrep (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep", false]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS", false]], "representations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.REPRESENTATIONS", false]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic", false]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset", false]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.reset", false]], "reset() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.reset", false]], "reset() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.reset", false]], "reset() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.reset", false]], "reset() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.reset", false]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset", false]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset", false]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset", false]], "reset() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.reset", false]], "reset() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.reset", false]], "reset() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.reset", false]], "reset() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.reset", false]], "reset() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.reset", false]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.reset", false]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset", false]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset", false]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset", false]], "reset() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.reset", false]], "reset() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.reset", false]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.reset", false]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.reset", false]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.reset", false]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.reset", false]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.reset", false]], "reset() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.reset", false]], "reset() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.reset", false]], "reset() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.reset", false]], "reset() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.reset", false]], "reset() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.reset", false]], "reset() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.reset", false]], "reset() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.reset", false]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.reset", false]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.reset", false]], "reset() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.reset", false]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.reset", false]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset", false]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset", false]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset", false]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.reset", false]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.reset", false]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.reset", false]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.reset", false]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.reset", false]], "reset() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.reset", false]], "reset() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.reset", false]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.reset", false]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.reset", false]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.reset", false]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.reset", false]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[144, "cryptographic_estimators.helper.round_or_truncate", false]], "sbc (class in cryptographic_estimators.pkestimator.pkalgorithms.sbc)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC", false]], "sbc_isd (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[71, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_ISD", false]], "sbc_u (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[71, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_U", false]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm", false]], "sdattack (class in cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack", false]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator", false]], "sdfqalgorithm (class in cryptographic_estimators.sdfqestimator.sdfq_algorithm)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm", false]], "sdfqestimator (class in cryptographic_estimators.sdfqestimator.sdfq_estimator)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator", false]], "sdfqproblem (class in cryptographic_estimators.sdfqestimator.sdfq_problem)": [[130, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem", false]], "sdkeyattack (class in cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack", false]], "sdmsgattack (class in cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack", false]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[122, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem", false]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[41, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system", false]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[49, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system", false]], "set_operations_on_base_field() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.set_operations_on_base_field", false]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameter_ranges", false]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameter_ranges", false]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters", false]], "set_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameters", false]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameters", false]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameters", false]], "set_parameters() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.set_parameters", false]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.set_parameters", false]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters", false]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters", false]], "set_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameters", false]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameters", false]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameters", false]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameters", false]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameters", false]], "set_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameters", false]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameters", false]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameters", false]], "set_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameters", false]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.set_parameters", false]], "set_parameters() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameters", false]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameters", false]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameters", false]], "set_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameters", false]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameters", false]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameters", false]], "ssa (class in cryptographic_estimators.peestimator.pealgorithms.ssa)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA", false]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern", false]], "stern (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern", false]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[116, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel", false]], "strassen (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[58, "cryptographic_estimators.MREstimator.mr_helper.Variant.strassen", false]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[45, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients", false]], "supportminors (class in cryptographic_estimators.mrestimator.mralgorithms.support_minors)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors", false]], "supportminors (class in cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors", false]], "t() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.t", false]], "t() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.t", false]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[141, "cryptographic_estimators.base_estimator.BaseEstimator.table", false]], "table() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.table", false]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table", false]], "table() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.table", false]], "table() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.table", false]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[44, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table", false]], "table() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[57, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.table", false]], "table() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[65, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.table", false]], "table() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[72, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.table", false]], "table() (cryptographic_estimators.ranksdestimator.ranksd_estimator.ranksdestimator method)": [[86, "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator.table", false]], "table() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[97, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.table", false]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[120, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table", false]], "table() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[128, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.table", false]], "table() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.table", false]], "target_rank() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.target_rank", false]], "target_rank() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.target_rank", false]], "theta (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem property)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.theta", false]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta", false]], "theta (cryptographic_estimators.mrestimator.mr_problem.mrproblem property)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.theta", false]], "theta (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem property)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.theta", false]], "theta (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.theta", false]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[144, "cryptographic_estimators.helper.ComplexityType.TILDEO", false]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[139, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity", false]], "time_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.time_complexity", false]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.time_complexity", false]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.time_complexity", false]], "time_complexity() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.time_complexity", false]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.time_complexity", false]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[42, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hashimoto.hashimoto method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity", false]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[40, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity", false]], "time_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[55, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.time_complexity", false]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.time_complexity", false]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.time_complexity", false]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.time_complexity", false]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.time_complexity", false]], "time_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[63, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.time_complexity", false]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.time_complexity", false]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[62, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.time_complexity", false]], "time_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[70, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.time_complexity", false]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksd_algorithm.ranksdalgorithm method)": [[84, "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.basis_enumeration.basisenumeration method)": [[75, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.grs.grs method)": [[76, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.guessing_enhanced_grs.guessingenhancedgrs method)": [[77, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.hybrid_linearization.hybridlinearization method)": [[78, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.improved_grs.improvedgrs method)": [[79, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.max_minors.maxminors method)": [[80, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_1.oj1 method)": [[81, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.ourivski_johansson_2.oj2 method)": [[82, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2.time_complexity", false]], "time_complexity() (cryptographic_estimators.ranksdestimator.ranksdalgorithms.support_minors.supportminors method)": [[83, "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[95, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[89, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[90, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[91, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[92, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[93, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.time_complexity", false]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[94, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[118, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[100, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[101, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[104, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[106, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[107, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[108, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[109, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[126, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[123, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[124, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.time_complexity", false]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[125, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.time_complexity", false]], "time_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.time_complexity", false]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[132, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[133, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.time_complexity", false]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[134, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.time_complexity", false]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[142, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[67, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[74, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[99, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[122, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[130, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_memory() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_memory", false]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[142, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[46, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[59, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[67, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[74, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.ranksdestimator.ranksd_problem.ranksdproblem method)": [[88, "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[99, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[122, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[130, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_time", false]], "to_bitcomplexity_time() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_time", false]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE", false]], "tree (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.TREE", false]], "u() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.u", false]], "uovalgorithm (class in cryptographic_estimators.uovestimator.uov_algorithm)": [[135, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm", false]], "uovestimator (class in cryptographic_estimators.uovestimator.uov_estimator)": [[137, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator", false]], "uovproblem (class in cryptographic_estimators.uovestimator.uov_problem)": [[138, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem", false]], "variant (class in cryptographic_estimators.mrestimator.mr_helper)": [[58, "cryptographic_estimators.MREstimator.mr_helper.Variant", false]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.variant", false]], "variant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[54, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.variant", false]], "verboseinformation (class in cryptographic_estimators.leestimator.le_constants)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation", false]], "verboseinformation (class in cryptographic_estimators.peestimator.pe_constants)": [[64, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation", false]], "verboseinformation (class in cryptographic_estimators.pkestimator.pk_constants)": [[71, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation", false]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[119, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation", false]], "verboseinformation (class in cryptographic_estimators.sdfqestimator.sdfq_constants)": [[127, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation", false]], "w() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w", false]], "w() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.w", false]], "w() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.w", false]], "w() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.w", false]], "w() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.w", false]], "w() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w", false]], "w1() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[69, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w1", false]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1", false]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1", false]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11", false]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[102, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2", false]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[103, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2", false]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[105, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2", false]], "w_prime() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w_prime", false]], "whipping_parameter() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.whipping_parameter", false]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[117, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap", false]], "x() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.X", false]], "x() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.X", false]], "y() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.Y", false]], "y() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[131, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.Y", false]]}, "objects": {"cryptographic_estimators": [[139, 0, 0, "-", "base_algorithm"], [140, 0, 0, "-", "base_constants"], [141, 0, 0, "-", "base_estimator"], [142, 0, 0, "-", "base_problem"], [143, 0, 0, "-", "estimation_renderer"], [144, 0, 0, "-", "helper"]], "cryptographic_estimators.BIKEEstimator": [[2, 0, 0, "-", "bike_algorithm"], [3, 0, 0, "-", "bike_constants"], [4, 0, 0, "-", "bike_estimator"], [5, 0, 0, "-", "bike_problem"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms": [[0, 0, 0, "-", "sd_key_attack"], [1, 0, 0, "-", "sd_msg_attack"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack": [[0, 1, 1, "", "SDKeyAttack"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack": [[0, 2, 1, "", "attack_type"], [0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_fastest_sd_algorithm"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_access_cost"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack": [[1, 1, 1, "", "SDMsgAttack"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack": [[1, 2, 1, "", "attack_type"], [1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_fastest_sd_algorithm"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_access_cost"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.BIKEEstimator.bike_algorithm": [[2, 1, 1, "", "BIKEAlgorithm"]], "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm": [[2, 2, 1, "", "attack_type"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "get_optimal_parameters_dict"], [2, 3, 1, "", "has_optimal_parameter"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "memory_access_cost"], [2, 3, 1, "", "memory_complexity"], [2, 3, 1, "", "optimal_parameters"], [2, 3, 1, "", "parameter_names"], [2, 2, 1, "", "parameter_ranges"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "set_parameter_ranges"], [2, 3, 1, "", "set_parameters"], [2, 3, 1, "", "time_complexity"]], "cryptographic_estimators.BIKEEstimator.bike_estimator": [[4, 1, 1, "", "BIKEEstimator"]], "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator": [[4, 3, 1, "", "algorithm_names"], [4, 3, 1, "", "algorithms"], [4, 2, 1, "", "bit_complexities"], [4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "estimate"], [4, 2, 1, "", "estimator_type"], [4, 4, 1, "", "excluded_algorithms_by_default"], [4, 3, 1, "", "fastest_algorithm"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "nalgorithms"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "table"]], "cryptographic_estimators.BIKEEstimator.bike_problem": [[5, 1, 1, "", "BIKEProblem"]], "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem": [[5, 3, 1, "", "expected_number_solutions"], [5, 3, 1, "", "get_parameters"], [5, 3, 1, "", "to_bitcomplexity_memory"], [5, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.DummyEstimator": [[7, 0, 0, "-", "dummy_algorithm"], [8, 0, 0, "-", "dummy_estimator"], [9, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[6, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[6, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[6, 2, 1, "", "attack_type"], [6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "get_optimal_parameters_dict"], [6, 3, 1, "", "has_optimal_parameter"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "memory_access_cost"], [6, 3, 1, "", "memory_complexity"], [6, 3, 1, "", "optimal_parameters"], [6, 3, 1, "", "optimization_parameter_1"], [6, 3, 1, "", "optimization_parameter_2"], [6, 3, 1, "", "optimization_parameter_3"], [6, 3, 1, "", "parameter_names"], [6, 2, 1, "", "parameter_ranges"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "set_parameter_ranges"], [6, 3, 1, "", "set_parameters"], [6, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[7, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[7, 2, 1, "", "attack_type"], [7, 2, 1, "", "complexity_type"], [7, 3, 1, "", "get_optimal_parameters_dict"], [7, 3, 1, "", "has_optimal_parameter"], [7, 2, 1, "", "memory_access"], [7, 3, 1, "", "memory_access_cost"], [7, 3, 1, "", "memory_complexity"], [7, 3, 1, "", "optimal_parameters"], [7, 3, 1, "", "parameter_names"], [7, 2, 1, "", "parameter_ranges"], [7, 3, 1, "", "reset"], [7, 3, 1, "", "set_parameter_ranges"], [7, 3, 1, "", "set_parameters"], [7, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[8, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[8, 3, 1, "", "algorithm_names"], [8, 3, 1, "", "algorithms"], [8, 2, 1, "", "bit_complexities"], [8, 2, 1, "", "complexity_type"], [8, 3, 1, "", "estimate"], [8, 2, 1, "", "estimator_type"], [8, 4, 1, "", "excluded_algorithms_by_default"], [8, 3, 1, "", "fastest_algorithm"], [8, 2, 1, "", "memory_access"], [8, 3, 1, "", "nalgorithms"], [8, 3, 1, "", "reset"], [8, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[9, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[9, 3, 1, "", "expected_number_solutions"], [9, 3, 1, "", "get_parameters"], [9, 3, 1, "", "to_bitcomplexity_memory"], [9, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.LEEstimator": [[13, 0, 0, "-", "le_algorithm"], [14, 0, 0, "-", "le_constants"], [15, 0, 0, "-", "le_estimator"], [16, 0, 0, "-", "le_helper"], [17, 0, 0, "-", "le_problem"]], "cryptographic_estimators.LEEstimator.LEAlgorithms": [[10, 0, 0, "-", "bbps"], [11, 0, 0, "-", "beullens"], [12, 0, 0, "-", "leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps": [[10, 1, 1, "", "BBPS"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS": [[10, 2, 1, "", "attack_type"], [10, 2, 1, "", "complexity_type"], [10, 3, 1, "", "get_optimal_parameters_dict"], [10, 3, 1, "", "has_optimal_parameter"], [10, 2, 1, "", "memory_access"], [10, 3, 1, "", "memory_access_cost"], [10, 3, 1, "", "memory_complexity"], [10, 3, 1, "", "optimal_parameters"], [10, 3, 1, "", "parameter_names"], [10, 2, 1, "", "parameter_ranges"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "set_parameter_ranges"], [10, 3, 1, "", "set_parameters"], [10, 3, 1, "", "time_complexity"], [10, 3, 1, "", "w"], [10, 3, 1, "", "w_prime"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens": [[11, 1, 1, "", "Beullens"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens": [[11, 2, 1, "", "attack_type"], [11, 2, 1, "", "complexity_type"], [11, 3, 1, "", "get_optimal_parameters_dict"], [11, 3, 1, "", "has_optimal_parameter"], [11, 2, 1, "", "memory_access"], [11, 3, 1, "", "memory_access_cost"], [11, 3, 1, "", "memory_complexity"], [11, 3, 1, "", "optimal_parameters"], [11, 3, 1, "", "parameter_names"], [11, 2, 1, "", "parameter_ranges"], [11, 3, 1, "", "reset"], [11, 3, 1, "", "set_parameter_ranges"], [11, 3, 1, "", "set_parameters"], [11, 3, 1, "", "time_complexity"], [11, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon": [[12, 1, 1, "", "Leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon": [[12, 2, 1, "", "attack_type"], [12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "has_optimal_parameter"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_access_cost"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"], [12, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator.le_algorithm": [[13, 1, 1, "", "LEAlgorithm"]], "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm": [[13, 2, 1, "", "attack_type"], [13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "has_optimal_parameter"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_access_cost"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator.le_constants": [[14, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation": [[14, 4, 1, "", "ISD"], [14, 4, 1, "", "LISTS"], [14, 4, 1, "", "LISTS_SIZE"], [14, 4, 1, "", "NORMAL_FORM"], [14, 4, 1, "", "NW"]], "cryptographic_estimators.LEEstimator.le_estimator": [[15, 1, 1, "", "LEEstimator"]], "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator": [[15, 3, 1, "", "algorithm_names"], [15, 3, 1, "", "algorithms"], [15, 2, 1, "", "bit_complexities"], [15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "estimate"], [15, 2, 1, "", "estimator_type"], [15, 4, 1, "", "excluded_algorithms_by_default"], [15, 3, 1, "", "fastest_algorithm"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "nalgorithms"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "table"]], "cryptographic_estimators.LEEstimator.le_helper": [[16, 5, 1, "", "cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.LEEstimator.le_problem": [[17, 1, 1, "", "LEProblem"]], "cryptographic_estimators.LEEstimator.le_problem.LEProblem": [[17, 3, 1, "", "expected_number_solutions"], [17, 3, 1, "", "get_parameters"], [17, 3, 1, "", "to_bitcomplexity_memory"], [17, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MAYOEstimator": [[23, 0, 0, "-", "mayo_algorithm"], [24, 0, 0, "-", "mayo_constants"], [25, 0, 0, "-", "mayo_estimator"], [26, 0, 0, "-", "mayo_helper"], [27, 0, 0, "-", "mayo_problem"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms": [[18, 0, 0, "-", "claw_finding"], [19, 0, 0, "-", "direct_attack"], [20, 0, 0, "-", "intersection_attack"], [21, 0, 0, "-", "kipnis_shamir"], [22, 0, 0, "-", "reconciliation_attack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding": [[18, 1, 1, "", "ClawFinding"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding": [[18, 3, 1, "", "X"], [18, 3, 1, "", "Y"], [18, 2, 1, "", "attack_type"], [18, 2, 1, "", "complexity_type"], [18, 3, 1, "", "get_optimal_parameters_dict"], [18, 3, 1, "", "has_optimal_parameter"], [18, 3, 1, "", "linear_algebra_constant"], [18, 2, 1, "", "memory_access"], [18, 3, 1, "", "memory_access_cost"], [18, 3, 1, "", "memory_complexity"], [18, 3, 1, "", "optimal_parameters"], [18, 3, 1, "", "parameter_names"], [18, 2, 1, "", "parameter_ranges"], [18, 3, 1, "", "reset"], [18, 3, 1, "", "set_parameter_ranges"], [18, 3, 1, "", "set_parameters"], [18, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack": [[19, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack": [[19, 3, 1, "", "a"], [19, 2, 1, "", "attack_type"], [19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "get_optimal_parameters_dict"], [19, 3, 1, "", "has_optimal_parameter"], [19, 3, 1, "", "k"], [19, 3, 1, "", "linear_algebra_constant"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "memory_access_cost"], [19, 3, 1, "", "memory_complexity"], [19, 3, 1, "", "optimal_parameters"], [19, 3, 1, "", "parameter_names"], [19, 2, 1, "", "parameter_ranges"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "set_parameter_ranges"], [19, 3, 1, "", "set_parameters"], [19, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack": [[20, 1, 1, "", "IntersectionAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack": [[20, 2, 1, "", "attack_type"], [20, 2, 1, "", "complexity_type"], [20, 3, 1, "", "get_optimal_parameters_dict"], [20, 3, 1, "", "has_optimal_parameter"], [20, 3, 1, "", "linear_algebra_constant"], [20, 2, 1, "", "memory_access"], [20, 3, 1, "", "memory_access_cost"], [20, 3, 1, "", "memory_complexity"], [20, 3, 1, "", "optimal_parameters"], [20, 3, 1, "", "parameter_names"], [20, 2, 1, "", "parameter_ranges"], [20, 3, 1, "", "reset"], [20, 3, 1, "", "set_parameter_ranges"], [20, 3, 1, "", "set_parameters"], [20, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir": [[21, 1, 1, "", "KipnisShamir"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir": [[21, 2, 1, "", "attack_type"], [21, 2, 1, "", "complexity_type"], [21, 3, 1, "", "get_optimal_parameters_dict"], [21, 3, 1, "", "has_optimal_parameter"], [21, 3, 1, "", "linear_algebra_constant"], [21, 2, 1, "", "memory_access"], [21, 3, 1, "", "memory_access_cost"], [21, 3, 1, "", "memory_complexity"], [21, 3, 1, "", "optimal_parameters"], [21, 3, 1, "", "parameter_names"], [21, 2, 1, "", "parameter_ranges"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "set_parameter_ranges"], [21, 3, 1, "", "set_parameters"], [21, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack": [[22, 1, 1, "", "ReconciliationAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack": [[22, 2, 1, "", "attack_type"], [22, 2, 1, "", "complexity_type"], [22, 3, 1, "", "get_optimal_parameters_dict"], [22, 3, 1, "", "has_optimal_parameter"], [22, 3, 1, "", "linear_algebra_constant"], [22, 2, 1, "", "memory_access"], [22, 3, 1, "", "memory_access_cost"], [22, 3, 1, "", "memory_complexity"], [22, 3, 1, "", "optimal_parameters"], [22, 3, 1, "", "parameter_names"], [22, 2, 1, "", "parameter_ranges"], [22, 3, 1, "", "reset"], [22, 3, 1, "", "set_parameter_ranges"], [22, 3, 1, "", "set_parameters"], [22, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.mayo_algorithm": [[23, 1, 1, "", "MAYOAlgorithm"]], "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm": [[23, 2, 1, "", "attack_type"], [23, 2, 1, "", "complexity_type"], [23, 3, 1, "", "get_optimal_parameters_dict"], [23, 3, 1, "", "has_optimal_parameter"], [23, 3, 1, "", "linear_algebra_constant"], [23, 2, 1, "", "memory_access"], [23, 3, 1, "", "memory_access_cost"], [23, 3, 1, "", "memory_complexity"], [23, 3, 1, "", "optimal_parameters"], [23, 3, 1, "", "parameter_names"], [23, 2, 1, "", "parameter_ranges"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "set_parameter_ranges"], [23, 3, 1, "", "set_parameters"], [23, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.mayo_estimator": [[25, 1, 1, "", "MAYOEstimator"]], "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator": [[25, 3, 1, "", "algorithm_names"], [25, 3, 1, "", "algorithms"], [25, 2, 1, "", "bit_complexities"], [25, 2, 1, "", "complexity_type"], [25, 3, 1, "", "estimate"], [25, 2, 1, "", "estimator_type"], [25, 4, 1, "", "excluded_algorithms_by_default"], [25, 3, 1, "", "fastest_algorithm"], [25, 2, 1, "", "memory_access"], [25, 3, 1, "", "nalgorithms"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "table"]], "cryptographic_estimators.MAYOEstimator.mayo_problem": [[27, 1, 1, "", "MAYOProblem"]], "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem": [[27, 2, 1, "", "cost_one_hash"], [27, 3, 1, "", "expected_number_solutions"], [27, 3, 1, "", "get_parameters"], [27, 3, 1, "", "hashes_to_basic_operations"], [27, 3, 1, "", "npolynomials"], [27, 3, 1, "", "nvariables"], [27, 3, 1, "", "order_of_the_field"], [27, 3, 1, "", "order_oil_space"], [27, 2, 1, "", "theta"], [27, 3, 1, "", "to_bitcomplexity_memory"], [27, 3, 1, "", "to_bitcomplexity_time"], [27, 3, 1, "", "whipping_parameter"]], "cryptographic_estimators.MQEstimator": [[41, 0, 0, "-", "degree_of_regularity"], [42, 0, 0, "-", "mq_algorithm"], [43, 0, 0, "-", "mq_constants"], [44, 0, 0, "-", "mq_estimator"], [45, 0, 0, "-", "mq_helper"], [46, 0, 0, "-", "mq_problem"], [49, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[28, 0, 0, "-", "bjorklund"], [29, 0, 0, "-", "booleansolve_fxl"], [30, 0, 0, "-", "cgmta"], [31, 0, 0, "-", "crossbred"], [32, 0, 0, "-", "dinur1"], [33, 0, 0, "-", "dinur2"], [34, 0, 0, "-", "exhaustive_search"], [35, 0, 0, "-", "f5"], [36, 0, 0, "-", "hashimoto"], [37, 0, 0, "-", "hybrid_f5"], [38, 0, 0, "-", "kpg"], [39, 0, 0, "-", "lokshtanov"], [40, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[28, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[28, 2, 1, "", "attack_type"], [28, 2, 1, "", "complexity_type"], [28, 3, 1, "", "get_optimal_parameters_dict"], [28, 3, 1, "", "get_reduced_parameters"], [28, 3, 1, "", "has_optimal_parameter"], [28, 3, 1, "", "lambda_"], [28, 3, 1, "", "linear_algebra_constant"], [28, 2, 1, "", "memory_access"], [28, 3, 1, "", "memory_access_cost"], [28, 3, 1, "", "memory_complexity"], [28, 3, 1, "", "npolynomials_reduced"], [28, 3, 1, "", "nvariables_reduced"], [28, 3, 1, "", "optimal_parameters"], [28, 3, 1, "", "parameter_names"], [28, 2, 1, "", "parameter_ranges"], [28, 3, 1, "", "reset"], [28, 3, 1, "", "set_parameter_ranges"], [28, 3, 1, "", "set_parameters"], [28, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl": [[29, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL": [[29, 2, 1, "", "attack_type"], [29, 2, 1, "", "complexity_type"], [29, 3, 1, "", "get_optimal_parameters_dict"], [29, 3, 1, "", "get_reduced_parameters"], [29, 3, 1, "", "has_optimal_parameter"], [29, 3, 1, "", "k"], [29, 3, 1, "", "linear_algebra_constant"], [29, 2, 1, "", "memory_access"], [29, 3, 1, "", "memory_access_cost"], [29, 3, 1, "", "memory_complexity"], [29, 3, 1, "", "npolynomials_reduced"], [29, 3, 1, "", "nvariables_reduced"], [29, 3, 1, "", "optimal_parameters"], [29, 3, 1, "", "parameter_names"], [29, 2, 1, "", "parameter_ranges"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "set_parameter_ranges"], [29, 3, 1, "", "set_parameters"], [29, 3, 1, "", "time_complexity"], [29, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[30, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[30, 2, 1, "", "attack_type"], [30, 2, 1, "", "complexity_type"], [30, 3, 1, "", "get_optimal_parameters_dict"], [30, 3, 1, "", "get_reduced_parameters"], [30, 3, 1, "", "has_optimal_parameter"], [30, 3, 1, "", "linear_algebra_constant"], [30, 2, 1, "", "memory_access"], [30, 3, 1, "", "memory_access_cost"], [30, 3, 1, "", "memory_complexity"], [30, 3, 1, "", "npolynomials_reduced"], [30, 3, 1, "", "nvariables_reduced"], [30, 3, 1, "", "optimal_parameters"], [30, 3, 1, "", "parameter_names"], [30, 2, 1, "", "parameter_ranges"], [30, 3, 1, "", "reset"], [30, 3, 1, "", "set_parameter_ranges"], [30, 3, 1, "", "set_parameters"], [30, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[31, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[31, 3, 1, "", "D"], [31, 2, 1, "", "attack_type"], [31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "d"], [31, 3, 1, "", "get_optimal_parameters_dict"], [31, 3, 1, "", "get_reduced_parameters"], [31, 3, 1, "", "has_optimal_parameter"], [31, 3, 1, "", "k"], [31, 3, 1, "", "linear_algebra_constant"], [31, 2, 1, "", "max_D"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "memory_access_cost"], [31, 3, 1, "", "memory_complexity"], [31, 3, 1, "", "npolynomials_reduced"], [31, 3, 1, "", "nvariables_reduced"], [31, 3, 1, "", "optimal_parameters"], [31, 3, 1, "", "parameter_names"], [31, 2, 1, "", "parameter_ranges"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_parameter_ranges"], [31, 3, 1, "", "set_parameters"], [31, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[32, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[32, 2, 1, "", "attack_type"], [32, 2, 1, "", "complexity_type"], [32, 3, 1, "", "get_optimal_parameters_dict"], [32, 3, 1, "", "get_reduced_parameters"], [32, 3, 1, "", "has_optimal_parameter"], [32, 3, 1, "", "kappa"], [32, 3, 1, "", "lambda_"], [32, 3, 1, "", "linear_algebra_constant"], [32, 2, 1, "", "memory_access"], [32, 3, 1, "", "memory_access_cost"], [32, 3, 1, "", "memory_complexity"], [32, 3, 1, "", "npolynomials_reduced"], [32, 3, 1, "", "nvariables_reduced"], [32, 3, 1, "", "optimal_parameters"], [32, 3, 1, "", "parameter_names"], [32, 2, 1, "", "parameter_ranges"], [32, 3, 1, "", "reset"], [32, 3, 1, "", "set_parameter_ranges"], [32, 3, 1, "", "set_parameters"], [32, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[33, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[33, 2, 1, "", "attack_type"], [33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "get_optimal_parameters_dict"], [33, 3, 1, "", "get_reduced_parameters"], [33, 3, 1, "", "has_optimal_parameter"], [33, 3, 1, "", "linear_algebra_constant"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "memory_access_cost"], [33, 3, 1, "", "memory_complexity"], [33, 3, 1, "", "n1"], [33, 3, 1, "", "npolynomials_reduced"], [33, 3, 1, "", "nvariables_reduced"], [33, 3, 1, "", "optimal_parameters"], [33, 3, 1, "", "parameter_names"], [33, 2, 1, "", "parameter_ranges"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_parameter_ranges"], [33, 3, 1, "", "set_parameters"], [33, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[34, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[34, 2, 1, "", "attack_type"], [34, 2, 1, "", "complexity_type"], [34, 3, 1, "", "get_optimal_parameters_dict"], [34, 3, 1, "", "get_reduced_parameters"], [34, 3, 1, "", "has_optimal_parameter"], [34, 3, 1, "", "linear_algebra_constant"], [34, 2, 1, "", "memory_access"], [34, 3, 1, "", "memory_access_cost"], [34, 3, 1, "", "memory_complexity"], [34, 3, 1, "", "npolynomials_reduced"], [34, 3, 1, "", "nvariables_reduced"], [34, 3, 1, "", "optimal_parameters"], [34, 3, 1, "", "parameter_names"], [34, 2, 1, "", "parameter_ranges"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_parameter_ranges"], [34, 3, 1, "", "set_parameters"], [34, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[35, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[35, 2, 1, "", "attack_type"], [35, 2, 1, "", "complexity_type"], [35, 3, 1, "", "degree_of_polynomials"], [35, 3, 1, "", "get_optimal_parameters_dict"], [35, 3, 1, "", "get_reduced_parameters"], [35, 3, 1, "", "has_optimal_parameter"], [35, 3, 1, "", "linear_algebra_constant"], [35, 2, 1, "", "memory_access"], [35, 3, 1, "", "memory_access_cost"], [35, 3, 1, "", "memory_complexity"], [35, 3, 1, "", "npolynomials_reduced"], [35, 3, 1, "", "nvariables_reduced"], [35, 3, 1, "", "optimal_parameters"], [35, 3, 1, "", "parameter_names"], [35, 2, 1, "", "parameter_ranges"], [35, 3, 1, "", "reset"], [35, 3, 1, "", "set_parameter_ranges"], [35, 3, 1, "", "set_parameters"], [35, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto": [[36, 1, 1, "", "Hashimoto"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hashimoto.Hashimoto": [[36, 3, 1, "", "a"], [36, 2, 1, "", "attack_type"], [36, 2, 1, "", "complexity_type"], [36, 3, 1, "", "get_optimal_parameters_dict"], [36, 3, 1, "", "get_reduced_parameters"], [36, 3, 1, "", "has_optimal_parameter"], [36, 3, 1, "", "k"], [36, 3, 1, "", "linear_algebra_constant"], [36, 2, 1, "", "memory_access"], [36, 3, 1, "", "memory_access_cost"], [36, 3, 1, "", "memory_complexity"], [36, 3, 1, "", "npolynomials_reduced"], [36, 3, 1, "", "nvariables_reduced"], [36, 3, 1, "", "optimal_parameters"], [36, 3, 1, "", "parameter_names"], [36, 2, 1, "", "parameter_ranges"], [36, 3, 1, "", "reset"], [36, 3, 1, "", "set_parameter_ranges"], [36, 3, 1, "", "set_parameters"], [36, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[37, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[37, 2, 1, "", "attack_type"], [37, 2, 1, "", "complexity_type"], [37, 3, 1, "", "degree_of_polynomials"], [37, 3, 1, "", "get_optimal_parameters_dict"], [37, 3, 1, "", "get_reduced_parameters"], [37, 3, 1, "", "has_optimal_parameter"], [37, 3, 1, "", "k"], [37, 3, 1, "", "linear_algebra_constant"], [37, 2, 1, "", "memory_access"], [37, 3, 1, "", "memory_access_cost"], [37, 3, 1, "", "memory_complexity"], [37, 3, 1, "", "npolynomials_reduced"], [37, 3, 1, "", "nvariables_reduced"], [37, 3, 1, "", "optimal_parameters"], [37, 3, 1, "", "parameter_names"], [37, 2, 1, "", "parameter_ranges"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "set_parameter_ranges"], [37, 3, 1, "", "set_parameters"], [37, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[38, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[38, 2, 1, "", "attack_type"], [38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "get_optimal_parameters_dict"], [38, 3, 1, "", "get_reduced_parameters"], [38, 3, 1, "", "has_optimal_parameter"], [38, 3, 1, "", "linear_algebra_constant"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "memory_access_cost"], [38, 3, 1, "", "memory_complexity"], [38, 3, 1, "", "npolynomials_reduced"], [38, 3, 1, "", "nvariables_reduced"], [38, 3, 1, "", "optimal_parameters"], [38, 3, 1, "", "parameter_names"], [38, 2, 1, "", "parameter_ranges"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "set_parameter_ranges"], [38, 3, 1, "", "set_parameters"], [38, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[39, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[39, 2, 1, "", "attack_type"], [39, 2, 1, "", "complexity_type"], [39, 3, 1, "", "delta"], [39, 3, 1, "", "get_optimal_parameters_dict"], [39, 3, 1, "", "get_reduced_parameters"], [39, 3, 1, "", "has_optimal_parameter"], [39, 3, 1, "", "linear_algebra_constant"], [39, 2, 1, "", "memory_access"], [39, 3, 1, "", "memory_access_cost"], [39, 3, 1, "", "memory_complexity"], [39, 3, 1, "", "npolynomials_reduced"], [39, 3, 1, "", "nvariables_reduced"], [39, 3, 1, "", "optimal_parameters"], [39, 3, 1, "", "parameter_names"], [39, 2, 1, "", "parameter_ranges"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "set_parameter_ranges"], [39, 3, 1, "", "set_parameters"], [39, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[40, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[40, 2, 1, "", "attack_type"], [40, 2, 1, "", "complexity_type"], [40, 3, 1, "", "get_optimal_parameters_dict"], [40, 3, 1, "", "get_reduced_parameters"], [40, 3, 1, "", "has_optimal_parameter"], [40, 3, 1, "", "linear_algebra_constant"], [40, 2, 1, "", "memory_access"], [40, 3, 1, "", "memory_access_cost"], [40, 3, 1, "", "memory_complexity"], [40, 3, 1, "", "npolynomials_reduced"], [40, 3, 1, "", "nvariables_reduced"], [40, 3, 1, "", "optimal_parameters"], [40, 3, 1, "", "parameter_names"], [40, 2, 1, "", "parameter_ranges"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "set_parameter_ranges"], [40, 3, 1, "", "set_parameters"], [40, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[41, 5, 1, "", "generic_system"], [41, 5, 1, "", "quadratic_system"], [41, 5, 1, "", "regular_system"], [41, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[42, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[42, 2, 1, "", "attack_type"], [42, 2, 1, "", "complexity_type"], [42, 3, 1, "", "get_optimal_parameters_dict"], [42, 3, 1, "", "get_reduced_parameters"], [42, 3, 1, "", "has_optimal_parameter"], [42, 3, 1, "", "linear_algebra_constant"], [42, 2, 1, "", "memory_access"], [42, 3, 1, "", "memory_access_cost"], [42, 3, 1, "", "memory_complexity"], [42, 3, 1, "", "npolynomials_reduced"], [42, 3, 1, "", "nvariables_reduced"], [42, 3, 1, "", "optimal_parameters"], [42, 3, 1, "", "parameter_names"], [42, 2, 1, "", "parameter_ranges"], [42, 3, 1, "", "reset"], [42, 3, 1, "", "set_parameter_ranges"], [42, 3, 1, "", "set_parameters"], [42, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[44, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[44, 3, 1, "", "algorithm_names"], [44, 3, 1, "", "algorithms"], [44, 2, 1, "", "bit_complexities"], [44, 2, 1, "", "complexity_type"], [44, 3, 1, "", "estimate"], [44, 2, 1, "", "estimator_type"], [44, 4, 1, "", "excluded_algorithms_by_default"], [44, 3, 1, "", "fastest_algorithm"], [44, 2, 1, "", "memory_access"], [44, 3, 1, "", "nalgorithms"], [44, 3, 1, "", "reset"], [44, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[45, 5, 1, "", "nmonomials_of_degree"], [45, 5, 1, "", "nmonomials_up_to_degree"], [45, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[46, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[46, 3, 1, "", "expected_number_solutions"], [46, 3, 1, "", "get_parameters"], [46, 3, 1, "", "get_problem_parameters"], [46, 3, 1, "", "is_defined_over_finite_field"], [46, 3, 1, "", "is_overdefined_system"], [46, 3, 1, "", "is_square_system"], [46, 3, 1, "", "is_underdefined_system"], [46, 3, 1, "", "npolynomials"], [46, 3, 1, "", "nvariables"], [46, 3, 1, "", "order_of_the_field"], [46, 2, 1, "", "theta"], [46, 3, 1, "", "to_bitcomplexity_memory"], [46, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[47, 0, 0, "-", "hilbert"], [48, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[47, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[47, 3, 1, "", "coefficient_of_degree"], [47, 3, 1, "", "coefficient_up_to_degree"], [47, 2, 1, "", "degrees"], [47, 3, 1, "", "first_nonpositive_coefficient"], [47, 3, 1, "", "first_nonpositive_coefficient_up_to_degree"], [47, 2, 1, "", "npolynomials"], [47, 2, 1, "", "nvariables"], [47, 2, 1, "", "precision"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[48, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[48, 3, 1, "", "nmonomials_of_degree"], [48, 3, 1, "", "nmonomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[49, 5, 1, "", "quadratic_system"], [49, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MREstimator": [[55, 0, 0, "-", "mr_algorithm"], [56, 0, 0, "-", "mr_constants"], [57, 0, 0, "-", "mr_estimator"], [58, 0, 0, "-", "mr_helper"], [59, 0, 0, "-", "mr_problem"]], "cryptographic_estimators.MREstimator.MRAlgorithms": [[50, 0, 0, "-", "big_k"], [51, 0, 0, "-", "bruteforce"], [52, 0, 0, "-", "kernel_search"], [53, 0, 0, "-", "minors"], [54, 0, 0, "-", "support_minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k": [[50, 1, 1, "", "BigK"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK": [[50, 3, 1, "", "a"], [50, 2, 1, "", "attack_type"], [50, 2, 1, "", "complexity_type"], [50, 3, 1, "", "cost_reduction"], [50, 3, 1, "", "get_optimal_parameters_dict"], [50, 3, 1, "", "get_problem_parameters_reduced"], [50, 3, 1, "", "has_optimal_parameter"], [50, 3, 1, "", "hybridization_factor"], [50, 3, 1, "", "linear_algebra_constant"], [50, 3, 1, "", "lv"], [50, 2, 1, "", "memory_access"], [50, 3, 1, "", "memory_access_cost"], [50, 3, 1, "", "memory_complexity"], [50, 3, 1, "", "optimal_parameters"], [50, 3, 1, "", "parameter_names"], [50, 2, 1, "", "parameter_ranges"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "set_parameter_ranges"], [50, 3, 1, "", "set_parameters"], [50, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce": [[51, 1, 1, "", "BruteForce"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce": [[51, 3, 1, "", "a"], [51, 2, 1, "", "attack_type"], [51, 2, 1, "", "complexity_type"], [51, 3, 1, "", "cost_reduction"], [51, 3, 1, "", "get_optimal_parameters_dict"], [51, 3, 1, "", "get_problem_parameters_reduced"], [51, 3, 1, "", "has_optimal_parameter"], [51, 3, 1, "", "hybridization_factor"], [51, 3, 1, "", "linear_algebra_constant"], [51, 3, 1, "", "lv"], [51, 2, 1, "", "memory_access"], [51, 3, 1, "", "memory_access_cost"], [51, 3, 1, "", "memory_complexity"], [51, 3, 1, "", "optimal_parameters"], [51, 3, 1, "", "parameter_names"], [51, 2, 1, "", "parameter_ranges"], [51, 3, 1, "", "reset"], [51, 3, 1, "", "set_parameter_ranges"], [51, 3, 1, "", "set_parameters"], [51, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search": [[52, 1, 1, "", "KernelSearch"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch": [[52, 3, 1, "", "a"], [52, 2, 1, "", "attack_type"], [52, 2, 1, "", "complexity_type"], [52, 3, 1, "", "cost_reduction"], [52, 3, 1, "", "get_optimal_parameters_dict"], [52, 3, 1, "", "get_problem_parameters_reduced"], [52, 3, 1, "", "has_optimal_parameter"], [52, 3, 1, "", "hybridization_factor"], [52, 3, 1, "", "linear_algebra_constant"], [52, 3, 1, "", "lv"], [52, 2, 1, "", "memory_access"], [52, 3, 1, "", "memory_access_cost"], [52, 3, 1, "", "memory_complexity"], [52, 3, 1, "", "optimal_parameters"], [52, 3, 1, "", "parameter_names"], [52, 2, 1, "", "parameter_ranges"], [52, 3, 1, "", "reset"], [52, 3, 1, "", "set_parameter_ranges"], [52, 3, 1, "", "set_parameters"], [52, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors": [[53, 1, 1, "", "Minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors": [[53, 3, 1, "", "a"], [53, 2, 1, "", "attack_type"], [53, 2, 1, "", "complexity_type"], [53, 3, 1, "", "cost_reduction"], [53, 3, 1, "", "get_optimal_parameters_dict"], [53, 3, 1, "", "get_problem_parameters_reduced"], [53, 3, 1, "", "has_optimal_parameter"], [53, 3, 1, "", "hybridization_factor"], [53, 3, 1, "", "linear_algebra_constant"], [53, 3, 1, "", "lv"], [53, 2, 1, "", "memory_access"], [53, 3, 1, "", "memory_access_cost"], [53, 3, 1, "", "memory_complexity"], [53, 3, 1, "", "optimal_parameters"], [53, 3, 1, "", "parameter_names"], [53, 2, 1, "", "parameter_ranges"], [53, 3, 1, "", "reset"], [53, 3, 1, "", "set_parameter_ranges"], [53, 3, 1, "", "set_parameters"], [53, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors": [[54, 1, 1, "", "SupportMinors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors": [[54, 3, 1, "", "a"], [54, 2, 1, "", "attack_type"], [54, 3, 1, "", "b"], [54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "cost_reduction"], [54, 3, 1, "", "get_optimal_parameters_dict"], [54, 3, 1, "", "get_problem_parameters_reduced"], [54, 3, 1, "", "has_optimal_parameter"], [54, 3, 1, "", "hybridization_factor"], [54, 3, 1, "", "linear_algebra_constant"], [54, 3, 1, "", "lv"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "memory_access_cost"], [54, 3, 1, "", "memory_complexity"], [54, 3, 1, "", "nprime"], [54, 3, 1, "", "optimal_parameters"], [54, 3, 1, "", "parameter_names"], [54, 2, 1, "", "parameter_ranges"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "set_parameter_ranges"], [54, 3, 1, "", "set_parameters"], [54, 3, 1, "", "time_complexity"], [54, 3, 1, "", "variant"]], "cryptographic_estimators.MREstimator.mr_algorithm": [[55, 1, 1, "", "MRAlgorithm"]], "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm": [[55, 2, 1, "", "attack_type"], [55, 2, 1, "", "complexity_type"], [55, 3, 1, "", "cost_reduction"], [55, 3, 1, "", "get_optimal_parameters_dict"], [55, 3, 1, "", "get_problem_parameters_reduced"], [55, 3, 1, "", "has_optimal_parameter"], [55, 3, 1, "", "hybridization_factor"], [55, 3, 1, "", "linear_algebra_constant"], [55, 2, 1, "", "memory_access"], [55, 3, 1, "", "memory_access_cost"], [55, 3, 1, "", "memory_complexity"], [55, 3, 1, "", "optimal_parameters"], [55, 3, 1, "", "parameter_names"], [55, 2, 1, "", "parameter_ranges"], [55, 3, 1, "", "reset"], [55, 3, 1, "", "set_parameter_ranges"], [55, 3, 1, "", "set_parameters"], [55, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.mr_estimator": [[57, 1, 1, "", "MREstimator"]], "cryptographic_estimators.MREstimator.mr_estimator.MREstimator": [[57, 3, 1, "", "algorithm_names"], [57, 3, 1, "", "algorithms"], [57, 2, 1, "", "bit_complexities"], [57, 2, 1, "", "complexity_type"], [57, 3, 1, "", "estimate"], [57, 2, 1, "", "estimator_type"], [57, 4, 1, "", "excluded_algorithms_by_default"], [57, 3, 1, "", "fastest_algorithm"], [57, 2, 1, "", "memory_access"], [57, 3, 1, "", "nalgorithms"], [57, 3, 1, "", "reset"], [57, 3, 1, "", "table"]], "cryptographic_estimators.MREstimator.mr_helper": [[58, 1, 1, "", "Variant"], [58, 5, 1, "", "determinant_of_A"], [58, 5, 1, "", "entry_i_j_of_A"], [58, 5, 1, "", "extended_binomial"], [58, 5, 1, "", "matrix_A"], [58, 5, 1, "", "minors_polynomial_degree"], [58, 5, 1, "", "minors_series"]], "cryptographic_estimators.MREstimator.mr_helper.Variant": [[58, 4, 1, "", "block_wiedemann"], [58, 4, 1, "", "strassen"]], "cryptographic_estimators.MREstimator.mr_problem": [[59, 1, 1, "", "MRProblem"]], "cryptographic_estimators.MREstimator.mr_problem.MRProblem": [[59, 3, 1, "", "expected_number_solutions"], [59, 3, 1, "", "get_parameters"], [59, 3, 1, "", "length_solution_vector"], [59, 3, 1, "", "ncolumns"], [59, 3, 1, "", "nmatrices"], [59, 3, 1, "", "nrows"], [59, 3, 1, "", "order_of_the_field"], [59, 3, 1, "", "target_rank"], [59, 2, 1, "", "theta"], [59, 3, 1, "", "to_bitcomplexity_memory"], [59, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PEEstimator": [[63, 0, 0, "-", "pe_algorithm"], [64, 0, 0, "-", "pe_constants"], [65, 0, 0, "-", "pe_estimator"], [66, 0, 0, "-", "pe_helper"], [67, 0, 0, "-", "pe_problem"]], "cryptographic_estimators.PEEstimator.PEAlgorithms": [[60, 0, 0, "-", "beullens"], [61, 0, 0, "-", "leon"], [62, 0, 0, "-", "ssa"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens": [[60, 1, 1, "", "Beullens"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens": [[60, 2, 1, "", "attack_type"], [60, 2, 1, "", "complexity_type"], [60, 3, 1, "", "get_optimal_parameters_dict"], [60, 3, 1, "", "has_optimal_parameter"], [60, 2, 1, "", "memory_access"], [60, 3, 1, "", "memory_access_cost"], [60, 3, 1, "", "memory_complexity"], [60, 3, 1, "", "optimal_parameters"], [60, 3, 1, "", "parameter_names"], [60, 2, 1, "", "parameter_ranges"], [60, 3, 1, "", "reset"], [60, 3, 1, "", "set_parameter_ranges"], [60, 3, 1, "", "set_parameters"], [60, 3, 1, "", "time_complexity"], [60, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon": [[61, 1, 1, "", "Leon"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon": [[61, 2, 1, "", "attack_type"], [61, 2, 1, "", "complexity_type"], [61, 3, 1, "", "get_optimal_parameters_dict"], [61, 3, 1, "", "has_optimal_parameter"], [61, 2, 1, "", "memory_access"], [61, 3, 1, "", "memory_access_cost"], [61, 3, 1, "", "memory_complexity"], [61, 3, 1, "", "optimal_parameters"], [61, 3, 1, "", "parameter_names"], [61, 2, 1, "", "parameter_ranges"], [61, 3, 1, "", "reset"], [61, 3, 1, "", "set_parameter_ranges"], [61, 3, 1, "", "set_parameters"], [61, 3, 1, "", "time_complexity"], [61, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa": [[62, 1, 1, "", "SSA"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA": [[62, 2, 1, "", "attack_type"], [62, 2, 1, "", "complexity_type"], [62, 3, 1, "", "get_optimal_parameters_dict"], [62, 3, 1, "", "has_optimal_parameter"], [62, 2, 1, "", "memory_access"], [62, 3, 1, "", "memory_access_cost"], [62, 3, 1, "", "memory_complexity"], [62, 3, 1, "", "optimal_parameters"], [62, 3, 1, "", "parameter_names"], [62, 2, 1, "", "parameter_ranges"], [62, 3, 1, "", "reset"], [62, 3, 1, "", "set_parameter_ranges"], [62, 3, 1, "", "set_parameters"], [62, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_algorithm": [[63, 1, 1, "", "PEAlgorithm"]], "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm": [[63, 2, 1, "", "attack_type"], [63, 2, 1, "", "complexity_type"], [63, 3, 1, "", "get_optimal_parameters_dict"], [63, 3, 1, "", "has_optimal_parameter"], [63, 2, 1, "", "memory_access"], [63, 3, 1, "", "memory_access_cost"], [63, 3, 1, "", "memory_complexity"], [63, 3, 1, "", "optimal_parameters"], [63, 3, 1, "", "parameter_names"], [63, 2, 1, "", "parameter_ranges"], [63, 3, 1, "", "reset"], [63, 3, 1, "", "set_parameter_ranges"], [63, 3, 1, "", "set_parameters"], [63, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_constants": [[64, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation": [[64, 4, 1, "", "LISTS_SIZE"], [64, 4, 1, "", "LIST_COMPUTATION"], [64, 4, 1, "", "NORMAL_FORM"]], "cryptographic_estimators.PEEstimator.pe_estimator": [[65, 1, 1, "", "PEEstimator"]], "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator": [[65, 3, 1, "", "algorithm_names"], [65, 3, 1, "", "algorithms"], [65, 2, 1, "", "bit_complexities"], [65, 2, 1, "", "complexity_type"], [65, 3, 1, "", "estimate"], [65, 2, 1, "", "estimator_type"], [65, 4, 1, "", "excluded_algorithms_by_default"], [65, 3, 1, "", "fastest_algorithm"], [65, 2, 1, "", "memory_access"], [65, 3, 1, "", "nalgorithms"], [65, 3, 1, "", "reset"], [65, 3, 1, "", "table"]], "cryptographic_estimators.PEEstimator.pe_helper": [[66, 5, 1, "", "gv_distance"], [66, 5, 1, "", "hamming_ball"], [66, 5, 1, "", "median_size_of_random_orbit"], [66, 5, 1, "", "number_of_weight_d_codewords"], [66, 5, 1, "", "random_sparse_vec_orbit"]], "cryptographic_estimators.PEEstimator.pe_problem": [[67, 1, 1, "", "PEProblem"]], "cryptographic_estimators.PEEstimator.pe_problem.PEProblem": [[67, 3, 1, "", "expected_number_solutions"], [67, 3, 1, "", "get_parameters"], [67, 3, 1, "", "to_bitcomplexity_memory"], [67, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PKEstimator": [[70, 0, 0, "-", "pk_algorithm"], [71, 0, 0, "-", "pk_constants"], [72, 0, 0, "-", "pk_estimator"], [73, 0, 0, "-", "pk_helper"], [74, 0, 0, "-", "pk_problem"]], "cryptographic_estimators.PKEstimator.PKAlgorithms": [[68, 0, 0, "-", "kmp"], [69, 0, 0, "-", "sbc"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp": [[68, 1, 1, "", "KMP"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP": [[68, 2, 1, "", "attack_type"], [68, 2, 1, "", "complexity_type"], [68, 3, 1, "", "get_optimal_parameters_dict"], [68, 3, 1, "", "has_optimal_parameter"], [68, 2, 1, "", "memory_access"], [68, 3, 1, "", "memory_access_cost"], [68, 3, 1, "", "memory_complexity"], [68, 3, 1, "", "optimal_parameters"], [68, 3, 1, "", "parameter_names"], [68, 2, 1, "", "parameter_ranges"], [68, 3, 1, "", "reset"], [68, 3, 1, "", "set_parameter_ranges"], [68, 3, 1, "", "set_parameters"], [68, 3, 1, "", "time_complexity"], [68, 3, 1, "", "u"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc": [[69, 1, 1, "", "SBC"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC": [[69, 2, 1, "", "attack_type"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "d"], [69, 3, 1, "", "get_optimal_parameters_dict"], [69, 3, 1, "", "has_optimal_parameter"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "memory_access_cost"], [69, 3, 1, "", "memory_complexity"], [69, 3, 1, "", "optimal_parameters"], [69, 3, 1, "", "parameter_names"], [69, 2, 1, "", "parameter_ranges"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "set_parameter_ranges"], [69, 3, 1, "", "set_parameters"], [69, 3, 1, "", "time_complexity"], [69, 3, 1, "", "w"], [69, 3, 1, "", "w1"]], "cryptographic_estimators.PKEstimator.pk_algorithm": [[70, 1, 1, "", "PKAlgorithm"]], "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm": [[70, 2, 1, "", "attack_type"], [70, 2, 1, "", "complexity_type"], [70, 3, 1, "", "get_optimal_parameters_dict"], [70, 3, 1, "", "has_optimal_parameter"], [70, 2, 1, "", "memory_access"], [70, 3, 1, "", "memory_access_cost"], [70, 3, 1, "", "memory_complexity"], [70, 3, 1, "", "optimal_parameters"], [70, 3, 1, "", "parameter_names"], [70, 2, 1, "", "parameter_ranges"], [70, 3, 1, "", "reset"], [70, 3, 1, "", "set_parameter_ranges"], [70, 3, 1, "", "set_parameters"], [70, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator.pk_constants": [[71, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation": [[71, 4, 1, "", "KMP_FINAL_LIST"], [71, 4, 1, "", "KMP_L1"], [71, 4, 1, "", "KMP_L2"], [71, 4, 1, "", "SBC_ISD"], [71, 4, 1, "", "SBC_U"]], "cryptographic_estimators.PKEstimator.pk_estimator": [[72, 1, 1, "", "PKEstimator"]], "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator": [[72, 3, 1, "", "algorithm_names"], [72, 3, 1, "", "algorithms"], [72, 2, 1, "", "bit_complexities"], [72, 2, 1, "", "complexity_type"], [72, 3, 1, "", "estimate"], [72, 2, 1, "", "estimator_type"], [72, 4, 1, "", "excluded_algorithms_by_default"], [72, 3, 1, "", "fastest_algorithm"], [72, 2, 1, "", "memory_access"], [72, 3, 1, "", "nalgorithms"], [72, 3, 1, "", "reset"], [72, 3, 1, "", "table"]], "cryptographic_estimators.PKEstimator.pk_helper": [[73, 5, 1, "", "beullens_lee_brickell_adaptation"], [73, 5, 1, "", "cost_for_finding_subcode"], [73, 5, 1, "", "gauss_binomial"], [73, 5, 1, "", "lof"]], "cryptographic_estimators.PKEstimator.pk_problem": [[74, 1, 1, "", "PKProblem"]], "cryptographic_estimators.PKEstimator.pk_problem.PKProblem": [[74, 3, 1, "", "expected_number_solutions"], [74, 3, 1, "", "get_parameters"], [74, 3, 1, "", "to_bitcomplexity_memory"], [74, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.RankSDEstimator": [[84, 0, 0, "-", "ranksd_algorithm"], [85, 0, 0, "-", "ranksd_constants"], [86, 0, 0, "-", "ranksd_estimator"], [87, 0, 0, "-", "ranksd_helper"], [88, 0, 0, "-", "ranksd_problem"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms": [[75, 0, 0, "-", "basis_enumeration"], [76, 0, 0, "-", "grs"], [77, 0, 0, "-", "guessing_enhanced_grs"], [78, 0, 0, "-", "hybrid_linearization"], [79, 0, 0, "-", "improved_grs"], [80, 0, 0, "-", "max_minors"], [81, 0, 0, "-", "ourivski_johansson_1"], [82, 0, 0, "-", "ourivski_johansson_2"], [83, 0, 0, "-", "support_minors"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration": [[75, 1, 1, "", "BasisEnumeration"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.basis_enumeration.BasisEnumeration": [[75, 2, 1, "", "attack_type"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "compute_memory_complexity_helper"], [75, 3, 1, "", "compute_time_complexity_helper"], [75, 3, 1, "", "get_optimal_parameters_dict"], [75, 3, 1, "", "get_reduced_instance_parameters"], [75, 3, 1, "", "has_optimal_parameter"], [75, 3, 1, "", "linear_algebra_constant"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "memory_access_cost"], [75, 3, 1, "", "memory_complexity"], [75, 3, 1, "", "optimal_parameters"], [75, 3, 1, "", "parameter_names"], [75, 2, 1, "", "parameter_ranges"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "set_parameter_ranges"], [75, 3, 1, "", "set_parameters"], [75, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs": [[76, 1, 1, "", "GRS"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.grs.GRS": [[76, 2, 1, "", "attack_type"], [76, 2, 1, "", "complexity_type"], [76, 3, 1, "", "compute_memory_complexity_helper"], [76, 3, 1, "", "compute_time_complexity_helper"], [76, 3, 1, "", "get_optimal_parameters_dict"], [76, 3, 1, "", "get_reduced_instance_parameters"], [76, 3, 1, "", "has_optimal_parameter"], [76, 3, 1, "", "linear_algebra_constant"], [76, 2, 1, "", "memory_access"], [76, 3, 1, "", "memory_access_cost"], [76, 3, 1, "", "memory_complexity"], [76, 3, 1, "", "optimal_parameters"], [76, 3, 1, "", "parameter_names"], [76, 2, 1, "", "parameter_ranges"], [76, 3, 1, "", "reset"], [76, 3, 1, "", "set_parameter_ranges"], [76, 3, 1, "", "set_parameters"], [76, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs": [[77, 1, 1, "", "GuessingEnhancedGRS"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.guessing_enhanced_grs.GuessingEnhancedGRS": [[77, 2, 1, "", "attack_type"], [77, 2, 1, "", "complexity_type"], [77, 3, 1, "", "compute_memory_complexity_helper"], [77, 3, 1, "", "compute_time_complexity_helper"], [77, 3, 1, "", "get_optimal_parameters_dict"], [77, 3, 1, "", "get_reduced_instance_parameters"], [77, 3, 1, "", "has_optimal_parameter"], [77, 3, 1, "", "linear_algebra_constant"], [77, 2, 1, "", "memory_access"], [77, 3, 1, "", "memory_access_cost"], [77, 3, 1, "", "memory_complexity"], [77, 3, 1, "", "optimal_parameters"], [77, 3, 1, "", "parameter_names"], [77, 2, 1, "", "parameter_ranges"], [77, 3, 1, "", "reset"], [77, 3, 1, "", "set_parameter_ranges"], [77, 3, 1, "", "set_parameters"], [77, 3, 1, "", "t"], [77, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization": [[78, 1, 1, "", "HybridLinearization"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.hybrid_linearization.HybridLinearization": [[78, 2, 1, "", "attack_type"], [78, 2, 1, "", "complexity_type"], [78, 3, 1, "", "compute_memory_complexity_helper"], [78, 3, 1, "", "compute_time_complexity_helper"], [78, 3, 1, "", "get_optimal_parameters_dict"], [78, 3, 1, "", "get_reduced_instance_parameters"], [78, 3, 1, "", "has_optimal_parameter"], [78, 3, 1, "", "linear_algebra_constant"], [78, 2, 1, "", "memory_access"], [78, 3, 1, "", "memory_access_cost"], [78, 3, 1, "", "memory_complexity"], [78, 3, 1, "", "optimal_parameters"], [78, 3, 1, "", "parameter_names"], [78, 2, 1, "", "parameter_ranges"], [78, 3, 1, "", "reset"], [78, 3, 1, "", "set_parameter_ranges"], [78, 3, 1, "", "set_parameters"], [78, 3, 1, "", "t"], [78, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs": [[79, 1, 1, "", "ImprovedGRS"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.improved_grs.ImprovedGRS": [[79, 2, 1, "", "attack_type"], [79, 2, 1, "", "complexity_type"], [79, 3, 1, "", "compute_memory_complexity_helper"], [79, 3, 1, "", "compute_time_complexity_helper"], [79, 3, 1, "", "get_optimal_parameters_dict"], [79, 3, 1, "", "get_reduced_instance_parameters"], [79, 3, 1, "", "has_optimal_parameter"], [79, 3, 1, "", "linear_algebra_constant"], [79, 2, 1, "", "memory_access"], [79, 3, 1, "", "memory_access_cost"], [79, 3, 1, "", "memory_complexity"], [79, 3, 1, "", "optimal_parameters"], [79, 3, 1, "", "parameter_names"], [79, 2, 1, "", "parameter_ranges"], [79, 3, 1, "", "reset"], [79, 3, 1, "", "set_parameter_ranges"], [79, 3, 1, "", "set_parameters"], [79, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors": [[80, 1, 1, "", "MaxMinors"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.max_minors.MaxMinors": [[80, 3, 1, "", "a"], [80, 2, 1, "", "attack_type"], [80, 2, 1, "", "complexity_type"], [80, 3, 1, "", "compute_memory_complexity_helper"], [80, 3, 1, "", "compute_time_complexity_helper"], [80, 3, 1, "", "get_optimal_parameters_dict"], [80, 3, 1, "", "get_reduced_instance_parameters"], [80, 3, 1, "", "has_optimal_parameter"], [80, 3, 1, "", "linear_algebra_constant"], [80, 2, 1, "", "memory_access"], [80, 3, 1, "", "memory_access_cost"], [80, 3, 1, "", "memory_complexity"], [80, 3, 1, "", "optimal_parameters"], [80, 3, 1, "", "p"], [80, 3, 1, "", "parameter_names"], [80, 2, 1, "", "parameter_ranges"], [80, 3, 1, "", "reset"], [80, 3, 1, "", "set_parameter_ranges"], [80, 3, 1, "", "set_parameters"], [80, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1": [[81, 1, 1, "", "OJ1"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_1.OJ1": [[81, 2, 1, "", "attack_type"], [81, 2, 1, "", "complexity_type"], [81, 3, 1, "", "compute_memory_complexity_helper"], [81, 3, 1, "", "compute_time_complexity_helper"], [81, 3, 1, "", "get_optimal_parameters_dict"], [81, 3, 1, "", "get_reduced_instance_parameters"], [81, 3, 1, "", "has_optimal_parameter"], [81, 3, 1, "", "linear_algebra_constant"], [81, 2, 1, "", "memory_access"], [81, 3, 1, "", "memory_access_cost"], [81, 3, 1, "", "memory_complexity"], [81, 3, 1, "", "optimal_parameters"], [81, 3, 1, "", "parameter_names"], [81, 2, 1, "", "parameter_ranges"], [81, 3, 1, "", "reset"], [81, 3, 1, "", "set_parameter_ranges"], [81, 3, 1, "", "set_parameters"], [81, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2": [[82, 1, 1, "", "OJ2"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.ourivski_johansson_2.OJ2": [[82, 2, 1, "", "attack_type"], [82, 2, 1, "", "complexity_type"], [82, 3, 1, "", "compute_memory_complexity_helper"], [82, 3, 1, "", "compute_time_complexity_helper"], [82, 3, 1, "", "get_optimal_parameters_dict"], [82, 3, 1, "", "get_reduced_instance_parameters"], [82, 3, 1, "", "has_optimal_parameter"], [82, 3, 1, "", "linear_algebra_constant"], [82, 2, 1, "", "memory_access"], [82, 3, 1, "", "memory_access_cost"], [82, 3, 1, "", "memory_complexity"], [82, 3, 1, "", "optimal_parameters"], [82, 3, 1, "", "parameter_names"], [82, 2, 1, "", "parameter_ranges"], [82, 3, 1, "", "reset"], [82, 3, 1, "", "set_parameter_ranges"], [82, 3, 1, "", "set_parameters"], [82, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors": [[83, 1, 1, "", "SupportMinors"]], "cryptographic_estimators.RankSDEstimator.RankSDAlgorithms.support_minors.SupportMinors": [[83, 3, 1, "", "a"], [83, 2, 1, "", "attack_type"], [83, 3, 1, "", "b"], [83, 2, 1, "", "complexity_type"], [83, 3, 1, "", "compute_memory_complexity_helper"], [83, 3, 1, "", "compute_time_complexity_helper"], [83, 3, 1, "", "get_optimal_parameters_dict"], [83, 3, 1, "", "get_reduced_instance_parameters"], [83, 3, 1, "", "has_optimal_parameter"], [83, 3, 1, "", "linear_algebra_constant"], [83, 2, 1, "", "memory_access"], [83, 3, 1, "", "memory_access_cost"], [83, 3, 1, "", "memory_complexity"], [83, 3, 1, "", "optimal_parameters"], [83, 3, 1, "", "p"], [83, 3, 1, "", "parameter_names"], [83, 2, 1, "", "parameter_ranges"], [83, 3, 1, "", "reset"], [83, 3, 1, "", "set_parameter_ranges"], [83, 3, 1, "", "set_parameters"], [83, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.ranksd_algorithm": [[84, 1, 1, "", "RankSDAlgorithm"]], "cryptographic_estimators.RankSDEstimator.ranksd_algorithm.RankSDAlgorithm": [[84, 2, 1, "", "attack_type"], [84, 2, 1, "", "complexity_type"], [84, 3, 1, "", "compute_memory_complexity_helper"], [84, 3, 1, "", "compute_time_complexity_helper"], [84, 3, 1, "", "get_optimal_parameters_dict"], [84, 3, 1, "", "get_reduced_instance_parameters"], [84, 3, 1, "", "has_optimal_parameter"], [84, 3, 1, "", "linear_algebra_constant"], [84, 2, 1, "", "memory_access"], [84, 3, 1, "", "memory_access_cost"], [84, 3, 1, "", "memory_complexity"], [84, 3, 1, "", "optimal_parameters"], [84, 3, 1, "", "parameter_names"], [84, 2, 1, "", "parameter_ranges"], [84, 3, 1, "", "reset"], [84, 3, 1, "", "set_parameter_ranges"], [84, 3, 1, "", "set_parameters"], [84, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RankSDEstimator.ranksd_estimator": [[86, 1, 1, "", "RankSDEstimator"]], "cryptographic_estimators.RankSDEstimator.ranksd_estimator.RankSDEstimator": [[86, 3, 1, "", "algorithm_names"], [86, 3, 1, "", "algorithms"], [86, 2, 1, "", "bit_complexities"], [86, 2, 1, "", "complexity_type"], [86, 3, 1, "", "estimate"], [86, 2, 1, "", "estimator_type"], [86, 4, 1, "", "excluded_algorithms_by_default"], [86, 3, 1, "", "fastest_algorithm"], [86, 2, 1, "", "memory_access"], [86, 3, 1, "", "nalgorithms"], [86, 3, 1, "", "reset"], [86, 3, 1, "", "table"]], "cryptographic_estimators.RankSDEstimator.ranksd_helper": [[87, 5, 1, "", "compute_mb"], [87, 5, 1, "", "compute_nb"], [87, 5, 1, "", "find_b_sm_fqm"], [87, 5, 1, "", "find_best_choice_param_mm"], [87, 5, 1, "", "find_p_sm_fqm"], [87, 5, 1, "", "find_valid_choices_param_sm_fqm"], [87, 5, 1, "", "nb_fq_syz"], [87, 5, 1, "", "nb_fqm"]], "cryptographic_estimators.RankSDEstimator.ranksd_problem": [[88, 1, 1, "", "RankSDProblem"]], "cryptographic_estimators.RankSDEstimator.ranksd_problem.RankSDProblem": [[88, 3, 1, "", "base_field_order"], [88, 3, 1, "", "code_dimension"], [88, 3, 1, "", "code_length"], [88, 3, 1, "", "degree_extension"], [88, 3, 1, "", "expected_number_solutions"], [88, 3, 1, "", "get_parameters"], [88, 3, 1, "", "set_operations_on_base_field"], [88, 3, 1, "", "target_rank"], [88, 2, 1, "", "theta"], [88, 3, 1, "", "to_bitcomplexity_memory"], [88, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.RegSDEstimator": [[95, 0, 0, "-", "regsd_algorithm"], [96, 0, 0, "-", "regsd_constants"], [97, 0, 0, "-", "regsd_estimator"], [98, 0, 0, "-", "regsd_helper"], [99, 0, 0, "-", "regsd_problem"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms": [[89, 0, 0, "-", "ccj"], [90, 0, 0, "-", "ccj_lin"], [91, 0, 0, "-", "regisd_enum"], [92, 0, 0, "-", "regisd_perm"], [93, 0, 0, "-", "regisd_rep"], [94, 0, 0, "-", "sd_attack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj": [[89, 1, 1, "", "CCJ"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ": [[89, 2, 1, "", "attack_type"], [89, 2, 1, "", "complexity_type"], [89, 3, 1, "", "ell"], [89, 3, 1, "", "get_optimal_parameters_dict"], [89, 3, 1, "", "has_optimal_parameter"], [89, 2, 1, "", "memory_access"], [89, 3, 1, "", "memory_access_cost"], [89, 3, 1, "", "memory_complexity"], [89, 3, 1, "", "optimal_parameters"], [89, 3, 1, "", "parameter_names"], [89, 2, 1, "", "parameter_ranges"], [89, 3, 1, "", "reset"], [89, 3, 1, "", "set_parameter_ranges"], [89, 3, 1, "", "set_parameters"], [89, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin": [[90, 1, 1, "", "CCJLin"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin": [[90, 2, 1, "", "attack_type"], [90, 2, 1, "", "complexity_type"], [90, 3, 1, "", "get_optimal_parameters_dict"], [90, 3, 1, "", "has_optimal_parameter"], [90, 2, 1, "", "memory_access"], [90, 3, 1, "", "memory_access_cost"], [90, 3, 1, "", "memory_complexity"], [90, 3, 1, "", "optimal_parameters"], [90, 3, 1, "", "parameter_names"], [90, 2, 1, "", "parameter_ranges"], [90, 3, 1, "", "reset"], [90, 3, 1, "", "set_parameter_ranges"], [90, 3, 1, "", "set_parameters"], [90, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum": [[91, 1, 1, "", "RegularISDEnum"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum": [[91, 2, 1, "", "attack_type"], [91, 2, 1, "", "complexity_type"], [91, 3, 1, "", "ell"], [91, 3, 1, "", "get_optimal_parameters_dict"], [91, 3, 1, "", "has_optimal_parameter"], [91, 2, 1, "", "memory_access"], [91, 3, 1, "", "memory_access_cost"], [91, 3, 1, "", "memory_complexity"], [91, 3, 1, "", "optimal_parameters"], [91, 3, 1, "", "p"], [91, 3, 1, "", "parameter_names"], [91, 2, 1, "", "parameter_ranges"], [91, 3, 1, "", "reset"], [91, 3, 1, "", "set_parameter_ranges"], [91, 3, 1, "", "set_parameters"], [91, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm": [[92, 1, 1, "", "RegularISDPerm"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm": [[92, 2, 1, "", "attack_type"], [92, 2, 1, "", "complexity_type"], [92, 3, 1, "", "get_optimal_parameters_dict"], [92, 3, 1, "", "has_optimal_parameter"], [92, 2, 1, "", "memory_access"], [92, 3, 1, "", "memory_access_cost"], [92, 3, 1, "", "memory_complexity"], [92, 3, 1, "", "optimal_parameters"], [92, 3, 1, "", "parameter_names"], [92, 2, 1, "", "parameter_ranges"], [92, 3, 1, "", "reset"], [92, 3, 1, "", "set_parameter_ranges"], [92, 3, 1, "", "set_parameters"], [92, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep": [[93, 1, 1, "", "RegularISDRep"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep": [[93, 2, 1, "", "attack_type"], [93, 2, 1, "", "complexity_type"], [93, 3, 1, "", "ell"], [93, 3, 1, "", "eps_x"], [93, 3, 1, "", "eps_y"], [93, 3, 1, "", "get_optimal_parameters_dict"], [93, 3, 1, "", "has_optimal_parameter"], [93, 2, 1, "", "memory_access"], [93, 3, 1, "", "memory_access_cost"], [93, 3, 1, "", "memory_complexity"], [93, 3, 1, "", "optimal_parameters"], [93, 3, 1, "", "p"], [93, 3, 1, "", "parameter_names"], [93, 2, 1, "", "parameter_ranges"], [93, 3, 1, "", "reset"], [93, 3, 1, "", "set_parameter_ranges"], [93, 3, 1, "", "set_parameters"], [93, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack": [[94, 1, 1, "", "SDAttack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack": [[94, 2, 1, "", "attack_type"], [94, 2, 1, "", "complexity_type"], [94, 3, 1, "", "get_optimal_parameters_dict"], [94, 3, 1, "", "has_optimal_parameter"], [94, 2, 1, "", "memory_access"], [94, 3, 1, "", "memory_access_cost"], [94, 3, 1, "", "memory_complexity"], [94, 3, 1, "", "optimal_parameters"], [94, 3, 1, "", "parameter_names"], [94, 2, 1, "", "parameter_ranges"], [94, 3, 1, "", "reset"], [94, 3, 1, "", "set_parameter_ranges"], [94, 3, 1, "", "set_parameters"], [94, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm": [[95, 1, 1, "", "RegSDAlgorithm"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm": [[95, 2, 1, "", "attack_type"], [95, 2, 1, "", "complexity_type"], [95, 3, 1, "", "get_optimal_parameters_dict"], [95, 3, 1, "", "has_optimal_parameter"], [95, 2, 1, "", "memory_access"], [95, 3, 1, "", "memory_access_cost"], [95, 3, 1, "", "memory_complexity"], [95, 3, 1, "", "optimal_parameters"], [95, 3, 1, "", "parameter_names"], [95, 2, 1, "", "parameter_ranges"], [95, 3, 1, "", "reset"], [95, 3, 1, "", "set_parameter_ranges"], [95, 3, 1, "", "set_parameters"], [95, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator": [[97, 1, 1, "", "RegSDEstimator"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator": [[97, 3, 1, "", "algorithm_names"], [97, 3, 1, "", "algorithms"], [97, 2, 1, "", "bit_complexities"], [97, 2, 1, "", "complexity_type"], [97, 3, 1, "", "estimate"], [97, 2, 1, "", "estimator_type"], [97, 4, 1, "", "excluded_algorithms_by_default"], [97, 3, 1, "", "fastest_algorithm"], [97, 2, 1, "", "memory_access"], [97, 3, 1, "", "nalgorithms"], [97, 3, 1, "", "reset"], [97, 3, 1, "", "table"]], "cryptographic_estimators.RegSDEstimator.regsd_helper": [[98, 5, 1, "", "r_int"]], "cryptographic_estimators.RegSDEstimator.regsd_problem": [[99, 1, 1, "", "RegSDProblem"]], "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem": [[99, 3, 1, "", "expected_number_solutions"], [99, 3, 1, "", "get_parameters"], [99, 3, 1, "", "to_bitcomplexity_memory"], [99, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDEstimator": [[118, 0, 0, "-", "sd_algorithm"], [119, 0, 0, "-", "sd_constants"], [120, 0, 0, "-", "sd_estimator"], [121, 0, 0, "-", "sd_helper"], [122, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[100, 0, 0, "-", "ball_collision"], [101, 0, 0, "-", "bjmm"], [102, 0, 0, "-", "bjmm_dw"], [103, 0, 0, "-", "bjmm_pdw"], [104, 0, 0, "-", "bjmm_plus"], [105, 0, 0, "-", "both_may"], [106, 0, 0, "-", "dumer"], [107, 0, 0, "-", "may_ozerov"], [108, 0, 0, "-", "prange"], [109, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[100, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[100, 2, 1, "", "attack_type"], [100, 2, 1, "", "complexity_type"], [100, 3, 1, "", "get_optimal_parameters_dict"], [100, 3, 1, "", "has_optimal_parameter"], [100, 3, 1, "", "l"], [100, 2, 1, "", "memory_access"], [100, 3, 1, "", "memory_access_cost"], [100, 3, 1, "", "memory_complexity"], [100, 3, 1, "", "optimal_parameters"], [100, 3, 1, "", "p"], [100, 3, 1, "", "parameter_names"], [100, 2, 1, "", "parameter_ranges"], [100, 3, 1, "", "pl"], [100, 3, 1, "", "r"], [100, 3, 1, "", "reset"], [100, 3, 1, "", "set_parameter_ranges"], [100, 3, 1, "", "set_parameters"], [100, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[101, 1, 1, "", "BJMM"], [101, 1, 1, "", "BJMMd2"], [101, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[101, 2, 1, "", "attack_type"], [101, 2, 1, "", "complexity_type"], [101, 3, 1, "", "depth"], [101, 3, 1, "", "get_optimal_parameters_dict"], [101, 3, 1, "", "has_optimal_parameter"], [101, 3, 1, "", "initialize_parameter_ranges"], [101, 2, 1, "", "memory_access"], [101, 3, 1, "", "memory_access_cost"], [101, 3, 1, "", "memory_complexity"], [101, 3, 1, "", "optimal_parameters"], [101, 3, 1, "", "parameter_names"], [101, 2, 1, "", "parameter_ranges"], [101, 3, 1, "", "r"], [101, 3, 1, "", "reset"], [101, 3, 1, "", "set_parameter_ranges"], [101, 3, 1, "", "set_parameters"], [101, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[101, 2, 1, "", "attack_type"], [101, 2, 1, "", "complexity_type"], [101, 3, 1, "", "get_optimal_parameters_dict"], [101, 3, 1, "", "has_optimal_parameter"], [101, 3, 1, "", "initialize_parameter_ranges"], [101, 3, 1, "", "l"], [101, 2, 1, "", "memory_access"], [101, 3, 1, "", "memory_access_cost"], [101, 3, 1, "", "memory_complexity"], [101, 3, 1, "", "optimal_parameters"], [101, 3, 1, "", "p"], [101, 3, 1, "", "p1"], [101, 3, 1, "", "parameter_names"], [101, 2, 1, "", "parameter_ranges"], [101, 3, 1, "", "r"], [101, 3, 1, "", "reset"], [101, 3, 1, "", "set_parameter_ranges"], [101, 3, 1, "", "set_parameters"], [101, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[101, 2, 1, "", "attack_type"], [101, 2, 1, "", "complexity_type"], [101, 3, 1, "", "get_optimal_parameters_dict"], [101, 3, 1, "", "has_optimal_parameter"], [101, 3, 1, "", "initialize_parameter_ranges"], [101, 3, 1, "", "l"], [101, 2, 1, "", "memory_access"], [101, 3, 1, "", "memory_access_cost"], [101, 3, 1, "", "memory_complexity"], [101, 3, 1, "", "optimal_parameters"], [101, 3, 1, "", "p"], [101, 3, 1, "", "p1"], [101, 3, 1, "", "p2"], [101, 3, 1, "", "parameter_names"], [101, 2, 1, "", "parameter_ranges"], [101, 3, 1, "", "r"], [101, 3, 1, "", "reset"], [101, 3, 1, "", "set_parameter_ranges"], [101, 3, 1, "", "set_parameters"], [101, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[102, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[102, 2, 1, "", "attack_type"], [102, 2, 1, "", "complexity_type"], [102, 3, 1, "", "get_optimal_parameters_dict"], [102, 3, 1, "", "has_optimal_parameter"], [102, 3, 1, "", "initialize_parameter_ranges"], [102, 2, 1, "", "memory_access"], [102, 3, 1, "", "memory_access_cost"], [102, 3, 1, "", "memory_complexity"], [102, 3, 1, "", "optimal_parameters"], [102, 3, 1, "", "p"], [102, 3, 1, "", "p1"], [102, 3, 1, "", "parameter_names"], [102, 2, 1, "", "parameter_ranges"], [102, 3, 1, "", "r"], [102, 3, 1, "", "reset"], [102, 3, 1, "", "set_parameter_ranges"], [102, 3, 1, "", "set_parameters"], [102, 3, 1, "", "time_complexity"], [102, 3, 1, "", "w1"], [102, 3, 1, "", "w11"], [102, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[103, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[103, 2, 1, "", "attack_type"], [103, 2, 1, "", "complexity_type"], [103, 3, 1, "", "get_optimal_parameters_dict"], [103, 3, 1, "", "has_optimal_parameter"], [103, 3, 1, "", "initialize_parameter_ranges"], [103, 2, 1, "", "memory_access"], [103, 3, 1, "", "memory_access_cost"], [103, 3, 1, "", "memory_complexity"], [103, 3, 1, "", "optimal_parameters"], [103, 3, 1, "", "p"], [103, 3, 1, "", "p1"], [103, 3, 1, "", "parameter_names"], [103, 2, 1, "", "parameter_ranges"], [103, 3, 1, "", "r"], [103, 3, 1, "", "reset"], [103, 3, 1, "", "set_parameter_ranges"], [103, 3, 1, "", "set_parameters"], [103, 3, 1, "", "time_complexity"], [103, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus": [[104, 1, 1, "", "BJMMplus"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus": [[104, 2, 1, "", "attack_type"], [104, 2, 1, "", "complexity_type"], [104, 3, 1, "", "get_optimal_parameters_dict"], [104, 3, 1, "", "has_optimal_parameter"], [104, 3, 1, "", "initialize_parameter_ranges"], [104, 3, 1, "", "l"], [104, 3, 1, "", "l1"], [104, 2, 1, "", "memory_access"], [104, 3, 1, "", "memory_access_cost"], [104, 3, 1, "", "memory_complexity"], [104, 3, 1, "", "optimal_parameters"], [104, 3, 1, "", "p"], [104, 3, 1, "", "p1"], [104, 3, 1, "", "parameter_names"], [104, 2, 1, "", "parameter_ranges"], [104, 3, 1, "", "r"], [104, 3, 1, "", "reset"], [104, 3, 1, "", "set_parameter_ranges"], [104, 3, 1, "", "set_parameters"], [104, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[105, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[105, 2, 1, "", "attack_type"], [105, 2, 1, "", "complexity_type"], [105, 3, 1, "", "get_optimal_parameters_dict"], [105, 3, 1, "", "has_optimal_parameter"], [105, 3, 1, "", "initialize_parameter_ranges"], [105, 3, 1, "", "l"], [105, 2, 1, "", "memory_access"], [105, 3, 1, "", "memory_access_cost"], [105, 3, 1, "", "memory_complexity"], [105, 3, 1, "", "optimal_parameters"], [105, 3, 1, "", "p"], [105, 3, 1, "", "p1"], [105, 3, 1, "", "parameter_names"], [105, 2, 1, "", "parameter_ranges"], [105, 3, 1, "", "r"], [105, 3, 1, "", "reset"], [105, 3, 1, "", "set_parameter_ranges"], [105, 3, 1, "", "set_parameters"], [105, 3, 1, "", "time_complexity"], [105, 3, 1, "", "w1"], [105, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[106, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[106, 2, 1, "", "attack_type"], [106, 2, 1, "", "complexity_type"], [106, 3, 1, "", "get_optimal_parameters_dict"], [106, 3, 1, "", "has_optimal_parameter"], [106, 3, 1, "", "initialize_parameter_ranges"], [106, 3, 1, "", "l"], [106, 2, 1, "", "memory_access"], [106, 3, 1, "", "memory_access_cost"], [106, 3, 1, "", "memory_complexity"], [106, 3, 1, "", "optimal_parameters"], [106, 3, 1, "", "p"], [106, 3, 1, "", "parameter_names"], [106, 2, 1, "", "parameter_ranges"], [106, 3, 1, "", "r"], [106, 3, 1, "", "reset"], [106, 3, 1, "", "set_parameter_ranges"], [106, 3, 1, "", "set_parameters"], [106, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[107, 1, 1, "", "MayOzerov"], [107, 1, 1, "", "MayOzerovD2"], [107, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[107, 2, 1, "", "attack_type"], [107, 2, 1, "", "complexity_type"], [107, 3, 1, "", "depth"], [107, 3, 1, "", "get_optimal_parameters_dict"], [107, 3, 1, "", "has_optimal_parameter"], [107, 3, 1, "", "initialize_parameter_ranges"], [107, 2, 1, "", "memory_access"], [107, 3, 1, "", "memory_access_cost"], [107, 3, 1, "", "memory_complexity"], [107, 3, 1, "", "optimal_parameters"], [107, 3, 1, "", "parameter_names"], [107, 2, 1, "", "parameter_ranges"], [107, 3, 1, "", "r"], [107, 3, 1, "", "reset"], [107, 3, 1, "", "set_parameter_ranges"], [107, 3, 1, "", "set_parameters"], [107, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[107, 2, 1, "", "attack_type"], [107, 2, 1, "", "complexity_type"], [107, 3, 1, "", "get_optimal_parameters_dict"], [107, 3, 1, "", "has_optimal_parameter"], [107, 3, 1, "", "initialize_parameter_ranges"], [107, 3, 1, "", "l"], [107, 2, 1, "", "memory_access"], [107, 3, 1, "", "memory_access_cost"], [107, 3, 1, "", "memory_complexity"], [107, 3, 1, "", "optimal_parameters"], [107, 3, 1, "", "p"], [107, 3, 1, "", "p1"], [107, 3, 1, "", "parameter_names"], [107, 2, 1, "", "parameter_ranges"], [107, 3, 1, "", "r"], [107, 3, 1, "", "reset"], [107, 3, 1, "", "set_parameter_ranges"], [107, 3, 1, "", "set_parameters"], [107, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[107, 2, 1, "", "attack_type"], [107, 2, 1, "", "complexity_type"], [107, 3, 1, "", "get_optimal_parameters_dict"], [107, 3, 1, "", "has_optimal_parameter"], [107, 3, 1, "", "initialize_parameter_ranges"], [107, 3, 1, "", "l"], [107, 2, 1, "", "memory_access"], [107, 3, 1, "", "memory_access_cost"], [107, 3, 1, "", "memory_complexity"], [107, 3, 1, "", "optimal_parameters"], [107, 3, 1, "", "p"], [107, 3, 1, "", "p1"], [107, 3, 1, "", "p2"], [107, 3, 1, "", "parameter_names"], [107, 2, 1, "", "parameter_ranges"], [107, 3, 1, "", "r"], [107, 3, 1, "", "reset"], [107, 3, 1, "", "set_parameter_ranges"], [107, 3, 1, "", "set_parameters"], [107, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[108, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[108, 2, 1, "", "attack_type"], [108, 2, 1, "", "complexity_type"], [108, 3, 1, "", "get_optimal_parameters_dict"], [108, 3, 1, "", "has_optimal_parameter"], [108, 2, 1, "", "memory_access"], [108, 3, 1, "", "memory_access_cost"], [108, 3, 1, "", "memory_complexity"], [108, 3, 1, "", "optimal_parameters"], [108, 3, 1, "", "parameter_names"], [108, 2, 1, "", "parameter_ranges"], [108, 3, 1, "", "r"], [108, 3, 1, "", "reset"], [108, 3, 1, "", "set_parameter_ranges"], [108, 3, 1, "", "set_parameters"], [108, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[109, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[109, 2, 1, "", "attack_type"], [109, 2, 1, "", "complexity_type"], [109, 3, 1, "", "get_optimal_parameters_dict"], [109, 3, 1, "", "has_optimal_parameter"], [109, 3, 1, "", "initialize_parameter_ranges"], [109, 3, 1, "", "l"], [109, 2, 1, "", "memory_access"], [109, 3, 1, "", "memory_access_cost"], [109, 3, 1, "", "memory_complexity"], [109, 3, 1, "", "optimal_parameters"], [109, 3, 1, "", "p"], [109, 3, 1, "", "parameter_names"], [109, 2, 1, "", "parameter_ranges"], [109, 3, 1, "", "r"], [109, 3, 1, "", "reset"], [109, 3, 1, "", "set_parameter_ranges"], [109, 3, 1, "", "set_parameters"], [109, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[110, 0, 0, "-", "ball_collision"], [111, 0, 0, "-", "bjmm"], [112, 0, 0, "-", "both_may"], [113, 0, 0, "-", "dumer"], [114, 0, 0, "-", "may_ozerov"], [115, 0, 0, "-", "prange"], [116, 0, 0, "-", "stern"], [117, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[110, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[110, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[111, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[111, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[112, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[112, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[113, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[113, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[114, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[114, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[115, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[115, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[116, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[116, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[117, 5, 1, "", "binary_entropy"], [117, 5, 1, "", "binomial_approximation"], [117, 5, 1, "", "inverse_binary_entropy"], [117, 5, 1, "", "list_of_random_tuples"], [117, 5, 1, "", "may_ozerov_near_neighbor_time"], [117, 5, 1, "", "representations_asymptotic"], [117, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[118, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[118, 2, 1, "", "attack_type"], [118, 2, 1, "", "complexity_type"], [118, 3, 1, "", "get_optimal_parameters_dict"], [118, 3, 1, "", "has_optimal_parameter"], [118, 2, 1, "", "memory_access"], [118, 3, 1, "", "memory_access_cost"], [118, 3, 1, "", "memory_complexity"], [118, 3, 1, "", "optimal_parameters"], [118, 3, 1, "", "parameter_names"], [118, 2, 1, "", "parameter_ranges"], [118, 3, 1, "", "r"], [118, 3, 1, "", "reset"], [118, 3, 1, "", "set_parameter_ranges"], [118, 3, 1, "", "set_parameters"], [118, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[119, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[119, 4, 1, "", "CONSTRAINTS"], [119, 4, 1, "", "GAUSS"], [119, 4, 1, "", "LISTS"], [119, 4, 1, "", "PERMUTATIONS"], [119, 4, 1, "", "REPRESENTATIONS"], [119, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[120, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[120, 3, 1, "", "algorithm_names"], [120, 3, 1, "", "algorithms"], [120, 2, 1, "", "bit_complexities"], [120, 2, 1, "", "complexity_type"], [120, 3, 1, "", "estimate"], [120, 2, 1, "", "estimator_type"], [120, 4, 1, "", "excluded_algorithms_by_default"], [120, 3, 1, "", "fastest_algorithm"], [120, 2, 1, "", "memory_access"], [120, 3, 1, "", "nalgorithms"], [120, 3, 1, "", "reset"], [120, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[121, 5, 1, "", "binom"], [121, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[122, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[122, 3, 1, "", "expected_number_solutions"], [122, 3, 1, "", "get_parameters"], [122, 3, 1, "", "to_bitcomplexity_memory"], [122, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDFqEstimator": [[126, 0, 0, "-", "sdfq_algorithm"], [127, 0, 0, "-", "sdfq_constants"], [128, 0, 0, "-", "sdfq_estimator"], [129, 0, 0, "-", "sdfq_helper"], [130, 0, 0, "-", "sdfq_problem"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms": [[123, 0, 0, "-", "leebrickell"], [124, 0, 0, "-", "prange"], [125, 0, 0, "-", "stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell": [[123, 1, 1, "", "LeeBrickell"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell": [[123, 2, 1, "", "attack_type"], [123, 2, 1, "", "complexity_type"], [123, 3, 1, "", "get_optimal_parameters_dict"], [123, 3, 1, "", "has_optimal_parameter"], [123, 2, 1, "", "memory_access"], [123, 3, 1, "", "memory_access_cost"], [123, 3, 1, "", "memory_complexity"], [123, 3, 1, "", "optimal_parameters"], [123, 3, 1, "", "p"], [123, 3, 1, "", "parameter_names"], [123, 2, 1, "", "parameter_ranges"], [123, 3, 1, "", "reset"], [123, 3, 1, "", "set_parameter_ranges"], [123, 3, 1, "", "set_parameters"], [123, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange": [[124, 1, 1, "", "Prange"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange": [[124, 2, 1, "", "attack_type"], [124, 2, 1, "", "complexity_type"], [124, 3, 1, "", "get_optimal_parameters_dict"], [124, 3, 1, "", "has_optimal_parameter"], [124, 2, 1, "", "memory_access"], [124, 3, 1, "", "memory_access_cost"], [124, 3, 1, "", "memory_complexity"], [124, 3, 1, "", "optimal_parameters"], [124, 3, 1, "", "parameter_names"], [124, 2, 1, "", "parameter_ranges"], [124, 3, 1, "", "reset"], [124, 3, 1, "", "set_parameter_ranges"], [124, 3, 1, "", "set_parameters"], [124, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern": [[125, 1, 1, "", "Stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern": [[125, 2, 1, "", "attack_type"], [125, 2, 1, "", "complexity_type"], [125, 3, 1, "", "get_optimal_parameters_dict"], [125, 3, 1, "", "has_optimal_parameter"], [125, 3, 1, "", "l"], [125, 2, 1, "", "memory_access"], [125, 3, 1, "", "memory_access_cost"], [125, 3, 1, "", "memory_complexity"], [125, 3, 1, "", "optimal_parameters"], [125, 3, 1, "", "p"], [125, 3, 1, "", "parameter_names"], [125, 2, 1, "", "parameter_ranges"], [125, 3, 1, "", "reset"], [125, 3, 1, "", "set_parameter_ranges"], [125, 3, 1, "", "set_parameters"], [125, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm": [[126, 1, 1, "", "SDFqAlgorithm"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm": [[126, 2, 1, "", "attack_type"], [126, 2, 1, "", "complexity_type"], [126, 3, 1, "", "get_optimal_parameters_dict"], [126, 3, 1, "", "has_optimal_parameter"], [126, 2, 1, "", "memory_access"], [126, 3, 1, "", "memory_access_cost"], [126, 3, 1, "", "memory_complexity"], [126, 3, 1, "", "optimal_parameters"], [126, 3, 1, "", "parameter_names"], [126, 2, 1, "", "parameter_ranges"], [126, 3, 1, "", "reset"], [126, 3, 1, "", "set_parameter_ranges"], [126, 3, 1, "", "set_parameters"], [126, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants": [[127, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation": [[127, 4, 1, "", "CONSTRAINTS"], [127, 4, 1, "", "GAUSS"], [127, 4, 1, "", "LISTS"], [127, 4, 1, "", "PERMUTATIONS"], [127, 4, 1, "", "REPRESENTATIONS"], [127, 4, 1, "", "TREE"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator": [[128, 1, 1, "", "SDFqEstimator"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator": [[128, 3, 1, "", "algorithm_names"], [128, 3, 1, "", "algorithms"], [128, 2, 1, "", "bit_complexities"], [128, 2, 1, "", "complexity_type"], [128, 3, 1, "", "estimate"], [128, 2, 1, "", "estimator_type"], [128, 4, 1, "", "excluded_algorithms_by_default"], [128, 3, 1, "", "fastest_algorithm"], [128, 2, 1, "", "memory_access"], [128, 3, 1, "", "nalgorithms"], [128, 3, 1, "", "reset"], [128, 3, 1, "", "table"]], "cryptographic_estimators.SDFqEstimator.sdfq_helper": [[129, 5, 1, "", "binom"], [129, 5, 1, "", "min_max"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem": [[130, 1, 1, "", "SDFqProblem"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem": [[130, 3, 1, "", "expected_number_solutions"], [130, 3, 1, "", "get_parameters"], [130, 3, 1, "", "to_bitcomplexity_memory"], [130, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.UOVEstimator": [[135, 0, 0, "-", "uov_algorithm"], [136, 0, 0, "-", "uov_constants"], [137, 0, 0, "-", "uov_estimator"], [138, 0, 0, "-", "uov_problem"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms": [[131, 0, 0, "-", "collision_attack"], [132, 0, 0, "-", "direct_attack"], [133, 0, 0, "-", "intersection_attack"], [134, 0, 0, "-", "kipnis_shamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack": [[131, 1, 1, "", "CollisionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack": [[131, 3, 1, "", "X"], [131, 3, 1, "", "Y"], [131, 2, 1, "", "attack_type"], [131, 2, 1, "", "complexity_type"], [131, 3, 1, "", "get_optimal_parameters_dict"], [131, 3, 1, "", "has_optimal_parameter"], [131, 3, 1, "", "linear_algebra_constant"], [131, 2, 1, "", "memory_access"], [131, 3, 1, "", "memory_access_cost"], [131, 3, 1, "", "memory_complexity"], [131, 3, 1, "", "optimal_parameters"], [131, 3, 1, "", "parameter_names"], [131, 2, 1, "", "parameter_ranges"], [131, 3, 1, "", "reset"], [131, 3, 1, "", "set_parameter_ranges"], [131, 3, 1, "", "set_parameters"], [131, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack": [[132, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack": [[132, 2, 1, "", "attack_type"], [132, 2, 1, "", "complexity_type"], [132, 3, 1, "", "get_fastest_mq_algorithm"], [132, 3, 1, "", "get_optimal_parameters_dict"], [132, 3, 1, "", "has_optimal_parameter"], [132, 3, 1, "", "linear_algebra_constant"], [132, 2, 1, "", "memory_access"], [132, 3, 1, "", "memory_access_cost"], [132, 3, 1, "", "memory_complexity"], [132, 3, 1, "", "optimal_parameters"], [132, 3, 1, "", "parameter_names"], [132, 2, 1, "", "parameter_ranges"], [132, 3, 1, "", "reset"], [132, 3, 1, "", "set_parameter_ranges"], [132, 3, 1, "", "set_parameters"], [132, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack": [[133, 1, 1, "", "IntersectionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack": [[133, 2, 1, "", "attack_type"], [133, 2, 1, "", "complexity_type"], [133, 3, 1, "", "get_optimal_parameters_dict"], [133, 3, 1, "", "has_optimal_parameter"], [133, 3, 1, "", "k"], [133, 3, 1, "", "linear_algebra_constant"], [133, 2, 1, "", "memory_access"], [133, 3, 1, "", "memory_access_cost"], [133, 3, 1, "", "memory_complexity"], [133, 3, 1, "", "optimal_parameters"], [133, 3, 1, "", "parameter_names"], [133, 2, 1, "", "parameter_ranges"], [133, 3, 1, "", "reset"], [133, 3, 1, "", "set_parameter_ranges"], [133, 3, 1, "", "set_parameters"], [133, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir": [[134, 1, 1, "", "KipnisShamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir": [[134, 2, 1, "", "attack_type"], [134, 2, 1, "", "complexity_type"], [134, 3, 1, "", "get_optimal_parameters_dict"], [134, 3, 1, "", "has_optimal_parameter"], [134, 3, 1, "", "linear_algebra_constant"], [134, 2, 1, "", "memory_access"], [134, 3, 1, "", "memory_access_cost"], [134, 3, 1, "", "memory_complexity"], [134, 3, 1, "", "optimal_parameters"], [134, 3, 1, "", "parameter_names"], [134, 2, 1, "", "parameter_ranges"], [134, 3, 1, "", "reset"], [134, 3, 1, "", "set_parameter_ranges"], [134, 3, 1, "", "set_parameters"], [134, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.uov_algorithm": [[135, 1, 1, "", "UOVAlgorithm"]], "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm": [[135, 2, 1, "", "attack_type"], [135, 2, 1, "", "complexity_type"], [135, 3, 1, "", "get_optimal_parameters_dict"], [135, 3, 1, "", "has_optimal_parameter"], [135, 3, 1, "", "linear_algebra_constant"], [135, 2, 1, "", "memory_access"], [135, 3, 1, "", "memory_access_cost"], [135, 3, 1, "", "memory_complexity"], [135, 3, 1, "", "optimal_parameters"], [135, 3, 1, "", "parameter_names"], [135, 2, 1, "", "parameter_ranges"], [135, 3, 1, "", "reset"], [135, 3, 1, "", "set_parameter_ranges"], [135, 3, 1, "", "set_parameters"], [135, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.uov_estimator": [[137, 1, 1, "", "UOVEstimator"]], "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator": [[137, 3, 1, "", "algorithm_names"], [137, 3, 1, "", "algorithms"], [137, 2, 1, "", "bit_complexities"], [137, 2, 1, "", "complexity_type"], [137, 3, 1, "", "estimate"], [137, 2, 1, "", "estimator_type"], [137, 4, 1, "", "excluded_algorithms_by_default"], [137, 3, 1, "", "fastest_algorithm"], [137, 2, 1, "", "memory_access"], [137, 3, 1, "", "nalgorithms"], [137, 3, 1, "", "reset"], [137, 3, 1, "", "table"]], "cryptographic_estimators.UOVEstimator.uov_problem": [[138, 1, 1, "", "UOVProblem"]], "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem": [[138, 2, 1, "", "cost_one_hash"], [138, 3, 1, "", "expected_number_solutions"], [138, 3, 1, "", "get_parameters"], [138, 3, 1, "", "hashes_to_basic_operations"], [138, 3, 1, "", "npolynomials"], [138, 3, 1, "", "nvariables"], [138, 3, 1, "", "order_of_the_field"], [138, 2, 1, "", "theta"], [138, 3, 1, "", "to_bitcomplexity_memory"], [138, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.base_algorithm": [[139, 1, 1, "", "BaseAlgorithm"], [139, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[139, 2, 1, "", "attack_type"], [139, 2, 1, "", "complexity_type"], [139, 3, 1, "", "get_optimal_parameters_dict"], [139, 3, 1, "", "has_optimal_parameter"], [139, 2, 1, "", "memory_access"], [139, 3, 1, "", "memory_access_cost"], [139, 3, 1, "", "memory_complexity"], [139, 3, 1, "", "optimal_parameters"], [139, 3, 1, "", "parameter_names"], [139, 2, 1, "", "parameter_ranges"], [139, 3, 1, "", "reset"], [139, 3, 1, "", "set_parameter_ranges"], [139, 3, 1, "", "set_parameters"], [139, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[141, 1, 1, "", "BaseEstimator"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[141, 3, 1, "", "algorithm_names"], [141, 3, 1, "", "algorithms"], [141, 2, 1, "", "bit_complexities"], [141, 2, 1, "", "complexity_type"], [141, 3, 1, "", "estimate"], [141, 2, 1, "", "estimator_type"], [141, 4, 1, "", "excluded_algorithms_by_default"], [141, 3, 1, "", "fastest_algorithm"], [141, 2, 1, "", "memory_access"], [141, 3, 1, "", "nalgorithms"], [141, 3, 1, "", "reset"], [141, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[142, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[142, 3, 1, "", "expected_number_solutions"], [142, 3, 1, "", "get_parameters"], [142, 3, 1, "", "to_bitcomplexity_memory"], [142, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.estimation_renderer": [[143, 1, 1, "", "EstimationRenderer"]], "cryptographic_estimators.estimation_renderer.EstimationRenderer": [[143, 3, 1, "", "as_table"]], "cryptographic_estimators.helper": [[144, 1, 1, "", "ComplexityType"], [144, 5, 1, "", "concat_all_tables"], [144, 5, 1, "", "concat_pretty_tables"], [144, 5, 1, "", "gf_order_to_characteristic"], [144, 5, 1, "", "gf_order_to_degree"], [144, 5, 1, "", "is_power_of_two"], [144, 5, 1, "", "is_prime_power"], [144, 5, 1, "", "ngates"], [144, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[144, 4, 1, "", "ESTIMATE"], [144, 4, 1, "", "TILDEO"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 116, 118, 121, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 139, 146], "0": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 146], "00073037": 146, "009": 146, "011": 25, "01265": 146, "015": 120, "016": 128, "01639344262295082": 44, "017857142857142856": 44, "019": 120, "023": 146, "024390243902439025": 44, "026": 146, "030": 146, "034": 137, "038": [15, 18, 25], "040": 65, "04800": 146, "054n": 146, "057": 120, "059": [120, 128], "065": 44, "085": 25, "092": 120, "0975609756097561": 44, "0_15": 146, "0_6": 146, "1": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 146], "10": [4, 6, 10, 15, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 69, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 123, 124, 125, 128, 131, 132, 133, 134, 135, 137, 144, 146], "100": [4, 6, 11, 12, 59, 60, 61, 62, 65, 68, 72, 89, 90, 91, 92, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 123, 124, 125, 128], "1007": 146, "101": [15, 59, 144], "1020369320078": 146, "1023": 146, "103": [15, 44], "1035": 146, "104": 120, "1045": 146, "105": [44, 72], "1056498": 146, "1057777": 146, "106": 97, "10602": 146, "107": 44, "108": [25, 137], "1087": 144, "109": [15, 44, 57], "1091": 144, "11": [4, 15, 25, 44, 57, 65, 69, 83, 86, 107, 120, 131, 137, 144], "110": 15, "1109": 146, "111": [44, 120], "112": [97, 137], "1121": 144, "1139": 146, "114": 97, "1145": 146, "115": 25, "116": 25, "117": [18, 25, 137], "118": [75, 76, 78, 79, 81, 82, 86, 88, 97], "119": 44, "12": [4, 10, 15, 18, 28, 29, 31, 32, 33, 34, 38, 39, 40, 49, 57, 80, 86, 120, 137], "121": 137, "1210": 97, "122": [18, 25], "123": 15, "124": 25, "1243": 146, "125": 25, "126": [25, 48], "127": [44, 65, 75, 76, 78, 79, 81, 82, 86, 88, 97, 144], "129": [44, 97, 128], "12929": 146, "13": [4, 25, 44, 77, 78, 80, 83, 86, 120, 128, 137], "130": 25, "131": 137, "132": [25, 57, 137], "1329": 146, "133": [44, 97], "134": 25, "137": [44, 72], "138": 86, "139": 44, "14": [15, 47, 57, 65, 83, 86, 120, 138], "140": [120, 123, 128], "141": [44, 120, 137], "142": [25, 57, 120], "143": [25, 44, 57, 120], "144": 57, "145": 137, "146": 72, "147": [44, 57, 86], "148": [44, 97, 137], "149": 44, "15": [4, 41, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 97, 120, 137, 144], "150": [4, 25, 65, 93, 120], "151": [25, 120, 128], "1515": 146, "152": [44, 120], "153": [25, 86, 120, 137], "154": 57, "155": [86, 97], "1568": 146, "158": 44, "159": [44, 57], "16": [4, 18, 19, 20, 21, 22, 23, 25, 36, 41, 44, 45, 50, 51, 52, 53, 54, 57, 59, 86, 120, 137, 144], "160": [86, 137], "161": 44, "162": 86, "163": 44, "164": 44, "165": [57, 137], "167": [44, 57, 120], "1677": 146, "168": 44, "169": [44, 57, 137], "17": [4, 18, 25, 27, 44, 57, 65, 86, 137, 138], "172": 120, "173": [44, 120], "174": [44, 86], "1749": 146, "175": 44, "176": 137, "18": [18, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 57, 77, 78, 80, 83, 86, 97, 101], "180": 137, "1807": 146, "18070398": 146, "181": 137, "182": 44, "183": [38, 40], "184": 137, "18665241123894338": 44, "189": [57, 137], "19": [44, 57, 86, 97, 128], "190": 25, "191": 120, "192": 44, "1962": 146, "19677": 44, "197": 120, "198": 25, "1982": 146, "1_1": 146, "2": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 117, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 141, 144, 146], "20": [4, 10, 12, 15, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 54, 61, 65, 69, 86, 97, 120, 144, 146], "200": [15, 59, 88], "2005": 146, "2009": 146, "201": 44, "2012": 146, "2015": [107, 146], "2017": 146, "2018": 146, "2019": 146, "202": [25, 59], "2021": 146, "2022": 146, "2023": 146, "203": 107, "204": 86, "206": 86, "207": 57, "209": [57, 86], "21": [4, 25, 44, 57, 97, 120, 128, 144], "210": [48, 120], "212": [44, 97], "213": 88, "216": [57, 86], "217": [120, 137], "218": [44, 137], "219": 44, "22": [4, 19, 44, 57, 93, 120, 137], "221": 120, "222": 25, "2222222222222222": 32, "224": [25, 44], "226": 44, "227": 44, "22792": 146, "228": 107, "23": [37, 44, 120, 128, 137], "230": 57, "231": 57, "2320": 97, "235": 44, "236": [57, 72], "237": 86, "24": [44, 68, 72, 97, 120, 128, 131, 133, 137], "240": 86, "241": 72, "242": 57, "243": [44, 72], "244": [44, 137], "2442829": 146, "2442843": 146, "247": 44, "249": 137, "25": [6, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 65, 102, 120, 128, 137], "251": [10, 15], "2511786": 146, "252": 15, "253": 44, "25385": 146, "254": [25, 57], "256": [37, 137], "26": [44, 146], "269": 57, "27": [25, 44, 97], "2720": 120, "274": [57, 65], "277": 137, "278": 57, "28": [25, 44, 97, 120], "282": 137, "283": 86, "29": [15, 25, 44, 65, 120, 128], "292": 137, "293": 137, "2_7": 146, "2k": 30, "2p": [100, 101, 104, 105, 106, 107, 109, 125], "2pl": 100, "2v": 134, "3": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 144, 146], "30": [10, 15, 44, 93, 120], "300": 93, "3000": 4, "30057": 146, "301": [57, 137], "302": [57, 65], "3057": 44, "308": [65, 86], "31": [15, 37, 60, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 97, 123, 128], "310": 128, "311": 137, "312": 44, "314": 57, "316": [44, 57], "319": [25, 72, 128, 146], "31928490910389": 123, "32": [44, 97, 120], "325": 44, "33": [4, 15, 25, 44, 57, 65, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86], "331": 137, "3333333333333333": 32, "339": 44, "34": [11, 65, 97], "348": 137, "3488": 120, "349": 44, "35": [15, 25, 44, 137], "351": 57, "36": [18, 25], "37": [44, 57, 77, 78, 80, 83, 86], "377": 65, "378": 137, "38": [25, 57, 72], "380": 120, "385": 120, "38616": 146, "387": 137, "388": 120, "389": 137, "39": [44, 120], "397": 137, "399": 25, "3_15": 146, "3_3": 146, "4": [4, 15, 18, 19, 21, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 72, 86, 91, 97, 120, 128, 131, 132, 133, 134, 135, 137, 138, 144], "40": [44, 72, 86, 97], "405": 120, "409": 120, "41": [4, 30, 44, 65, 77, 78, 80, 83, 86, 97], "412": 146, "42": [15, 44, 60, 72, 86, 120, 128], "425": 57, "43": [25, 44, 57, 86], "431": 57, "44": [44, 57, 65, 137], "445": 137, "447": 120, "448": 120, "45": [4, 25, 36, 44, 45, 137], "452": 57, "45664": 146, "45727": 146, "45961": 146, "46": [44, 57], "460": 120, "46800": 146, "47": [86, 120, 137], "48": [25, 75, 76, 78, 79, 81, 82, 86, 88, 123, 128], "480": 65, "48910": 146, "49": [25, 44, 57, 120], "493": 44, "4_17": 146, "5": [4, 18, 19, 21, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 57, 69, 72, 86, 97, 120, 123, 128, 131, 132, 133, 134, 135, 137], "50": [4, 6, 11, 12, 44, 60, 61, 62, 68, 72, 89, 90, 91, 92, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 123, 124, 125, 128], "507": 137, "51": 65, "512": 18, "52": 44, "53": [44, 86], "539": 137, "54": [44, 137], "540": 146, "541": 120, "55": 44, "551": 65, "56": [25, 44, 45], "57": [4, 44, 97], "576": 120, "578": 146, "58": [4, 15, 120], "582": 97, "58496250072116": 59, "587": 120, "588": 65, "59": [15, 25, 44, 97, 137], "592": 120, "592592592592592": 44, "594": 44, "5_2": 146, "5_4": 146, "5_9": 146, "6": [4, 25, 44, 48, 50, 51, 52, 53, 54, 57, 72, 77, 83, 86, 97, 120, 137, 144], "60": [18, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 57, 65, 97], "600": 120, "601": 65, "602": 120, "608": 120, "61": 44, "616": 44, "618": 137, "619": 120, "62": 44, "620": 44, "62250195": 146, "624": 15, "631": 65, "64": [18, 19, 20, 21, 22, 23, 25, 44, 57, 120, 137], "642": 146, "64837": 146, "66": [18, 19, 20, 21, 22, 23, 25, 137], "662": 146, "67": [36, 44, 97], "68": 44, "682": 44, "699": 44, "7": [4, 15, 25, 29, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 65, 69, 72, 75, 76, 78, 79, 81, 82, 86, 88, 97, 100, 120, 125, 128, 137, 144], "70": 44, "71": 44, "711": 120, "718": 65, "72": [44, 65, 97, 137], "720": 44, "722": 72, "73": 57, "74": 97, "747": 137, "75": 97, "76": 137, "76620": 146, "77": 44, "771": [123, 128], "78": [25, 50, 51, 52, 53, 54, 57], "79": [15, 120], "794": 128, "795": 120, "8": [4, 18, 19, 20, 21, 22, 23, 25, 29, 38, 40, 44, 54, 57, 72, 86, 93, 97, 101, 104, 106, 120, 137, 138], "80": [18, 44], "801": 44, "808": [72, 128], "81": [18, 19, 20, 21, 22, 23, 25, 29, 31, 35, 36, 37, 38, 40, 42, 44, 120], "81293": 146, "814": 120, "81652": 146, "82": 65, "823": 44, "826": 137, "83": 97, "8437464": 146, "85": 44, "854": 44, "86": 120, "87": [44, 120, 137], "8765": 44, "88": 44, "88403": 146, "886": 120, "89": 44, "8_10": 146, "8_25": 146, "9": [4, 15, 18, 19, 20, 21, 22, 23, 25, 39, 41, 44, 50, 51, 52, 53, 54, 55, 57, 59, 86, 97, 109, 120, 128, 137], "90": 25, "901": 65, "906": 44, "915": 25, "924": 36, "93": 25, "94": 44, "95": [15, 44, 120], "954": 97, "958": 131, "96": [97, 137], "960": 15, "961": [123, 128], "962": [18, 25, 65], "966": 44, "968": 137, "97": 120, "976": 137, "97736937354432": 88, "978": 146, "97842293847626": 59, "98": [25, 44], "989": 25, "995": 120, "9_42": 146, "9_8": 146, "A": [4, 10, 11, 12, 15, 18, 19, 20, 21, 22, 25, 30, 35, 37, 41, 44, 45, 47, 48, 49, 57, 60, 61, 65, 68, 69, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 125, 128, 130, 132, 137, 139, 141, 144, 146], "BE": 75, "For": [29, 104, 105], "If": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 121, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 137, 138, 139, 144], "In": [30, 31, 107, 134], "It": [28, 30, 32, 33, 39], "Its": 146, "No": [15, 50, 51, 52, 53, 54, 55, 65, 72, 97], "Not": 146, "On": [107, 146], "The": [16, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 68, 69, 101, 106, 114, 117, 121, 122, 129, 130, 132, 133, 144, 146], "There": [29, 36], "These": 32, "To": 145, "_complexity_typ": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "_memory_access": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "_seri": 47, "a_max": 87, "a_min": 87, "access": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "accompani": [68, 69], "accord": 62, "accuraci": [110, 111, 112, 113, 114, 115, 116], "acm": 146, "adapt": [10, 11, 12, 60, 61, 68, 69, 73, 118], "add": 6, "addit": [5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 23, 25, 27, 31, 46, 50, 51, 52, 53, 54, 55, 57, 60, 65, 67, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 97, 99, 120, 122, 130, 131, 132, 133, 134, 135, 137, 138, 141], "adi": 146, "adrien": 146, "after": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "again": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "against": [18, 19, 131, 132, 134], "aght18": [79, 146], "aim": [19, 132], "al": [28, 39], "alessandro": 146, "alexand": 146, "alexei": 146, "alg": [86, 120, 141], "algebra": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 131, 132, 133, 134, 135, 137, 146], "algorithm": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 145, 146], "algorithm_nam": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 145], "all": [2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 55, 57, 60, 61, 62, 63, 65, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 95, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 135, 137, 139, 141, 143, 144], "allow": [5, 17, 27, 46, 57, 59, 67, 86, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 122, 138, 142], "alpha": [19, 36], "alreadi": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "also": 37, "altern": [29, 31, 36], "amount": [5, 9, 27, 59, 88, 99, 138], "an": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 146], "analysi": [29, 146], "andr": 146, "andrea": 146, "ani": [18, 29, 30, 31, 86, 120, 131, 141], "anja": 146, "annual": 107, "antoin": 146, "append": [72, 74], "appli": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 77, 103, 130], "applic": [107, 146], "approach": [20, 133, 146], "approxim": 117, "ar": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "aragon": 146, "arbitrari": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "archiv": 146, "arg": [50, 51, 52, 53, 54, 55], "argument": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 138, 139, 141], "articl": 146, "arxiv": 146, "as_tabl": [143, 145], "asset": 146, "associ": [5, 9, 17, 19, 27, 46, 59, 67, 74, 81, 88, 99, 122, 130, 132, 138, 142], "assum": 67, "asymptot": [107, 117, 146], "attack": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 146], "attack_typ": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 145], "attempt": [21, 22, 78], "attribut": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "automorph": 146, "avail": 102, "aviad": 146, "b": [54, 57, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 121, 129, 144, 145, 146], "b_max": 87, "b_min": 87, "baena": 146, "balanc": 134, "baldi": 146, "ball": [100, 110, 146], "ball_collis": 145, "ballcollis": [100, 120, 145], "ballcollisionscipymodel": [110, 145], "bardet": 146, "barenghi": 146, "base": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 146], "base_algorithm": 145, "base_const": 145, "base_estim": 145, "base_field_ord": [88, 145], "base_problem": 145, "basealgorithm": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 141, 145], "basealgoritm": 139, "baseestim": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 145], "basemralgorithm": 55, "baseproblem": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 145], "baseranksdalgorithm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "basi": [75, 81, 82], "basic": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 138, 139, 142], "basic_oper": [5, 9, 17, 27, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142], "basil": 146, "basis_enumer": 145, "basisenumer": [75, 86, 145], "bbbgnrt20": [80, 146], "bbbgt23": [80, 83, 146], "bbcgpstv20": [80, 146], "bbcpstv22": [29, 146], "bbp": [15, 145], "bbps20": [10, 62, 146], "bcccnsy10": [34, 146], "bcchk23": [18, 19, 21, 146], "beat": 146, "becker": 146, "behind": [20, 133], "being": [102, 118], "bellini": 146, "bernstein": 146, "best": 87, "bettal": 146, "between": [37, 144], "beu20": [11, 12, 20, 60, 61, 133, 134, 146], "beullen": [15, 65, 73, 145, 146], "beullens_lee_brickell_adapt": [73, 145], "bfb0019850": 146, "bfb0034862": 146, "bfe": 51, "bfp09": [35, 37, 146], "bfp12": [37, 146], "bfss11": [29, 146], "bi": 87, "biass": 146, "bibliograph": 145, "big_k": 145, "bigk": [50, 57, 145], "bike": [0, 1, 2], "bike_algorithm": 145, "bike_const": 145, "bike_estim": 145, "bike_problem": 145, "bikealgorithm": [0, 1, 2], "bikeestim": [0, 1, 2, 4, 5], "bikeproblem": [0, 1, 2, 5, 145], "binari": [25, 27, 46, 59, 88, 107, 117, 137, 138, 146], "binary_entropi": [117, 145], "binom": [121, 129, 145], "binomi": [45, 117, 121, 129], "binomial_approxim": [117, 145], "bit": [5, 9, 17, 18, 19, 20, 21, 22, 23, 25, 27, 44, 46, 59, 67, 74, 86, 88, 99, 107, 120, 122, 126, 130, 132, 135, 137, 138, 139, 141, 142], "bit_complex": [4, 8, 15, 18, 19, 20, 21, 22, 23, 25, 44, 57, 65, 72, 86, 97, 120, 126, 128, 132, 135, 137, 139, 141, 145], "bjmm": [94, 97, 102, 103, 104, 107, 120, 145], "bjmm12": [101, 102, 103, 104, 146], "bjmm_depth_2": 101, "bjmm_depth_3": 101, "bjmm_dw": 145, "bjmm_pdw": 145, "bjmm_plu": 145, "bjmmd2": [101, 120, 145], "bjmmd3": [101, 120, 145], "bjmmdw": [102, 103, 120, 145], "bjmmpdw": [103, 120, 145], "bjmmplu": [104, 120, 145], "bjmmscipymodel": [111, 145], "bjorklund": [44, 145], "bj\u00f6rklund": [28, 146], "bk": 50, "bkw19": [28, 146], "block": 29, "block_wiedemann": [54, 57, 58, 145], "blp08": [109, 125, 146], "blp11": [100, 146], "bm18": [105, 146], "bo": 146, "bool": [4, 8, 15, 25, 44, 46, 57, 65, 72, 74, 86, 97, 102, 118, 120, 121, 126, 128, 129, 130, 137, 141, 144], "boolean": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 121, 129, 144, 146], "booleansolv": 29, "booleansolve_fxl": 145, "booleansolvefxl": [29, 44, 137, 145], "both": [105, 112, 146], "both_mai": 145, "bothmai": [105, 120, 145], "bothmayscipymodel": [112, 145], "bouillaguet": 146, "bound": [25, 31, 44, 65, 66, 72, 97, 102, 128, 137], "briaud": 146, "brickel": [123, 146], "bro": 146, "bruno": 146, "brute": 146, "bruteforc": [57, 145], "built": 29, "c": [117, 146], "c_isd": 14, "cabarca": 146, "calcul": [45, 122, 130], "call": [41, 144], "callabl": 137, "campo": 146, "can": [29, 130, 134], "carozza": 146, "ccj": [90, 97, 145], "ccj23": [89, 90, 146], "ccj_lin": 145, "ccjlin": [90, 97, 145], "celi": 146, "certain": [5, 9, 27, 59, 88, 99, 138], "cgmt": 30, "cgmt02": [30, 146], "cgmta": [44, 145], "chabaud": 146, "chapter": 146, "characterist": [38, 144], "charl": 146, "check": [75, 76, 79, 144], "chen": 146, "cheng": 146, "ches2010": 146, "chiaraluc": 146, "choic": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "chou": 146, "christian": 146, "christoph": 146, "chung": 146, "ciphertext": 1, "ckp": [29, 146], "class": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144], "claw": 18, "claw_find": 145, "clawfind": [18, 25, 145], "code": [5, 10, 11, 12, 15, 16, 17, 60, 61, 65, 66, 67, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 97, 99, 102, 107, 120, 122, 128, 130, 131, 146], "code_dimens": [88, 145], "code_length": [88, 145], "codeword": [12, 61, 146], "codewords_needed_for_success": [12, 61], "coeffici": [41, 45, 47, 81, 117, 121, 129], "coefficient_of_degre": [47, 145], "coefficient_up_to_degre": [47, 145], "collis": [100, 110, 131, 146], "collision_attack": 145, "collisionattack": [131, 137, 145], "column": [29, 54, 57, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 144], "com": [10, 11, 12, 60, 61, 68, 69, 146], "combin": [20, 83, 102, 133], "come": 32, "comp": [38, 40], "compar": [36, 129], "complex": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 146], "complexity_typ": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 145], "complexitytyp": [144, 145], "comput": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 138, 139, 146], "compute_mb": [87, 145], "compute_memory_complexity_help": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 145], "compute_nb": [87, 145], "compute_time_complexity_help": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 145], "concat_all_t": [144, 145], "concat_pretty_t": [144, 145], "concaten": 144, "concret": [89, 90], "confer": 107, "consid": [4, 6, 7, 8, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 33, 34, 36, 38, 39, 40, 42, 44, 45, 57, 65, 72, 86, 97, 120, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "consist": [29, 31, 39], "constant": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "constraint": [119, 127, 145], "construct": [0, 1, 4, 5, 6, 8, 9, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 65, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 108, 109, 117, 120, 122, 123, 124, 125, 130, 131, 132, 133, 134, 137, 138, 141, 142], "consumpt": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "contain": [5, 9, 59, 130], "convers": [25, 27, 46, 50, 51, 52, 53, 54, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 137, 138, 144], "correct": 146, "correspond": [0, 1, 5, 6, 9, 17, 27, 46, 59, 67, 74, 88, 99, 122, 130, 138], "cost": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "cost_for_finding_subcod": [73, 145], "cost_for_list_oper": [70, 72], "cost_one_hash": [27, 138, 145], "cost_reduct": [50, 51, 52, 53, 54, 55, 145], "cost_to_find_random_2dim_subcodes_with_support_w": [16, 145], "count": [25, 27, 46, 59, 88, 137, 138, 146], "courtoi": 146, "couteau": 146, "creat": 143, "crossbr": [44, 137, 145, 146], "cryptanalyt": 146, "cryptograph": [107, 146], "cryptographi": 146, "cryptographic_estim": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145], "cryptosystem": [132, 146], "cs96": [75, 146], "csail": 146, "cube": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "custom": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "cyclic": 146, "d": [31, 44, 45, 47, 48, 66, 69, 72, 73, 101, 137, 145, 146], "d_1": 41, "d_i": 41, "d_m": 41, "dagstuhl": 146, "daniel": 146, "de": 146, "decim": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 144], "decod": [0, 1, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 130, 146], "decor": 139, "default": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144], "defend": 146, "defin": [41, 46], "degre": [31, 35, 37, 41, 45, 47, 48, 49, 54, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 144, 145], "degree_extens": [88, 145], "degree_of_polynomi": [35, 37, 145], "degree_of_regular": 145, "delta": [39, 44, 145], "demand": 29, "depend": [121, 129], "deploi": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "depth": [93, 97, 101, 102, 103, 104, 105, 107, 111, 112, 114, 120, 145], "deriv": [10, 11, 12, 60, 61], "describ": [4, 8, 15, 25, 39, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141], "desir": 114, "determin": [18, 19, 20, 21, 22, 23, 25, 39, 46, 126, 129, 132, 135, 137, 139, 144], "determinant_of_a": [58, 145], "determinist": 44, "de\ufb01n": 146, "dict": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 142, 143], "dictionari": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 143], "digit": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 144], "dimens": [5, 15, 16, 17, 25, 27, 65, 67, 76, 79, 86, 87, 88, 97, 99, 102, 120, 122, 128, 130], "dimension": [16, 73], "din21a": [32, 33, 146], "din21b": [33, 146], "dinur": [32, 33, 146], "dinur1": 145, "dinur2": 145, "dinurfirst": [32, 44, 145], "dinursecond": [33, 44, 145], "diogo": 146, "direct": [19, 31, 132], "direct_attack": 145, "directattack": [19, 25, 132, 137, 145], "disjoint": [102, 103], "distanc": 146, "distinguish": 144, "distribut": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 123, 124, 125], "dl": 146, "do": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "document": [145, 146], "doi": 146, "domin": 29, "done": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "drop": 146, "dua20": [31, 146], "dual": 67, "duart": 146, "dum91": [106, 146], "dumer": [120, 145, 146], "dumerscipymodel": [113, 145], "dummi": [6, 7], "dummy_algorithm": 145, "dummy_algorithm1": 145, "dummy_estim": 145, "dummy_problem": [6, 145], "dummyalgorithm": [6, 7], "dummyalgorithm1": [6, 145], "dummyestim": [6, 7, 8, 9], "dummyproblem": [6, 7, 9, 145], "e": [4, 6, 8, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 50, 51, 52, 53, 54, 55, 57, 65, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 97, 120, 128, 131, 133, 137, 138, 141, 146], "each": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "eb22": [102, 103, 146], "edoardo": 146, "edu": 146, "effici": 146, "eigenvector": 21, "either": [4, 8, 15, 25, 31, 44, 54, 57, 65, 72, 86, 97, 107, 120, 128, 137, 141, 144], "element": [5, 9, 17, 27, 46, 59, 67, 70, 72, 74, 77, 78, 88, 99, 122, 130, 138, 142, 144], "elements_to_stor": [5, 9, 17, 27, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142], "elian": 146, "eliana": 146, "elimin": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "ell": [68, 69, 72, 74, 89, 91, 93, 97, 145], "els": 144, "emanuel": 146, "enabl": [72, 74], "encod": 5, "enough": 146, "enrico": 146, "entri": [50, 51, 52, 53, 54, 55, 78], "entropi": 117, "entry_i_j_of_a": [58, 145], "enum": [14, 58, 64, 71, 91, 93, 119, 127, 144], "enumer": [58, 64, 71, 75, 82, 119, 127, 131], "eprint": 146, "eps_i": [93, 97, 145], "eps_x": [93, 97, 145], "equal": [41, 46], "equat": [36, 38, 39, 41, 45, 75, 76, 78, 79, 146], "equival": [10, 11, 12, 15, 17, 60, 61, 62, 65, 67, 134, 146], "ernest": 146, "error": [97, 99, 102, 120, 122, 128, 130, 146], "es23": [89, 90, 91, 92, 93, 146], "especi": 36, "esser": 146, "estim": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146], "estimation_render": 145, "estimation_result": 143, "estimationrender": [143, 145], "estimator_typ": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 145], "et": [28, 39], "eugen": 146, "eurocrypt": 146, "eurocrypt2000": 146, "evalu": [34, 131], "even": [38, 132], "everi": [25, 27, 31, 46, 59, 88, 137, 138], "exampl": [4, 6, 10, 11, 12, 15, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 65, 68, 69, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 123, 124, 125, 128, 131, 133, 137, 144, 145], "exclud": [4, 15, 18, 19, 20, 21, 22, 25, 44, 57, 65, 72, 86, 97, 120, 128, 132, 137, 141], "excluded_algorithm": [4, 15, 18, 19, 20, 21, 22, 25, 44, 57, 65, 72, 86, 97, 120, 128, 132, 137, 141], "excluded_algorithms_by_default": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 145], "exhaust": [34, 37, 146], "exhaustive_search": 145, "exhaustivesearch": [34, 44, 145], "exist": [5, 9, 17, 27, 46, 59, 67, 73, 74, 88, 99, 122, 130, 138, 142], "expect": [5, 9, 17, 27, 46, 59, 67, 74, 78, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 122, 123, 124, 125, 130, 138, 142], "expected_number_solut": [5, 9, 17, 27, 44, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142, 145], "explicit": 103, "exploit": 21, "expon": [25, 27, 44, 46, 50, 51, 52, 53, 54, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 137, 138, 144, 146], "express": 18, "extend": 146, "extended_binomi": [58, 145], "extens": [86, 87, 88, 101], "extern": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 132, 135, 137], "extra": [72, 74], "ez23": [104, 146], "f": [117, 146], "f5": [37, 44, 145], "f_1": 41, "f_2": [47, 146], "f_5": 48, "f_m": 41, "f_q": [81, 82], "fabio": 146, "fact": [21, 22], "factor": [4, 8, 15, 25, 27, 44, 46, 50, 51, 52, 53, 54, 57, 59, 65, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 97, 120, 128, 137, 138, 141, 144], "fall": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "fals": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 137, 139, 141, 144], "fast": 146, "fastest": 0, "fastest_algorithm": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 145], "faug\u00e8r": 146, "field": [15, 17, 25, 27, 30, 31, 37, 38, 41, 44, 45, 46, 47, 48, 49, 57, 59, 65, 67, 72, 74, 86, 88, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 122, 123, 124, 125, 128, 130, 137, 138, 141, 144, 146], "final": [31, 71], "find": [16, 18, 21, 22, 28, 31, 73, 134, 146], "find_b_sm_fqm": [87, 145], "find_best_choice_param_mm": [87, 145], "find_p_sm_fqm": [87, 145], "find_valid_choices_param_sm_fqm": [87, 145], "fine": 146, "finit": [25, 27, 30, 37, 41, 44, 45, 46, 47, 49, 57, 59, 88, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 123, 124, 125, 137, 138, 144, 146], "first": [8, 9, 21, 31, 32, 41, 47, 121, 129, 144], "first_nonpositive_coeffici": [47, 145], "first_nonpositive_coefficient_up_to_degre": [47, 145], "fix": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42], "float": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 117, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 142, 144], "floor": 30, "florent": 146, "floyd": 146, "fly": 29, "fm": 146, "fnt21": [36, 146], "follow": [18, 29, 41, 131, 145], "forc": 146, "forgeri": [25, 137], "form": 144, "formula": [31, 34, 35, 89, 90], "found": [31, 34], "fq": [17, 67, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 126, 130, 146], "fr": 146, "framework": 117, "franco": 146, "francoi": 146, "from": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 121, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 144, 145, 146], "func": 139, "function": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "further": [104, 105], "furu": 146, "fxl": 29, "g": [117, 146], "gaborit": 146, "galoi": 144, "gate": 144, "gauss": [119, 127, 145], "gauss_binomi": [73, 145], "gaussian": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "gegr": 77, "gemss": 146, "gener": [18, 20, 31, 34, 45, 78, 131, 133, 134], "generic_system": [41, 145], "geoffroi": 146, "get_fastest_mq_algorithm": [132, 145], "get_fastest_sd_algorithm": [0, 1, 145], "get_optimal_parameters_dict": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "get_paramet": [5, 9, 17, 27, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142, 145], "get_problem_paramet": [46, 145], "get_problem_parameters_reduc": [50, 51, 52, 53, 54, 55, 145], "get_reduced_instance_paramet": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 145], "get_reduced_paramet": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 145], "get_time_memory_and_paramet": [110, 111, 112, 113, 114, 115, 116, 145], "gf": [25, 27, 28, 29, 32, 33, 39, 46, 59, 88, 137, 138, 144, 146], "gf_order_to_characterist": [144, 145], "gf_order_to_degre": [144, 145], "gilbert": 66, "gill": 146, "github": [10, 11, 12, 60, 61, 68, 69], "given": [5, 9, 17, 18, 19, 20, 21, 22, 23, 25, 27, 31, 39, 41, 45, 46, 59, 67, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 99, 122, 126, 130, 132, 135, 137, 138, 139, 142, 143, 144], "goubin": 146, "gr": [77, 79, 86, 145], "grai": 131, "gray_code_eval_cost": 131, "grobner": 37, "groebner": 37, "group": 146, "grs16": [76, 78, 146], "grsa": 76, "guess": [29, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "guessing_enhanced_gr": 145, "guessingenhancedgr": [77, 86, 145], "guidelin": 145, "gv_distanc": [66, 145], "h": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 47, 67, 117, 132, 135, 137, 146], "ha": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "hal": 146, "ham": 102, "hamming_bal": [66, 145], "hard": 146, "has21": [36, 146], "has_optimal_paramet": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "hash": [18, 27, 131, 138], "hash_bit_s": 18, "hashes_to_basic_oper": [27, 138, 145], "hashimoto": [25, 44, 137, 145, 146], "hashmap": [102, 118, 126], "hautevil": 146, "have": 78, "head": 146, "help": 102, "helper": [117, 145], "henc": 29, "here": 6, "hess": 146, "high": 146, "hilbert": 145, "hilbertseri": [47, 145], "hiroki": 146, "hiroyuki": 146, "hl": 78, "hmap": [102, 118], "hmp": 126, "how": 146, "hsieh": 146, "http": [10, 11, 12, 60, 61, 68, 69, 146], "huacheng": 146, "hull": 67, "hybrid": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 78, 132, 135, 137, 146], "hybrid_f5": 145, "hybrid_linear": 145, "hybridf5": [37, 44, 145], "hybridization_factor": [50, 51, 52, 53, 54, 55, 145], "hybridlinear": [78, 86, 145], "i": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 141, 144, 145, 146], "iacr": 146, "icalp": 146, "idea": [20, 33, 37, 133], "ideal": [31, 45], "ignor": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141], "igr": 79, "ilya": 146, "impact": 146, "import": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 144, 145], "improv": [77, 79, 80, 104, 146], "improved_gr": 145, "improvedgr": [79, 86, 145], "includ": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "include_quantum": [86, 120, 141], "include_tildeo": [86, 120, 141], "inclus": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "incorpor": 104, "index": [41, 145], "indic": [102, 118, 126, 139], "indyk": 105, "inf": [4, 8, 15, 25, 27, 44, 46, 57, 59, 65, 72, 86, 88, 97, 120, 122, 128, 137, 138, 142], "inform": 146, "initi": [0, 1, 31, 101, 102, 103, 104, 105, 106, 107, 109, 128], "initialize_parameter_rang": [101, 102, 103, 104, 105, 106, 107, 109, 145], "input": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141, 144], "inria": 146, "instanc": [0, 1, 4, 5, 6, 8, 9, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 59, 65, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 102, 103, 108, 109, 114, 120, 122, 123, 124, 125, 130, 131, 132, 133, 134, 137, 138, 141, 142], "instead": 126, "int": [4, 5, 8, 12, 15, 16, 17, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 65, 66, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 97, 99, 102, 111, 114, 117, 120, 121, 122, 126, 128, 129, 130, 131, 132, 135, 137, 138, 139, 141, 142, 143, 144], "integ": [30, 41, 45, 47, 48, 49, 121, 129], "intern": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "intersect": [20, 133], "intersection_attack": 145, "intersectionattack": [20, 25, 133, 137, 145], "interv": 102, "introduc": [80, 83, 100, 101, 106, 107], "invers": 117, "inverse_binary_entropi": [117, 145], "is_defined_over_finite_field": [46, 145], "is_overdefined_system": [46, 145], "is_power_of_two": [144, 145], "is_prime_pow": [144, 145], "is_square_system": [46, 145], "is_syndrome_zero": 130, "is_underdefined_system": [46, 145], "isd": [14, 71, 106, 122, 130, 145, 146], "isit": 146, "itai": 146, "item": [121, 129], "iter": [110, 111, 112, 113, 114, 115, 116], "its": [0, 4, 8, 15, 25, 28, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 146], "j": [58, 146], "jacqu": 146, "javier": 146, "jean": 146, "jeffrei": 146, "jmc": 146, "johansson": 146, "john": 146, "joong": 146, "joux": 146, "jo\u00e3o": 146, "julien": 146, "just": 146, "jv18": [31, 146], "k": [10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 36, 37, 44, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 65, 66, 67, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 120, 121, 122, 123, 124, 125, 128, 129, 130, 133, 137, 145, 146], "k_reduc": 58, "kannwisch": 146, "kappa": [32, 44, 145], "kaski": 146, "kei": [0, 4, 5, 25, 132, 134, 137, 146], "kernel": [50, 51, 52, 53, 54, 55, 68, 69, 70, 72, 74, 146], "kernel_search": 145, "kernelsearch": [52, 57, 145], "keyword": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 138, 139, 141], "kipni": [20, 21, 25, 133, 134, 146], "kipnis_shamir": 145, "kipnisshamir": [21, 25, 134, 137, 145], "klimov": 146, "kmp": [70, 72, 145], "kmp19": [68, 146], "kmp_final_list": [71, 145], "kmp_l1": [71, 145], "kmp_l2": [71, 145], "known": 21, "koussa": 146, "kpg": 145, "kpg99": [38, 146], "kwarg": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142], "l": [4, 45, 97, 100, 101, 104, 105, 106, 107, 109, 120, 125, 128, 145, 146], "l1": [71, 102, 103, 104, 120, 145], "l2": [71, 102, 103], "l_prime": 14, "lambda_": [28, 32, 44, 145], "lang": 146, "larger": 36, "las_vega": [25, 29, 44], "last": [41, 144], "lb88": [123, 146], "le_algorithm": 145, "le_const": 145, "le_estim": 145, "le_help": 145, "le_problem": 145, "lealgorithm": [10, 11, 12, 13], "lee": [123, 146], "leebrickel": [73, 128, 145], "leestim": [10, 11, 12, 13, 14, 15, 16, 17], "leif": 146, "length": [15, 16, 17, 29, 57, 59, 65, 67, 86, 87, 88, 97, 99, 117, 120, 122, 128, 130], "length_solution_vector": [59, 145], "leo82": [12, 61, 146], "leon": [15, 65, 145, 146], "leproblem": [10, 11, 12, 13, 17, 70, 145], "leq": [30, 40], "less": 146, "less_attack": [11, 12, 60, 61], "less_project": 10, "level": 103, "lie": [72, 74], "like": 21, "linear": [15, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 107, 118, 131, 132, 133, 134, 135, 137, 146], "linear_algebra_const": [18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 131, 132, 133, 134, 135, 145], "link": 146, "lipic": 146, "list": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 137, 139, 141, 144, 145], "list_comput": [64, 145], "list_of_random_tupl": [117, 145], "list_siz": [14, 64, 117], "lists_siz": [14, 64, 145], "lof": [73, 145], "log": 131, "log2": [25, 27, 46, 59, 88, 102, 137, 138], "logarithm": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 144], "lokshtanov": [18, 19, 20, 21, 22, 44, 132, 145, 146], "long": [4, 15, 65, 72, 137], "loui": 146, "low": [12, 50, 51, 52, 53, 54, 55, 61], "lowerbound": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "lpn": 146, "lptwy17": [39, 146], "ludov": 146, "luk": 146, "lv": [50, 51, 52, 53, 54, 55, 57, 145], "m": [18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 131, 132, 133, 134, 135, 137, 138, 146], "m4ri": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "macario": 146, "macaulai": [29, 31, 54], "magali": 146, "mai": [105, 107, 112, 114, 117, 146], "mani": 32, "manual": 145, "map": 19, "marco": 146, "match": 126, "matric": [21, 57, 59], "matrix": [29, 31, 50, 51, 52, 53, 54, 55, 59, 72, 74, 81], "matrix_a": [58, 145], "matthia": 146, "max": [44, 46, 59, 80, 87], "max_d": [31, 145], "max_minor": 145, "max_prec": 48, "max_valu": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "maxim": 146, "maximum": [5, 17, 27, 46, 57, 59, 67, 86, 87, 88, 99, 121, 122, 129, 138, 142], "maxminor": [80, 83, 86, 145], "may_ozerov": [120, 145], "may_ozerov_near_neighbor_tim": [117, 145], "mayo": [18, 19, 23, 146], "mayo_algorithm": [18, 19, 20, 21, 22, 145], "mayo_const": 145, "mayo_estim": 145, "mayo_help": 145, "mayo_problem": [18, 19, 20, 21, 22, 23, 145], "mayoalgorithm": [18, 19, 20, 21, 22, 23], "mayoestim": [18, 19, 20, 21, 22, 23, 25, 27], "mayoproblem": [18, 19, 20, 21, 22, 23, 27, 145], "mayozerov": [107, 120, 145], "mayozerov_depth_2": 107, "mayozerov_depth_3": 107, "mayozerovd2": [107, 120, 145], "mayozerovd3": [107, 120, 145], "mayozerovscipymodel": [114, 145], "mb": 83, "mceliec": 146, "me": 53, "median_size_of_random_orbit": [66, 145], "meier": 146, "mem": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "memori": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 146], "memory_access": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 145], "memory_access_cost": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "memory_bound": [4, 5, 8, 15, 17, 25, 27, 44, 46, 57, 59, 65, 67, 72, 86, 88, 97, 99, 120, 122, 128, 137, 138, 142], "memory_complex": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "memory_for_list_el": [70, 72], "merg": 144, "messag": [1, 4, 5, 134], "method": [139, 146], "metric": 146, "meurer": 146, "mht": 145, "mht13": [40, 146], "min": [30, 67], "min_max": [121, 129, 145], "min_valu": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "minim": 145, "minimum": [87, 121, 129, 146], "minor": [54, 57, 80, 83, 87, 145, 146], "minors_polynomial_degre": [58, 145], "minors_seri": [58, 145], "minrank": [50, 51, 52, 53, 54, 55, 146], "mit": 146, "mitm": [102, 103, 105], "miura": 146, "mm": 80, "mmt11": [101, 102, 103, 104, 146], "mo15": [107, 117, 146], "model": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "modifi": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "modul": [29, 30, 34, 145], "modulo": 45, "monomi": [45, 48], "more": 21, "most": [19, 41, 132, 144], "motwani": 105, "mou": 146, "mpkc": [37, 132], "mq": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 132], "mq_algorithm": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 145], "mq_constant": 145, "mq_estim": 145, "mq_helper": 145, "mq_problem": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 145], "mqalgorithm": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42], "mqestim": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49], "mqproblem": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 145], "mr": [55, 57], "mr_algorithm": [50, 51, 52, 53, 54, 145], "mr_constant": 145, "mr_estim": 145, "mr_helper": 145, "mr_problem": [50, 51, 52, 53, 54, 55, 145], "mralgorithm": [50, 51, 52, 53, 54, 55, 57], "mre": 57, "mrestim": [50, 51, 52, 53, 54, 55, 57, 58, 59], "mrp": 59, "mrproblem": [50, 51, 52, 53, 54, 55, 59, 145], "multipl": [25, 27, 46, 59, 88, 137, 138, 144, 146], "multivari": 146, "must": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 144], "n": [10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 144, 146], "n1": [33, 44, 145], "n_1": 33, "n_reduc": 58, "nakamura": 146, "nalgorithm": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 145], "name": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "nb": 83, "nb_fq_syz": [87, 145], "nb_fqm": [87, 145], "ncolumn": [59, 145], "nearest": [102, 107, 112, 114, 117, 146], "necessari": [2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 55, 60, 61, 62, 63, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 135, 139], "need": [12, 29, 61, 74, 145], "neg": [45, 48], "neiger": 146, "neighbor": [102, 107, 112, 114, 146], "neighbour": 117, "new": [78, 146], "ngate": [144, 145], "nicola": 146, "niederhagen": 146, "nm": 48, "nmatric": [59, 145], "nmonomi": 145, "nmonomials_of_degre": [45, 48, 145], "nmonomials_up_to_degre": [45, 48, 145], "nmonomialseri": [48, 145], "nn": [103, 105], "non": [41, 45, 47, 48], "none": [4, 15, 25, 27, 41, 44, 45, 46, 47, 48, 49, 57, 59, 65, 72, 86, 88, 97, 110, 111, 112, 113, 114, 115, 116, 120, 128, 137, 138, 141, 143], "nonzero": 79, "norm_form": 64, "normal": 144, "normal_form": [14, 64, 145], "note": 37, "now": 94, "npolynomi": [27, 46, 47, 138, 145], "npolynomials_reduc": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 145], "nprime": [54, 57, 145], "nrow": [59, 145], "nsolut": [8, 9, 15, 17, 32, 44, 46, 59, 65, 67, 72, 74, 88, 97, 99, 120, 122, 128, 130, 142], "number": [4, 5, 8, 9, 12, 15, 17, 18, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 65, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 97, 99, 114, 117, 120, 121, 122, 128, 129, 130, 131, 137, 138, 141, 142, 143, 144], "number_of_hash": [27, 138], "number_of_weight_d_codeword": [66, 145], "nvariabl": [27, 30, 38, 40, 46, 47, 138, 145], "nvariables_reduc": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 145], "nw": [14, 73, 145], "nw_prime": 14, "o": [6, 7, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 34, 36, 38, 39, 40, 42, 44, 86, 120, 126, 131, 132, 133, 134, 135, 137, 139, 141, 144, 146], "object": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 47, 48, 55, 60, 61, 62, 63, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 135, 139, 141, 142, 143, 144], "observ": 146, "obtain": [18, 19, 20, 22, 50, 51, 52, 53, 54, 55], "off": 146, "oil": [21, 22, 25, 27, 134, 146], "oj": [81, 82], "oj02": [81, 82, 146], "oj1": [81, 86, 145], "oj2": [82, 86, 145], "olivi": 146, "one": [27, 34, 50, 51, 52, 53, 54, 55, 70, 72, 74, 131, 138, 144], "onli": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 141, 144], "op_on_base_field": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "oper": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142], "operations_on_base_field": 88, "optim": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143], "optimal_paramet": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "optimis": 144, "optimization_parameter_1": [6, 145], "optimization_parameter_2": [6, 145], "optimization_parameter_3": [6, 145], "option": [21, 28, 30, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 55, 57, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 102, 118, 120, 122, 126, 128, 130, 137, 138, 139, 142], "opu": 146, "order": [25, 27, 37, 41, 44, 45, 46, 47, 49, 57, 59, 86, 88, 137, 138, 144], "order_of_the_field": [27, 46, 59, 138, 145], "order_oil_spac": [27, 145], "org": 146, "orgin": 78, "origin": [32, 68, 69], "otherwis": [46, 129, 144], "our": 31, "ourivski": 146, "ourivski_johansson_1": 145, "ourivski_johansson_2": 145, "output": [4, 8, 15, 18, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "over": [5, 9, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 46, 47, 48, 59, 83, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 123, 124, 125, 126, 130, 146], "overdefin": [46, 146], "ozerov": [107, 112, 114, 117, 146], "p": [4, 19, 22, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 91, 93, 97, 100, 101, 102, 103, 104, 105, 106, 107, 109, 120, 123, 125, 128, 145, 146], "p1": [97, 101, 102, 103, 104, 105, 107, 120, 145], "p2": [101, 105, 107, 120, 145], "p_max": 87, "p_min": 87, "p_rang": 102, "page": 145, "pair": 144, "paolo": [10, 146], "paper": 6, "par_nam": [110, 111, 112, 113, 114, 115, 116], "paradigm": [18, 131], "param": 87, "paramet": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144], "parameter_nam": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "parameter_rang": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "paramt": 122, "pariti": [28, 32, 75, 76, 79, 146], "partial": 103, "patarin": 146, "paturi": 146, "pdf": 146, "pe": 63, "pe_algorithm": 145, "pe_const": 145, "pe_estim": 145, "pe_help": 145, "pe_problem": 145, "pealgorithm": [12, 60, 61, 62, 63], "peestim": [12, 60, 61, 62, 63, 64, 65, 66, 67], "peopl": 146, "peproblem": [10, 12, 60, 61, 62, 63, 67, 145], "per": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "perform": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 94], "perlner": 146, "perm": 92, "permut": [10, 11, 12, 60, 61, 62, 65, 67, 68, 69, 70, 72, 74, 119, 127, 145, 146], "perret": 146, "persichetti": 146, "pet11": [125, 146], "peter": 146, "petteri": 146, "philipp": 146, "pierr": 146, "pii": 146, "pil": 146, "pk_algorithm": 145, "pk_constant": 145, "pk_estim": 145, "pk_helper": 145, "pk_problem": 145, "pkalgorithm": [68, 69, 70], "pkestim": [68, 69, 70, 71, 72, 73, 74], "pkpattack": [68, 69], "pkproblem": [68, 69, 70, 74, 145], "pl": [100, 120, 145], "polyeqsoda2017submit": 146, "polynomi": [4, 5, 8, 15, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 57, 65, 72, 86, 97, 120, 128, 131, 134, 137, 138, 141, 146], "posit": [41, 47, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "possibl": [34, 75, 82], "power": [134, 144], "pp": 107, "pqmayo": 146, "pra62": [108, 124, 146], "practic": 146, "prang": [120, 128, 145, 146], "prangescipymodel": [115, 145], "precis": [4, 8, 15, 25, 44, 47, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 144, 145], "predefin": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118], "predifin": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "preimag": [18, 131], "preprocess": 31, "present": 36, "prettyt": 144, "previou": 36, "prime": 144, "print": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "privat": 134, "prob": [86, 120, 141], "probabilist": [28, 32, 33, 39], "problem": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 146], "problem_parameter1": [8, 9], "problem_parameter2": [8, 9], "process": [101, 102, 103, 104, 105, 106, 107, 109], "prod_": 41, "proper": 87, "properti": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 141], "propos": [21, 37, 68, 134], "proposit": 35, "provid": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "public": [0, 19, 132, 146], "publici": 21, "punctur": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "pytest": [4, 15, 25, 44, 57, 65, 72, 120, 137], "q": [10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 137, 138, 144, 146], "quadrat": [28, 32, 36, 37, 38, 41, 49, 81, 82, 146], "quadratic_system": [41, 49, 145], "quantum": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "r": [4, 5, 50, 51, 52, 53, 54, 55, 57, 58, 59, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 145, 146], "r_int": [98, 145], "rai": 146, "rainbow": 146, "ramamohan": 146, "random": [78, 146], "random_sparse_vec_orbit": [66, 145], "randomli": 78, "rang": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "rank": [50, 51, 52, 53, 54, 55, 57, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 146], "ranksd": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "ranksd_algorithm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 145], "ranksd_const": 145, "ranksd_estim": [88, 145], "ranksd_help": 145, "ranksd_problem": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 145], "ranksdalgorithm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86], "ranksdestim": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88], "ranksdproblem": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 145], "rat": 146, "rate": 146, "rather": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "reason": 94, "recent": [41, 144], "reconcili": [20, 22, 133], "reconciliation_attack": 145, "reconciliationattack": [22, 25, 145], "recov": [0, 1], "recoveri": [4, 25, 137], "reduc": [36, 50, 51, 52, 53, 54, 55, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "reduct": 146, "refer": [6, 104, 105, 145], "regard": 104, "regisd_enum": 145, "regisd_perm": 145, "regisd_rep": 145, "regsd": 95, "regsd_algorithm": 145, "regsd_const": 145, "regsd_estim": 145, "regsd_help": 145, "regsd_problem": 145, "regsdalgorithm": [89, 90, 91, 92, 93, 94, 95], "regsdestim": [89, 90, 91, 92, 93, 94, 95, 97, 98, 99], "regsdproblem": [89, 90, 91, 92, 93, 94, 95, 99, 145], "regular": [41, 49, 99, 146], "regular_system": [41, 145], "regularisd": [91, 92, 93], "regularisdenum": [91, 97, 145], "regularisdperm": [92, 97, 145], "regularisdrep": [93, 97, 145], "relev": [44, 86, 120, 141], "render": 143, "rep": 93, "report": 18, "repres": [41, 47, 49, 121, 144], "represent": [117, 119, 127, 145], "representations_asymptot": [117, 145], "requir": 36, "reset": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 145], "respect": [29, 41], "restart": [101, 107], "result": [29, 31], "return": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 144], "return_pair": 144, "revisit": 146, "ring": [45, 48], "root": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "rough": 62, "round": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 144], "round_or_trunc": [144, 145], "row": [29, 57, 59, 72, 74, 83, 87], "rrw": 146, "rsde": 86, "rsdp": 88, "ruatta": 146, "ruben": 146, "run": 73, "runtim": [27, 46, 117, 138], "ryan": 146, "s0885064x12000611": 146, "s10623": 146, "sagemath": 145, "sai": 37, "salt": 131, "salvi": 146, "sampl": 145, "santini": [10, 146], "sbc": [70, 72, 145], "sbc22": [68, 69, 146], "sbc_isd": [71, 145], "sbc_u": [71, 145], "scale": [0, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 139], "scheme": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 134, 137, 141, 146], "schrek": 146, "scienc": 146, "sciencedirect": 146, "scipi": 117, "scipymodel": [110, 111, 112, 113, 114, 115, 116], "script": [10, 11, 12, 60, 61], "sd": [0, 1, 4, 13], "sd_algorithm": 145, "sd_attack": 145, "sd_constant": 145, "sd_estim": 145, "sd_helper": 145, "sd_key_attack": 145, "sd_msg_attack": 145, "sd_paramet": [10, 11, 12, 60, 61, 65, 72], "sd_problem": 145, "sdalgorithm": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122], "sdattack": [94, 97, 145], "sdestim": [0, 65, 72, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "sdfq_algorithm": 145, "sdfq_constant": 145, "sdfq_estim": 145, "sdfq_helper": 145, "sdfq_problem": 145, "sdfqalgorithm": [123, 124, 125, 126], "sdfqestim": [10, 11, 12, 60, 61, 123, 124, 125, 126, 127, 128, 129, 130], "sdfqproblem": [123, 124, 125, 126, 130, 145], "sdkeyattack": [0, 4, 145], "sdmsgattack": [1, 4, 145], "sdproblem": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123, 124, 125, 145], "sdworkfactormodel": [110, 111, 112, 113, 114, 115, 116, 117], "search": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145, 146], "secomm": [68, 69], "second": [8, 9, 33, 103, 121, 129, 144], "secret": [0, 5], "section": [18, 21, 29], "secur": [107, 146], "see": [18, 37, 104, 105], "select": [54, 121, 129], "self": [47, 67, 146], "semi": [41, 49], "semi_regular_system": [41, 49, 145], "sen06": [62, 146], "sendrier": 146, "sequenc": 41, "seri": [47, 48], "set": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 121, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 139, 146], "set_operations_on_base_field": [88, 145], "set_paramet": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "set_parameter_rang": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "sever": 36, "shamir": [20, 21, 25, 133, 134, 146], "short": 146, "should": [72, 74, 86, 117, 120, 141], "show": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 145], "show_all_paramet": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "show_quantum_complex": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "show_tilde_o_tim": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "shown": 34, "shuhei": 146, "sign": [18, 131], "signatur": [18, 131, 134, 146], "significantli": 36, "sinc": 21, "singl": 144, "size": [15, 17, 18, 31, 48, 65, 67, 72, 74, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 123, 124, 125, 128, 130], "skip": [4, 15, 25, 44, 57, 65, 72, 120, 137], "skip_long_doctest": [4, 15, 25, 44, 57, 65, 72, 120, 137], "sm": [54, 83], "small": 146, "smaller": 146, "smallest": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141], "smfq": 87, "smith": 146, "sof\u00eda": 146, "solut": [5, 8, 9, 15, 17, 27, 28, 31, 32, 34, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 65, 67, 72, 74, 88, 97, 99, 120, 122, 128, 130, 138, 142], "solv": [0, 1, 5, 17, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 46, 50, 51, 52, 53, 54, 55, 57, 59, 67, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 94, 99, 122, 132, 133, 138, 142, 146], "some": [21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 65], "sort": [118, 126], "space": [21, 22, 25, 27, 88, 131], "spaenlehau": 146, "spec": 146, "special": [31, 32, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 120, 130, 141], "specif": [0, 1, 2, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 146], "specifi": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "speed": 102, "split": [62, 146], "springer": [107, 146], "sqrt": 30, "squar": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "ssa": [65, 145], "start": [101, 102, 103, 104, 105, 106, 107, 109], "state": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141], "ste88": [109, 125, 146], "step": 31, "sterl": 117, "stern": [4, 120, 128, 145, 146], "sternscipymodel": [116, 145], "store": [5, 9, 17, 27, 29, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142], "str": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 144], "straightforward": [19, 132], "strassen": [54, 58, 145], "strategi": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 81, 82], "subclass": [86, 120, 139, 141], "subcod": [16, 73, 146], "subroutin": [10, 11, 12, 60, 61, 65], "subset": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 146], "subspac": [76, 79], "subsystem": [29, 37], "success": [12, 61], "suggest": 21, "suguru": 146, "sum": [45, 117, 146], "sum_of_binomial_coeffici": [45, 145], "support": [16, 62, 73, 75, 78, 83, 87, 146], "support_minor": 145, "supportminor": [54, 57, 83, 86, 145], "suppx": [76, 79, 81, 82], "switch": [121, 129], "syndrom": [0, 1, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 130, 146], "system": [20, 28, 31, 32, 36, 37, 38, 39, 41, 46, 47, 49, 75, 76, 79, 80, 81, 82, 83, 133, 146], "syzygi": 87, "t": [4, 5, 58, 77, 78, 86, 145, 146], "t1": 144, "t2": 144, "tabl": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 144], "tacier": 146, "takagi": 146, "take": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "taken": [35, 89, 90], "tamaki": 146, "tanja": 146, "target": [57, 59, 86, 87, 88], "target_rank": [59, 88, 145], "target_weight": 117, "techniqu": [107, 146], "term": 104, "test": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 144], "th": 47, "than": [4, 8, 15, 25, 36, 41, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143], "thei": 29, "them": [73, 78], "theori": [107, 146], "theta": [25, 27, 44, 46, 50, 51, 52, 53, 54, 59, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 137, 138, 144, 145], "thi": [21, 29, 30, 31, 34, 36, 75, 76, 77, 78, 79, 80, 81, 82, 83, 104, 134, 145], "thoma": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 146], "those": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "tild": [6, 7, 23, 25, 28, 29, 30, 31, 33, 34, 36, 38, 39, 40, 42, 44, 86, 120, 126, 131, 132, 133, 134, 135, 137, 139, 141, 144], "tilde_o_estim": [44, 120, 137], "tildeo": [86, 120, 141, 144, 145], "tillich": 146, "time": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 139, 141, 143, 146], "time_complex": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139, 145], "tit": 146, "to_bitcomplexity_memori": [5, 9, 17, 27, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142, 145], "to_bitcomplexity_tim": [5, 9, 17, 27, 46, 59, 67, 74, 88, 99, 122, 130, 138, 142, 145], "tone": 146, "total": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 121, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 137, 139, 141], "traceback": [41, 144], "trade": 146, "tradeoff": [37, 104], "tree": [119, 127, 145], "tri": [75, 76, 77, 78, 79, 80, 81, 82, 83], "trick": [72, 74], "true": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 65, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 121, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 137, 139, 144], "truncat": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143, 144], "tsuyoshi": 146, "tune": 146, "tung": 146, "tupl": [4, 15, 18, 19, 20, 21, 22, 25, 35, 37, 44, 57, 65, 72, 86, 97, 120, 128, 130, 132, 137, 141, 144], "tw12": [36, 132, 146], "two": [29, 31, 117, 121, 129, 144], "type": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 141, 144], "u": [68, 71, 72, 145, 146], "unbalanc": 146, "under": 146, "underdefin": [46, 146], "underdetermin": 146, "union": 120, "uniqu": 117, "unlimit": 102, "until": 34, "uov": [132, 135], "uov_algorithm": [131, 132, 133, 134, 145], "uov_const": 145, "uov_estim": 145, "uov_problem": [131, 132, 133, 134, 135, 145], "uovalgorithm": [131, 132, 133, 134, 135], "uovestim": [131, 132, 133, 134, 135, 137, 138], "uovproblem": [131, 132, 133, 134, 135, 138, 145], "up": [45, 48, 102], "upper": [31, 102], "upperbound": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 123, 124, 125, 126, 131, 132, 133, 134, 135, 139], "us": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 46, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 114, 118, 120, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 145, 146], "usag": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 120, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "use_parity_row": [72, 74], "use_tilde_o_tim": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141], "v": [117, 146], "valid": 87, "valu": [0, 1, 2, 6, 7, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 119, 121, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 138, 139, 144], "valueerror": [41, 144], "vanessa": 146, "var_rang": 118, "variabl": [25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 54, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 107, 131, 137, 138], "variant": [25, 29, 44, 54, 57, 58, 97, 137, 145], "varsharmov": 66, "vector": [21, 22, 29, 50, 51, 52, 53, 54, 55, 57, 59, 75, 88, 102, 117, 131], "vector_length": 117, "verbel": 146, "verboseinform": [14, 64, 71, 119, 127, 145], "version": [10, 11, 12, 60, 61, 68, 69], "via": 117, "vincent": 146, "vinegar": [21, 134, 146], "vits": 146, "volltext": 146, "w": [4, 5, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 65, 66, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 137, 145, 146], "w1": [69, 72, 102, 105, 120, 145], "w11": [102, 145], "w2": [102, 103, 105, 120, 145], "w_k": [21, 25], "w_prime": [10, 15, 145], "wa": [101, 106], "wai": 121, "ward": 146, "wardbeullen": [11, 12, 60, 61], "we": 31, "weakli": 67, "weight": [5, 66, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 120, 122, 123, 124, 125, 128, 130, 146], "weight_to_cancel": 117, "when": [30, 36, 40], "where": [29, 37, 73, 83, 132, 144], "whether": [44, 128, 129, 144], "which": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 50, 51, 52, 53, 54, 55, 60, 61, 62, 63, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 118, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 137, 139, 141], "whip": [25, 27], "whipping_paramet": [27, 145], "whose": [72, 74], "wiedemann": 29, "willi": 146, "william": 146, "wit": 49, "witness_degre": 145, "wolf": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 146], "word": [12, 61, 66], "work": [18, 29, 30, 131], "workfactor": [110, 111, 112, 113, 114, 115, 116], "workfactor_accuraci": 120, "workfactor_help": 145, "wrap": [117, 145], "www": 146, "x": [18, 25, 47, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98, 117, 131, 137, 144, 145, 146], "x_15": 146, "xl": 29, "y": [18, 25, 117, 131, 137, 145, 146], "yang": 146, "yasufumi": 146, "yin": 146, "you": 145, "yu": 146, "z": [41, 117, 146], "zero": 78, "zweyding": 146, "\u014d": [4, 8, 15, 25, 44, 57, 65, 72, 86, 97, 120, 128, 137, 141, 143]}, "titles": ["sd_key_attack", "sd_msg_attack", "bike_algorithm", "bike_constants", "bike_estimator", "bike_problem", "dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "bbps", "beullens", "leon", "le_algorithm", "le_constants", "le_estimator", "le_helper", "le_problem", "claw_finding", "direct_attack", "intersection_attack", "kipnis_shamir", "reconciliation_attack", "mayo_algorithm", "mayo_constants", "mayo_estimator", "mayo_helper", "mayo_problem", "bjorklund", "booleansolve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hashimoto", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "big_k", "bruteforce", "kernel_search", "minors", "support_minors", "mr_algorithm", "mr_constants", "mr_estimator", "mr_helper", "mr_problem", "beullens", "leon", "ssa", "pe_algorithm", "pe_constants", "pe_estimator", "pe_helper", "pe_problem", "kmp", "sbc", "pk_algorithm", "pk_constants", "pk_estimator", "pk_helper", "pk_problem", "basis_enumeration", "grs", "guessing_enhanced_grs", "hybrid_linearization", "improved_grs", "max_minors", "ourivski_johansson_1", "ourivski_johansson_2", "support_minors", "ranksd_algorithm", "ranksd_constants", "ranksd_estimator", "ranksd_helper", "ranksd_problem", "ccj", "ccj_lin", "regisd_enum", "regisd_perm", "regisd_rep", "sd_attack", "regsd_algorithm", "regsd_constants", "regsd_estimator", "regsd_helper", "regsd_problem", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "bjmm_plus", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "leebrickell", "prange", "stern", "sdfq_algorithm", "sdfq_constants", "sdfq_estimator", "sdfq_helper", "sdfq_problem", "collision_attack", "direct_attack", "intersection_attack", "kipnis_shamir", "uov_algorithm", "uov_constants", "uov_estimator", "uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "CryptographicEstimators Library", "References"], "titleterms": {"ball_collis": [100, 110], "base_algorithm": 139, "base_const": 140, "base_estim": 141, "base_problem": 142, "basis_enumer": 75, "bbp": 10, "beullen": [11, 60], "big_k": 50, "bike_algorithm": 2, "bike_const": 3, "bike_estim": 4, "bike_problem": 5, "bikealgorithm": 145, "bikeestim": 145, "bjmm": [101, 111], "bjmm_dw": 102, "bjmm_pdw": 103, "bjmm_plu": 104, "bjorklund": 28, "booleansolve_fxl": 29, "both_mai": [105, 112], "bruteforc": 51, "ccj": 89, "ccj_lin": 90, "cgmta": 30, "claw_find": 18, "collision_attack": 131, "crossbr": 31, "cryptographicestim": 145, "degree_of_regular": 41, "dinur1": 32, "dinur2": 33, "direct_attack": [19, 132], "dumer": [106, 113], "dummy_algorithm": 7, "dummy_algorithm1": 6, "dummy_estim": 8, "dummy_problem": 9, "dummyalgorithm": 145, "dummyestim": 145, "estimation_render": 143, "exhaustive_search": 34, "f5": 35, "gener": 145, "gr": 76, "guessing_enhanced_gr": 77, "hashimoto": 36, "helper": 144, "hilbert": 47, "hybrid_f5": 37, "hybrid_linear": 78, "improved_gr": 79, "indic": 145, "inform": 145, "intersection_attack": [20, 133], "kernel_search": 52, "kipnis_shamir": [21, 134], "kmp": 68, "kpg": 38, "le_algorithm": 13, "le_const": 14, "le_estim": 15, "le_help": 16, "le_problem": 17, "lealgorithm": 145, "leebrickel": 123, "leestim": 145, "leon": [12, 61], "librari": 145, "lokshtanov": 39, "max_minor": 80, "may_ozerov": [107, 114], "mayo_algorithm": 23, "mayo_const": 24, "mayo_estim": 25, "mayo_help": 26, "mayo_problem": 27, "mayoalgorithm": 145, "mayoestim": 145, "mht": 40, "minor": 53, "mq_algorithm": 42, "mq_constant": 43, "mq_estim": 44, "mq_helper": 45, "mq_problem": 46, "mqalgorithm": 145, "mqestim": 145, "mr_algorithm": 55, "mr_constant": 56, "mr_estim": 57, "mr_helper": 58, "mr_problem": 59, "mralgorithm": 145, "mrestim": 145, "nmonomi": 48, "ourivski_johansson_1": 81, "ourivski_johansson_2": 82, "pe_algorithm": 63, "pe_const": 64, "pe_estim": 65, "pe_help": 66, "pe_problem": 67, "pealgorithm": 145, "peestim": 145, "pk_algorithm": 70, "pk_constant": 71, "pk_estim": 72, "pk_helper": 73, "pk_problem": 74, "pkalgorithm": 145, "pkestim": 145, "prang": [108, 115, 124], "ranksd_algorithm": 84, "ranksd_const": 85, "ranksd_estim": 86, "ranksd_help": 87, "ranksd_problem": 88, "ranksdalgorithm": 145, "ranksdestim": 145, "reconciliation_attack": 22, "refer": 146, "regisd_enum": 91, "regisd_perm": 92, "regisd_rep": 93, "regsd_algorithm": 95, "regsd_const": 96, "regsd_estim": 97, "regsd_help": 98, "regsd_problem": 99, "regsdalgorithm": 145, "regsdestim": 145, "sbc": 69, "sd_algorithm": 118, "sd_attack": 94, "sd_constant": 119, "sd_estim": 120, "sd_helper": 121, "sd_key_attack": 0, "sd_msg_attack": 1, "sd_problem": 122, "sdalgorithm": 145, "sdestim": 145, "sdfq_algorithm": 126, "sdfq_constant": 127, "sdfq_estim": 128, "sdfq_helper": 129, "sdfq_problem": 130, "sdfqalgorithm": 145, "sdfqestim": 145, "sdworkfactormodel": 145, "seri": 145, "ssa": 62, "stern": [109, 116, 125], "support_minor": [54, 83], "tabl": 145, "uov_algorithm": 135, "uov_const": 136, "uov_estim": 137, "uov_problem": 138, "uovalgorithm": 145, "uovestim": 145, "witness_degre": 49, "workfactor_help": 117}})