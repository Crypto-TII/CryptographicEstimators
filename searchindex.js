Search.setIndex({"docnames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/boolean_solve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "helper", "index"], "filenames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/boolean_solve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "helper.rst", "index.rst"], "titles": ["dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "bjorklund", "boolean_solve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "helper", "TII Cryptanalysis Library"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51], "cryptographic_estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52], "dummyestim": [0, 1, 2, 3], "dummyalgorithm": [0, 1], "dummyalgorithm1": [0, 52], "problem": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 47, 50], "dummyproblem": [0, 1, 3, 52], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 46, 47, 49, 50], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51], "construct": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 32, 33, 44, 46, 49, 50], "an": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 32, 33, 44, 46, 49, 50, 51], "instanc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 32, 33, 44, 46, 49, 50], "estim": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 51, 52], "add": [0, 44], "refer": [0, 49, 52], "correpond": 0, "paper": [0, 49], "here": [0, 44, 49], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 46, 47, 49, 50, 51], "object": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 42, 47, 49, 50], "includ": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "necessari": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 28, 29, 30, 31, 32, 33, 42, 47, 49], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 47, 49, 50], "memory_access": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 51, 52], "specifi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 46, 47, 49, 50, 51], "access": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "cost": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "model": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 34, 35, 36, 37, 38, 39, 40, 47, 49, 51], "default": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 27, 42, 44, 47, 49, 51], "0": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 25, 26, 27, 28, 29, 32, 33, 41, 44, 47, 49, 51], "choic": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "constant": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "1": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 26, 27, 28, 29, 31, 41, 44, 47, 49, 51], "logarithm": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 27, 46, 47, 49, 50, 51], "2": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 41, 44, 46, 47, 49, 51], "squar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 27, 47, 49, 51], "root": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "3": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 26, 27, 31, 35, 38, 44, 47, 49, 51], "cube": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "deploi": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "custom": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "function": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 42, 47, 51], "which": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49, 51], "take": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "total": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "usag": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 47, 49, 51], "complexity_typ": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 52], "complex": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 46, 47, 49, 50], "type": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "consid": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 44, 47, 49], "tild": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 47, 49, 51], "o": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 22, 23, 47, 49, 51], "exampl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 49, 52], "sage": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "from": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 52], "import": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 52], "dummy_problem": [0, 52], "e": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 21, 26, 44, 49], "100": [0, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 49], "50": [0, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44], "dummi": [0, 1], "algorithm": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 51, 52], "properti": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 45, 46, 47, 49, 50], "attribut": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "_complexity_typ": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "get_optimal_parameters_dict": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "optim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49], "dictionari": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "has_optimal_paramet": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "true": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 45, 47, 49, 51], "ha": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "test": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 52], "basealgorithm": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49, 52], "baseproblem": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 46, 47, 49, 50, 52], "fals": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 45, 47, 49], "attribtu": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "_memory_access": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "memory_complex": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "optimal_paramet": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "each": [0, 1, 2, 4, 5, 7, 8, 9, 12, 14, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "valu": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 43, 47, 49, 51], "i": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 51, 52], "provid": [0, 1, 4, 5, 7, 8, 9, 12, 14, 17, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "comput": [0, 1, 4, 5, 6, 7, 8, 9, 12, 14, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 49], "done": [0, 1, 4, 5, 7, 8, 9, 12, 14, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "those": [0, 1, 4, 5, 7, 8, 9, 12, 14, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "optimization_parameter_1": [0, 52], "25": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 29], "optimization_parameter_2": [0, 52], "optimization_parameter_3": [0, 52], "10": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 49], "parameter_nam": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "list": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 49, 51, 52], "name": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 42, 45, 47, 49], "parameter_rang": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "set": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "rang": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "ar": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "search": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 42, 47, 52], "us": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 42, 44, 47, 49, 50, 52], "onli": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "quantum_time_complex": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "quantum": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "time": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "reset": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49, 52], "intern": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "state": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 47, 49], "set_parameter_rang": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "str": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 51], "min_valu": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 42, 46, 47, 50, 51], "max_valu": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "specif": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 49], "alreadi": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "must": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "fall": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "lowerbound": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "inclus": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "upperbound": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "set_paramet": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "dict": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 50], "predifin": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "subset": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47], "time_complex": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 47, 52], "problem_parameter1": [2, 3], "problem_parameter2": [2, 3], "memory_bound": [2, 19, 21, 44, 50], "inf": [2, 19, 44], "baseestim": [2, 19, 44, 49, 52], "first": [2, 3, 7, 8, 16, 22, 49, 51], "second": [2, 3, 9, 28, 49, 51], "nsolut": [2, 3, 8, 19, 21, 44, 46, 50], "number": [2, 3, 4, 8, 16, 19, 20, 21, 23, 41, 44, 46, 49, 50, 51], "solut": [2, 3, 4, 7, 8, 10, 19, 21, 44, 46, 50], "scale": [2, 3, 21, 46], "algorithm_nam": [2, 19, 44, 49, 52], "bit_complex": [2, 6, 10, 19, 44, 47, 49, 52], "describ": [2, 14, 19, 44, 49], "its": [2, 19, 29, 44, 49], "excluded_algorithms_by_default": [2, 19, 44, 49, 52], "fastest_algorithm": [2, 19, 44, 49, 52], "use_tilde_o_tim": [2, 19, 44, 49], "smallest": [2, 19, 44, 49], "\u014d": [2, 19, 44, 49], "ignor": [2, 19, 44, 49], "polynomi": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 44, 49], "factor": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 44, 49], "nalgorithm": [2, 19, 44, 49, 52], "tabl": [2, 19, 44, 49, 51], "show_quantum_complex": [2, 19, 44, 49], "show_tilde_o_tim": [2, 19, 44, 49], "show_all_paramet": [2, 19, 44, 49], "precis": [2, 19, 22, 44, 49, 51, 52], "truncat": [2, 19, 44, 49, 51], "print": [2, 19, 44, 49], "show": [2, 19, 44, 49, 52], "decim": [2, 19, 44, 49], "digit": [2, 19, 44, 49, 51], "output": [2, 19, 44, 49], "rather": [2, 19, 44, 49], "than": [2, 16, 19, 44, 49], "round": [2, 19, 44, 49, 51], "contain": [3, 49], "over": [3, 5, 6, 7, 8, 9, 12, 13, 14, 16, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 49], "expected_number_solut": [3, 21, 46, 50, 52], "expect": [3, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 46, 50], "exist": [3, 21, 46, 50], "get_paramet": [3, 46, 52], "to_bitcomplexity_memori": [3, 21, 46, 50, 52], "elements_to_stor": [3, 21, 46, 50], "bit": [3, 19, 21, 31, 46, 47, 49, 50], "associ": [3, 21, 46, 49, 50], "given": [3, 7, 14, 16, 20, 21, 23, 46, 47, 49, 50], "element": [3, 21, 46, 50], "store": [3, 21, 46, 49, 50], "oper": [3, 19, 21, 46, 47, 49, 50], "to_bitcomplexity_tim": [3, 21, 46, 50, 52], "basic_oper": [3, 21, 46, 50], "correspond": [3, 21, 46], "certain": 3, "amount": 3, "basic": [3, 21, 47, 50], "mqestim": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24], "mqalgorithm": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "mqproblem": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 52], "et": [4, 14], "al": [4, 14], "probabilist": [4, 8, 9, 14], "solv": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 21, 50], "mq": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "gf": [4, 5, 8, 9, 14], "bkw19": 4, "It": [4, 6, 8, 9, 14], "find": [4, 7], "qudract": 4, "system": [4, 7, 8, 12, 13, 14, 16, 21, 22, 24, 49], "pariti": [4, 8, 49], "h": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 22, 41], "extern": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 49], "hybrid": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19], "mq_problem": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 52], "n": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 44, 45, 46, 49], "m": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 24, 49], "12": [4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 24, 31, 44, 49], "q": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 46, 49], "bj\u00f6rklund": 4, "variabl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 31], "w": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 46], "linear": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 26, 29, 30, 31, 42, 49], "algebra": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 49], "theta": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 52], "expon": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 25], "convers": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21], "get_reduced_paramet": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 52], "lambda_": [4, 8, 19, 52], "linear_algebra_const": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 52], "mq_algorithm": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 52], "5": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 44, 49], "npolynomials_reduc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 52], "after": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 49], "appli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 28], "thoma": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 26], "wolf": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "strategi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "60": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19], "20": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 26, 44, 49], "18": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 26], "nvariables_reduc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 52], "fix": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "some": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 49], "booleansolvefxl": [5, 19, 52], "booleansolv": 5, "fxl": 5, "respect": [5, 16], "bfss11": 5, "ckp": 5, "thei": [5, 49], "work": [5, 6, 49], "guess": 5, "k": [5, 6, 7, 12, 19, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 44, 45, 46, 49, 52], "consist": [5, 7, 14, 49], "result": [5, 7, 49], "subsystem": [5, 12], "7": [5, 6, 7, 19, 22, 23, 24, 25, 44, 49], "4": [5, 9, 13, 15, 16, 19, 22, 23, 24, 44, 49], "variant": [5, 19, 52], "determinist": [5, 19], "cgmt": 6, "A": [6, 25, 26, 27, 28, 29, 30, 31, 33, 44, 49], "ani": [6, 7, 41, 49], "finit": [6, 12, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 49], "field": [6, 7, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 46, 49, 50], "when": [6, 15], "integ": [6, 16, 20, 22, 23, 24, 49], "2k": 6, "leq": [6, 15, 49], "cgmt02": 6, "note": 6, "In": [6, 7, 25, 26, 29, 30, 31, 49], "thi": [6, 7, 10, 49, 52], "modul": [6, 10, 49, 52], "compleixti": 6, "min": [6, 45], "floor": 6, "sqrt": 6, "41": [6, 19], "nvariabl": [6, 13, 15, 21, 22, 52], "339850002884624": 6, "23": [6, 12, 19, 44], "137080884841787": 6, "The": [7, 8, 10, 12, 13, 15, 16, 49], "jv18": 7, "two": [7, 49, 51], "step": 7, "preprocess": 7, "we": [7, 44, 49], "degre": [7, 11, 12, 16, 20, 22, 23, 24, 52], "d": [7, 19, 20, 23, 25, 26, 27, 49, 52], "ideal": [7, 20], "gener": [7, 10, 20], "initi": [7, 26, 27, 28, 29, 30, 31, 33, 49], "everi": 7, "special": [7, 8, 49], "final": 7, "found": [7, 10, 49], "direct": 7, "our": 7, "size": [7, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 46], "formula": [7, 10], "dua20": 7, "either": [7, 49, 51], "max_d": [7, 52], "upper": [7, 27, 49], "bound": [7, 27, 49], "macaulai": 7, "matrix": 7, "dinurfirst": [8, 19, 52], "dinur": [8, 9], "din21a": [8, 9], "mani": [8, 49], "quadrat": [8, 12, 13, 16, 24, 49], "These": [8, 49], "come": 8, "origin": 8, "kappa": [8, 19, 52], "9": [8, 14, 16, 19, 22, 33, 44], "dinursecond": [9, 19, 52], "din21b": 9, "idea": [9, 12, 49], "n1": [9, 19, 49, 52], "n_1": 9, "exhaustivesearch": [10, 19, 52], "exhaust": [10, 12], "evalu": 10, "possibl": 10, "until": 10, "one": [10, 49, 51], "shown": 10, "bcccnsy10": 10, "228818690495881": 10, "e0": 10, "15": [10, 11, 16, 19, 22, 24, 44, 49], "e1": 10, "17": [10, 19], "917197145402291": 10, "tupl": [11, 12, 19, 44, 49], "degree_of_polynomi": [11, 12, 52], "f5_": 11, "24": [11, 13, 15, 49], "578308707446713": 11, "19": [11, 19, 49], "934452517671986": 11, "hybridf5": [12, 19, 52], "propos": 12, "bfp09": 12, "bfp12": 12, "tradeoff": 12, "between": [12, 49, 51], "groebner": 12, "sai": 12, "where": [12, 49], "order": [12, 16, 19, 20, 21, 22, 24, 49], "grobner": 12, "f5": [12, 19, 52], "mpkc": 12, "256": 12, "31": [12, 19, 49], "equat": [13, 14, 16, 20], "even": [13, 49], "characterist": [13, 50], "kpg99": 13, "comp": [13, 15], "183": [13, 15], "8": [13, 15, 19, 22, 26, 30, 44, 49], "61636217728924": [13, 15], "628922047916475": [13, 15], "lptwy17": 14, "determin": [14, 49], "delta": [14, 19, 52], "mht13": 15, "generic_system": [16, 52], "int": [16, 19, 21, 22, 23, 24, 30, 35, 41, 44, 45, 46, 51], "none": [16, 19, 21, 22, 23, 24, 34, 35, 36, 37, 38, 39, 40, 44, 49], "regular": [16, 24], "repres": [16, 22, 24], "traceback": [16, 20], "most": [16, 20, 49], "recent": [16, 20], "call": [16, 20, 49], "last": [16, 20], "valueerror": [16, 20, 49], "defin": [16, 21, 49], "quadratic_system": [16, 24, 52], "16": [16, 19, 20, 22, 44, 49], "regular_system": [16, 52], "equal": [16, 21], "semi_regular_system": [16, 24, 52], "semi": [16, 24], "f_1": 16, "ldot": 16, "f_m": 16, "d_1": 16, "d_m": 16, "index": [16, 49, 52], "non": [16, 20, 22, 23], "posit": [16, 22, 49], "coeffici": [16, 41, 45], "dfrac": 16, "prod_": 16, "z": [16, 22, 23, 41, 49], "d_i": 16, "If": [16, 20, 49], "follow": [16, 49, 52], "sequenc": [16, 49], "cdot": [16, 49], "bigg": 16, "excluded_algorithm": [19, 44, 49], "exclud": [19, 44, 49], "relev": [19, 49], "42": [19, 44], "45": [19, 20], "bjorklund": [19, 52], "80": [19, 22], "6": [19, 20, 22, 23, 44, 49], "crossbr": [19, 52], "39": [19, 44], "37": 19, "57": 19, "33": 19, "44": 19, "43": 19, "lokshtanov": [19, 52], "93": 19, "451": 19, "316": 19, "584": 19, "240": 19, "672": 19, "785": 19, "32": 19, "111": 19, "493": 19, "349": 19, "801": 19, "966": 19, "11": [19, 44, 49], "720": 19, "30": [19, 49], "972": 19, "158": 19, "169": 19, "906": 19, "67": 19, "123": 19, "105": 19, "62": 19, "26": [19, 49], "174": 19, "tilde_o_estim": [19, 44], "107": [19, 26], "71": 19, "98": 19, "70": 19, "95": [19, 44], "89": 19, "27": 19, "88": [19, 44], "87": 19, "167": 19, "164": 19, "109": 19, "99": 19, "72": 19, "626": 19, "147": 19, "13": [19, 44], "19677": 19, "las_vega": 19, "38": 19, "40": [19, 22], "28": [19, 23, 44, 49], "3057": 19, "18665241123894338": 19, "592592592592592": 19, "35": 19, "8765": 19, "ngate": [20, 52], "gate": 20, "multipl": [20, 21, 49], "prime": 20, "power": [20, 22], "nmonomials_of_degre": [20, 23, 52], "monomi": [20, 23], "ring": [20, 22, 23, 52], "modulo": 20, "nmonomials_up_to_degre": [20, 23, 52], "up": [20, 23, 27], "56": [20, 23], "sum_of_binomial_coeffici": [20, 52], "l": [20, 25, 26, 29, 30, 31, 33, 44, 49, 52], "sum_": 20, "j": [20, 25, 49], "binom": [20, 45, 52], "neg": [20, 23], "maximum": [21, 49, 50], "allow": [21, 42, 50], "get_problem_paramet": [21, 52], "is_defined_over_finite_field": [21, 52], "is_overdefined_system": [21, 52], "overdefin": 21, "is_square_system": [21, 52], "is_underdefined_system": [21, 52], "underdefin": 21, "npolynomi": [21, 22, 52], "order_of_the_field": [21, 52], "runtim": [21, 41], "addit": [21, 46, 49], "seri": [22, 23], "hilbertseri": [22, 52], "f_2": 22, "first_nonpositive_integ": [22, 52], "14": [22, 44], "ration": [22, 49], "125": 22, "140": [22, 44], "nmonomialseri": [23, 52], "max_prec": 23, "nm": 23, "f_5": 23, "126": 23, "210": 23, "series_monomials_of_degre": [23, 52], "21": [23, 44, 49], "246": 23, "426": 23, "series_monomials_up_to_degre": [23, 52], "84": 23, "456": 23, "882": 23, "wit": 24, "sdestim": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "sdalgorithm": [25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44], "ballcollis": [25, 44, 52], "sdproblem": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 52], "ball": [25, 34], "collis": [25, 34], "decod": [25, 26, 27, 28, 29, 30, 31, 32, 33], "blp11": 25, "bernstein": 25, "lang": 25, "t": 25, "peter": 25, "c": [25, 41, 49], "smaller": 25, "annual": [25, 26, 31], "cryptologi": [25, 26], "confer": [25, 26, 29, 31], "pp": [25, 26, 29, 30, 31], "743": 25, "760": 25, "springer": [25, 26, 29, 31], "2011": [25, 26], "weight": [25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 46], "distribut": [25, 26, 27, 28, 29, 30, 31, 32, 33, 49], "2p": [25, 26, 29, 30, 31, 33], "2pl": 25, "pl": [25, 44, 52], "p": [25, 26, 27, 28, 29, 30, 31, 33, 44, 49, 52], "syndrom": [25, 26, 27, 28, 29, 30, 31, 32, 33], "r": [25, 26, 27, 28, 29, 30, 31, 32, 33, 42, 44, 52], "m4ri": [25, 26, 27, 28, 29, 30, 31, 32, 33, 42], "gaussian": [25, 26, 27, 28, 29, 30, 31, 32, 33, 42], "elimin": [25, 26, 27, 28, 29, 30, 31, 32, 33, 42], "depth": [26, 27, 28, 29, 31, 35, 36, 38, 44, 52], "mmt11": 26, "mai": [26, 29, 31, 36, 38, 41, 49], "meurer": 26, "random": [26, 49], "code": [26, 27, 29, 30, 31, 44, 46, 52], "054n": 26, "theori": [26, 30, 31, 49], "applic": [26, 31, 49], "inform": [26, 30, 49], "secur": [26, 29, 31], "124": 26, "bjmm12": 26, "becker": 26, "joux": 26, "binari": [26, 31, 41, 49], "how": 26, "improv": 26, "cryptograph": [26, 31], "techniqu": [26, 31], "520": 26, "536": 26, "2012": 26, "initialize_parameter_rang": [26, 27, 28, 29, 30, 31, 33, 52], "p1": [26, 27, 28, 29, 31, 44, 52], "p2": [26, 29, 31, 44, 52], "restart": [26, 31], "process": [26, 27, 28, 29, 30, 31, 33], "bjmmd2": [26, 44, 52], "bjmm_depth_2": 26, "start": [26, 27, 28, 29, 30, 31, 33, 49], "optimis": [26, 27, 28, 29, 30, 31, 33, 51], "bjmmd3": [26, 44, 52], "bjmm_depth_3": 26, "bjmmdw": [27, 28, 44, 52], "bjmm": [27, 28, 31, 44, 52], "isjoint": 27, "eight": 27, "combin": 27, "mitm": [27, 28, 29], "nearest": [27, 31, 36, 38, 41], "neighbor": [27, 31, 36, 38], "eb2022": [27, 28], "mmt2011": [27, 28], "bjmm2012": [27, 28], "l1": [27, 28], "l2": [27, 28], "w1": [27, 29, 44, 52], "w2": [27, 28, 29, 44, 52], "dimens": [27, 44, 46, 49], "ham": [27, 49], "error": [27, 29, 44, 46, 49], "vector": 27, "mem": [27, 51], "avail": [27, 49], "log2": 27, "unlimit": 27, "hmap": [27, 42], "indic": [27, 42, 47, 49], "hashmap": [27, 42], "being": [27, 42], "p_rang": 27, "interv": [27, 49], "help": [27, 49], "speed": 27, "disjoint": [27, 28], "w11": [27, 52], "bjmmpdw": [28, 44, 52], "partial": 28, "explicit": 28, "nn": [28, 29], "level": 28, "bothmai": [29, 44, 52], "both": [29, 36, 49], "indyk": 29, "motwani": 29, "botmay18": 29, "high": 29, "rate": 29, "impact": 29, "lpn": 29, "post": 29, "cryptographi": 29, "46": 29, "2018": [29, 49], "isd": [30, 46], "dum91": 30, "On": [30, 31], "minimum": 30, "distanc": 30, "proc": 30, "5th": 30, "joint": 30, "soviet": 30, "swedish": 30, "workshop": 30, "52": 30, "1991": 30, "mayozerov": [31, 44, 52], "ozerov": [31, 36, 38, 41], "mo15": [31, 41], "203": 31, "228": 31, "2015": 31, "asymptot": [31, 41], "mayozerovd2": [31, 44, 52], "mayozerov_depth_2": 31, "mayozerovd3": [31, 44, 52], "mayozerov_depth_3": 31, "pra1962": 32, "ste1988": 33, "blp2008": 33, "sdworkfactormodel": [34, 35, 36, 37, 38, 39, 40, 41], "ballcollisionscipymodel": [34, 52], "par_nam": [34, 35, 36, 37, 38, 39, 40], "iter": [34, 35, 36, 37, 38, 39, 40], "accuraci": [34, 35, 36, 37, 38, 39, 40], "scipymodel": [34, 35, 36, 37, 38, 39, 40], "workfactor": [34, 35, 36, 37, 38, 39, 40], "get_time_memory_and_paramet": [34, 35, 36, 37, 38, 39, 40, 52], "bjmmscipymodel": [35, 52], "bothmayscipymodel": [36, 52], "dumerscipymodel": [37, 52], "mayozerovscipymodel": [38, 52], "prangescipymodel": [39, 52], "sternscipymodel": [40, 52], "binary_entropi": [41, 52], "entropi": 41, "binomial_approxim": [41, 52], "binomi": [41, 45], "coefficietn": 41, "via": [41, 49], "sterl": 41, "approxim": 41, "inverse_binary_entropi": [41, 52], "v": 41, "invers": 41, "eg": 41, "uniqu": 41, "x": [41, 49, 51], "list_of_random_tupl": [41, 52], "y": [41, 49], "may_ozerov_near_neighbor_tim": [41, 52], "list_siz": 41, "vector_length": 41, "target_weight": 41, "neighbour": 41, "representations_asymptot": [41, 52], "weight_to_cancel": 41, "represent": [41, 43, 52], "wrap": [41, 52], "f": 41, "g": [41, 49], "helper": [41, 49, 52], "scipi": 41, "framework": 41, "sd": 42, "var_rang": 42, "adapt": 42, "sort": 42, "verboseinform": [43, 52], "enum": [43, 51], "constraint": [43, 52], "gauss": [43, 52], "permut": [43, 49, 52], "tree": [43, 52], "length": [44, 46], "mayb": 44, "should": [44, 49], "optional_paramet": 44, "may_ozerov": [44, 52], "22": 44, "dumer": [44, 52], "prang": [44, 52], "stern": [44, 52], "workfactor_accuraci": 44, "long": 44, "3488": 44, "2720": 44, "64": 44, "151": 44, "460": 44, "49": 44, "814": 44, "143": 44, "448": 44, "86": 44, "221": 44, "141": 44, "886": 44, "104": 44, "057": 44, "197": 44, "142": 44, "719": 44, "188": 44, "83": 44, "380": 44, "58": 44, "019": 44, "47": 44, "795": 44, "592": 44, "173": 44, "388": 44, "576": 44, "409": 44, "min_max": [45, 52], "b": [45, 49], "bool": [45, 51], "max": 45, "depend": 45, "switch": [45, 49], "basefield": 46, "paramt": 46, "deterimin": 47, "func": 47, "decor": 47, "method": 47, "basealgoritm": 47, "subclass": [47, 49], "alg": 49, "prob": 49, "include_tildeo": 49, "tildeo": [49, 51, 52], "esim": 49, "include_quantum": 49, "quyantum": 49, "channel": [49, 52], "implement": 49, "theoret": 49, "notion": 49, "transmiss": 49, "messag": 49, "can": 49, "build": 49, "errorerasurechannel": 49, "qarysymmetricchannel": 49, "staticerrorratechannel": 49, "To": [49, 52], "global": 49, "namespac": 49, "channels_catalog": 49, "paritycheckcod": 49, "check": 49, "cycliccod": 49, "cyclic": 49, "bchcode": 49, "bch": 49, "generalizedreedsolomoncod": 49, "reed": 49, "solomon": 49, "reedsolomoncod": 49, "binaryreedmullercod": 49, "muller": 49, "reedmullercod": 49, "ari": 49, "hammingcod": 49, "golaycod": 49, "golai": 49, "goppacod": 49, "goppa": 49, "kasamicod": 49, "kasami": 49, "duadiccodeevenpair": 49, "duadic": 49, "pair": 49, "duadiccodeoddpair": 49, "odd": 49, "quadraticresiduecod": 49, "residu": 49, "extendedquadraticresiduecod": 49, "extend": 49, "quadraticresiduecodeevenpair": 49, "like": 49, "quadraticresiduecodeoddpair": 49, "quasiquadraticresiduecod": 49, "quasi": 49, "requir": 49, "gap": 49, "guava": 49, "toriccod": 49, "toric": 49, "walshcod": 49, "walsh": 49, "from_parity_check_matrix": 49, "random_linear_cod": 49, "randomlinearcodeguava": 49, "through": 49, "subfieldsubcod": 49, "subfield": 49, "subcod": 49, "extendedcod": 49, "puncturedcod": 49, "codes_catalog": 49, "cone": [49, 52], "common": 49, "polyhedr": 49, "convex": 49, "shortcut": 49, "group": [49, 52], "under": 49, "prefix": 49, "creat": 49, "nonneg": 49, "orthant": 49, "rearrang": 49, "schur": 49, "trivial": 49, "At": 49, "moment": 49, "support": 49, "built": 49, "constructor": 49, "As": 49, "pass": 49, "ambient": 49, "ambient_dim": 49, "lattic": 49, "infer": 49, "space": 49, "typic": 49, "nonnegative_orth": 49, "rai": 49, "empti": 49, "collect": 49, "other": 49, "argument": 49, "dual": 49, "For": 49, "more": 49, "about": 49, "see": 49, "document": [49, 52], "individu": 49, "therein": 49, "crystal": [49, 52], "Of": 49, "let": 49, "pi": 49, "vee": 49, "cartan": 49, "datum": 49, "a_": 49, "ij": 49, "_": 49, "jin": 49, "abstract": 49, "togeth": 49, "map": 49, "e_i": 49, "f_i": 49, "colon": 49, "cup": 49, "qquad": 49, "varepsilon_i": 49, "varphi_i": 49, "zz": 49, "infti": 49, "mathrm": 49, "wt": 49, "subject": 49, "condit": 49, "langl": 49, "h_i": 49, "rangl": 49, "e_ib": 49, "alpha_i": 49, "f_ib": 49, "iin": 49, "bin": 49, "categori": 49, "combinat": 49, "current": 49, "affinecrystalfromclass": 49, "affinecrystalfromclassicalandpromot": 49, "affinefactor": 49, "affinizationof": 49, "alcovepath": 49, "fastranktwo": 49, "fullycommutativestablegrothendieck": 49, "generalizedyoungwal": 49, "highestweight": 49, "induc": 49, "kacmodul": 49, "kirillovreshetikhin": 49, "kleshchevpartit": 49, "kyotopathmodel": 49, "letter": 49, "lspath": 49, "minimaj": 49, "nakajimamonomi": 49, "oddnegativeroot": 49, "projectedlevelzerolspath": 49, "riggedconfigur": 49, "shiftedprimedtableaux": 49, "spin": 49, "spinsplu": 49, "spinsminu": 49, "tableaux": 49, "subcatalog": 49, "catalog_infinity_cryst": 49, "catalog_elementary_cryst": 49, "catalog_kirillov_reshetikhin": 49, "functori": 49, "directsum": 49, "tensorproduct": 49, "financ": [49, 52], "self": 49, "accur": 49, "signatur": 49, "finite_dynamical_system": [49, 52], "discret": 49, "dynam": 49, "sever": 49, "finite_dynamical_system_catalog": 49, "just": 49, "hit": 49, "tab": 49, "author": 49, "darij": 49, "grinberg": 49, "tom": 49, "robi": 49, "version": 49, "game_theori": [49, 52], "game": 49, "graph_color": [49, 52], "file": 49, "graph": 49, "pyx": 49, "line": 49, "color": 49, "gather": 49, "relat": 49, "what": 49, "do": 49, "proper": 49, "vertex": 49, "all_graph_color": 49, "first_color": 49, "number_of_n_color": 49, "numbers_of_color": 49, "chromatic_numb": 49, "chromat": 49, "vertex_color": 49, "fraction": 49, "relax": 49, "fractional_chromatic_numb": 49, "fractional_chromatic_index": 49, "grundy_color": 49, "grundi": 49, "b_color": 49, "edge_color": 49, "edg": 49, "round_robin": 49, "robin": 49, "complet": 49, "vertic": 49, "linear_arbor": 49, "arbor": 49, "acyclic_edge_color": 49, "acycl": 49, "boothbi": 49, "2008": 49, "02": 49, "carlo": 49, "hamalainen": 49, "2009": 49, "03": 49, "minor": 49, "chang": 49, "dlx": 49, "solver": 49, "nathann": 49, "cohen": 49, "program": 49, "variou": 49, "easi": 49, "wai": 49, "discov": 49, "quickli": 49, "press": 49, "kei": 49, "so": 49, "begin": 49, "primari": 49, "divis": 49, "matric": 49, "symmetr": 49, "altern": 49, "kleinfour": 49, "quaternion": 49, "complexreflect": 49, "dihedr": 49, "dicycl": 49, "mathieu": 49, "suzuki": 49, "pgl": 49, "psl": 49, "psp": 49, "psu": 49, "pgu": 49, "transit": 49, "rubikscub": 49, "quaterniongf3": 49, "gl": 49, "sl": 49, "sp": 49, "gu": 49, "su": 49, "go": 49, "present": 49, "fgabelian": 49, "affin": 49, "euclidean": 49, "lie": 49, "nilpot": 49, "miscellan": 49, "misc": 49, "coxet": 49, "reflect": 49, "braid": 49, "coxetergroup": 49, "reflectiongroup": 49, "rightangledartin": 49, "weylgroup": 49, "additiveabelian": 49, "additivecycl": 49, "free": 49, "semimonomialtransform": 49, "lattice_polytop": [49, 52], "reflex": 49, "polytop": 49, "tool": 49, "hull": 49, "point": 49, "rr": 49, "embed": 49, "whose": 49, "have": 49, "coordin": 49, "geq": 49, "text": 49, "polar": 49, "also": 49, "packag": 49, "analyz": 49, "palp": 49, "written": 49, "maximilian": 49, "kreuzer": 49, "harald": 49, "skark": 49, "freeli": 49, "gnu": 49, "licens": 49, "term": 49, "http": 49, "hep": 49, "itp": 49, "tuwien": 49, "ac": 49, "cy": 49, "moreov": 49, "standard": 49, "arxiv": 49, "math": 49, "sc": 49, "0204356": 49, "Its": 49, "nef": 49, "wa": 49, "erwin": 49, "riegler": 49, "partit": 49, "hodg": 49, "data": 49, "intersect": 49, "acknowledg": 49, "py": 49, "william": 49, "stein": 49, "organ": 49, "interfac": 49, "andrei": 49, "novoseltsev": 49, "debug": 49, "tune": 49, "robert": 49, "bradshaw": 49, "realiz": 49, "plot3d": 49, "dure": 49, "compil": 49, "etc": 49, "limit": 49, "lead": 49, "differ": 49, "except": 49, "rais": 49, "poli": 49, "exclam": 49, "mark": 49, "exact": 49, "command": 49, "caus": 49, "descript": 49, "obtain": 49, "cach": 49, "immut": 49, "particular": 49, "you": [49, 52], "cannot": 49, "creation": 49, "larg": 49, "look": 49, "all_": 49, "precomput": 49, "few": 49, "run": 49, "significantli": 49, "affect": 49, "futur": 49, "dump": 49, "load": 49, "face": 49, "boundari": 49, "2007": 49, "01": 49, "04": 49, "convex_hul": 49, "minkowski_sum": 49, "dimension": 49, "skeleton_show": 49, "08": 49, "drop": 49, "maxim": 49, "2010": 49, "new": 49, "2013": 49, "09": 49, "pointcollect": 49, "lie_algebra": [49, 52], "There": 49, "comprehens": 49, "transform": 49, "abelian": 49, "triangular": 49, "strictli": 49, "symplect": 49, "rank": 49, "heisenberg": 49, "virasoro": 49, "liealgebraregularvectorfield": 49, "virasoroalgebra": 49, "travi": 49, "scrimshaw": 49, "07": 49, "lie_conformal_algebra": [49, 52], "conform": 49, "boson": 49, "ghost": 49, "fermion": 49, "super": 49, "neveu": 49, "schwarz": 49, "weyl": 49, "reimundo": 49, "heluani": 49, "2020": 49, "06": 49, "manifold": [49, 52], "rapidli": 49, "simpl": 49, "entri": 49, "euclideanspac": 49, "reallin": 49, "real": 49, "openinterv": 49, "open": 49, "sphere": 49, "toru": 49, "minkowski": 49, "kerr": 49, "spacetim": 49, "florentin": 49, "jaffredo": 49, "matroid": [49, 52], "submenu": 49, "named_matroid": 49, "varieti": 49, "parametr": 49, "ag": 49, "completegraph": 49, "pg": 49, "uniform": 49, "wheel": 49, "whirl": 49, "ag23minu": 49, "ag32prim": 49, "betsyross": 49, "block_9_4": 49, "block_10_5": 49, "d16": 49, "extendedbinarygolaycod": 49, "extendedternarygolaycod": 49, "f8": 49, "fano": 49, "k33dual": 49, "l8": 49, "n2": 49, "nonfano": 49, "nonpappu": 49, "nonvamo": 49, "notp8": 49, "o7": 49, "p6": 49, "p7": 49, "p8": 49, "p8pp": 49, "p9": 49, "pappu": 49, "q6": 49, "q8": 49, "q10": 49, "r6": 49, "r8": 49, "r9a": 49, "r9b": 49, "r10": 49, "r12": 49, "s8": 49, "t8": 49, "t12": 49, "ternarydowling3": 49, "terrahawk": 49, "tictacto": 49, "vamo": 49, "path_tableaux": [49, 52], "path": 49, "tableau": 49, "cylindricaldiagram": 49, "dyckpath": 49, "friezepattern": 49, "semistandardpathtableau": 49, "semistandardpathtableaux": 49, "simplicial_complex": [49, 52], "simplici": 49, "main": 49, "project": 49, "plane": 49, "surfac": 49, "arbitrari": 49, "genu": 49, "asid": 49, "connect": 49, "match": 49, "chessboard": 49, "noticonnectedgraph": 49, "million": 49, "simplic": 49, "barnettespher": 49, "brucknergrunbaumspher": 49, "chessboardcomplex": 49, "complexprojectiveplan": 49, "duncehat": 49, "fareymap": 49, "k3surfac": 49, "kleinbottl": 49, "matchingcomplex": 49, "moorespac": 49, "poincarehomologythreespher": 49, "pseudoquaternionicprojectiveplan": 49, "randomcomplex": 49, "randomtwospher": 49, "realprojectiveplan": 49, "realprojectivespac": 49, "rudinbal": 49, "shiftedcomplex": 49, "simplex": 49, "sumcomplex": 49, "surfaceofgenu": 49, "zieglerbal": 49, "get": 49, "homologi": 49, "triangul": 49, "orient": 49, "m4": 49, "c4": 49, "simplicial_set": [49, 52], "pre": 49, "practic": 49, "increas": 49, "longer": 49, "horn": 49, "much": 49, "becaus": 49, "nondegener": 49, "exponenti": 49, "feasibl": 49, "sinc": 49, "101": 49, "probabl": 49, "bad": 49, "classifi": 49, "monoid": 49, "klein": 49, "bottl": 49, "hopf": 49, "morphism": 49, "extract": 49, "domain": 49, "codomain": 49, "rp10": 49, "c2": 49, "eta": 49, "hopfmap": 49, "s3": 49, "s2": 49, "wedg": 49, "deprec": 49, "warn": 49, "completematch": 49, "doctest": 49, "deprecationwarn": 49, "need": [49, 52], "pleas": 49, "directli": 49, "arxiv_0812_2725": 49, "trac": 49, "sagemath": [49, 52], "org": 49, "27337": 49, "detail": 49, "modsym": 49, "modular": 49, "toric_plott": [49, 52], "plotter": 49, "toricplott": 49, "produc": 49, "plot": 49, "geometri": 49, "adjust": 49, "option": 49, "reset_opt": 49, "volker": 49, "braun": 49, "case": 49, "indirectli": 49, "fan": 49, "toric_varieti": 49, "dp6": 49, "graphic": 49, "primit": 49, "show_rai": 49, "valuat": [49, 52], "base_field": 50, "complexitytyp": [51, 52], "distinguish": 51, "normal": 51, "concat_all_t": [51, 52], "prettyt": 51, "concat_pretty_t": [51, 52], "t1": 51, "t2": 51, "merg": 51, "column": 51, "memory_access_cost": [51, 52], "consumpt": 51, "round_or_trunc": [51, 52], "eiter": 51, "els": 51, "decimi": 51, "sampl": 52, "manual": 52, "minim": 52, "guidelin": 52, "base_algorithm": 52, "base_const": 52, "base_estim": 52, "base_problem": 52, "mq_helper": 52, "witness_degre": 52, "mq_estim": 52, "mq_constant": 52, "degree_of_regular": 52, "hilbert": 52, "nmonomi": 52, "boolean_solve_fxl": 52, "exhaustive_search": 52, "mht": 52, "kpg": 52, "cgmta": 52, "dinur2": 52, "hybrid_f5": 52, "dinur1": 52, "sd_problem": 52, "sd_estim": 52, "sd_constant": 52, "sd_algorithm": 52, "sd_helper": 52, "both_mai": 52, "bjmm_dw": 52, "bjmm_pdw": 52, "ball_collis": 52, "workfactor_help": 52, "dummy_algorithm": 52, "dummy_estim": 52, "dummy_algorithm1": 52, "bibliograph": 52, "page": 52}, "objects": {"cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[0, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[0, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "optimization_parameter_1"], [0, 3, 1, "", "optimization_parameter_2"], [0, 3, 1, "", "optimization_parameter_3"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "quantum_time_complexity"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator": [[1, 0, 0, "-", "dummy_algorithm"], [2, 0, 0, "-", "dummy_estimator"], [3, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[1, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "quantum_time_complexity"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[2, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[2, 3, 1, "", "algorithm_names"], [2, 3, 1, "", "algorithms"], [2, 2, 1, "", "bit_complexities"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "estimate"], [2, 4, 1, "", "excluded_algorithms_by_default"], [2, 3, 1, "", "fastest_algorithm"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "nalgorithms"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[3, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[3, 3, 1, "", "expected_number_solutions"], [3, 3, 1, "", "get_parameters"], [3, 3, 1, "", "to_bitcomplexity_memory"], [3, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[4, 0, 0, "-", "bjorklund"], [5, 0, 0, "-", "boolean_solve_fxl"], [6, 0, 0, "-", "cgmta"], [7, 0, 0, "-", "crossbred"], [8, 0, 0, "-", "dinur1"], [9, 0, 0, "-", "dinur2"], [10, 0, 0, "-", "exhaustive_search"], [11, 0, 0, "-", "f5"], [12, 0, 0, "-", "hybrid_f5"], [13, 0, 0, "-", "kpg"], [14, 0, 0, "-", "lokshtanov"], [15, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[4, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "get_optimal_parameters_dict"], [4, 3, 1, "", "get_reduced_parameters"], [4, 3, 1, "", "has_optimal_parameter"], [4, 3, 1, "", "lambda_"], [4, 3, 1, "", "linear_algebra_constant"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "memory_complexity"], [4, 3, 1, "", "npolynomials_reduced"], [4, 3, 1, "", "nvariables_reduced"], [4, 3, 1, "", "optimal_parameters"], [4, 3, 1, "", "parameter_names"], [4, 2, 1, "", "parameter_ranges"], [4, 3, 1, "", "quantum_time_complexity"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "set_parameter_ranges"], [4, 3, 1, "", "set_parameters"], [4, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl": [[5, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL": [[5, 2, 1, "", "complexity_type"], [5, 3, 1, "", "get_optimal_parameters_dict"], [5, 3, 1, "", "get_reduced_parameters"], [5, 3, 1, "", "has_optimal_parameter"], [5, 3, 1, "", "k"], [5, 3, 1, "", "linear_algebra_constant"], [5, 2, 1, "", "memory_access"], [5, 3, 1, "", "memory_complexity"], [5, 3, 1, "", "npolynomials_reduced"], [5, 3, 1, "", "nvariables_reduced"], [5, 3, 1, "", "optimal_parameters"], [5, 3, 1, "", "parameter_names"], [5, 2, 1, "", "parameter_ranges"], [5, 3, 1, "", "quantum_time_complexity"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "set_parameter_ranges"], [5, 3, 1, "", "set_parameters"], [5, 3, 1, "", "time_complexity"], [5, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[6, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "get_optimal_parameters_dict"], [6, 3, 1, "", "get_reduced_parameters"], [6, 3, 1, "", "has_optimal_parameter"], [6, 3, 1, "", "linear_algebra_constant"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "memory_complexity"], [6, 3, 1, "", "npolynomials_reduced"], [6, 3, 1, "", "nvariables_reduced"], [6, 3, 1, "", "optimal_parameters"], [6, 3, 1, "", "parameter_names"], [6, 2, 1, "", "parameter_ranges"], [6, 3, 1, "", "quantum_time_complexity"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "set_parameter_ranges"], [6, 3, 1, "", "set_parameters"], [6, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[7, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[7, 3, 1, "", "D"], [7, 2, 1, "", "complexity_type"], [7, 3, 1, "", "d"], [7, 3, 1, "", "get_optimal_parameters_dict"], [7, 3, 1, "", "get_reduced_parameters"], [7, 3, 1, "", "has_optimal_parameter"], [7, 3, 1, "", "k"], [7, 3, 1, "", "linear_algebra_constant"], [7, 2, 1, "", "max_D"], [7, 2, 1, "", "memory_access"], [7, 3, 1, "", "memory_complexity"], [7, 3, 1, "", "npolynomials_reduced"], [7, 3, 1, "", "nvariables_reduced"], [7, 3, 1, "", "optimal_parameters"], [7, 3, 1, "", "parameter_names"], [7, 2, 1, "", "parameter_ranges"], [7, 3, 1, "", "quantum_time_complexity"], [7, 3, 1, "", "reset"], [7, 3, 1, "", "set_parameter_ranges"], [7, 3, 1, "", "set_parameters"], [7, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[8, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[8, 2, 1, "", "complexity_type"], [8, 3, 1, "", "get_optimal_parameters_dict"], [8, 3, 1, "", "get_reduced_parameters"], [8, 3, 1, "", "has_optimal_parameter"], [8, 3, 1, "", "kappa"], [8, 3, 1, "", "lambda_"], [8, 3, 1, "", "linear_algebra_constant"], [8, 2, 1, "", "memory_access"], [8, 3, 1, "", "memory_complexity"], [8, 3, 1, "", "npolynomials_reduced"], [8, 3, 1, "", "nvariables_reduced"], [8, 3, 1, "", "optimal_parameters"], [8, 3, 1, "", "parameter_names"], [8, 2, 1, "", "parameter_ranges"], [8, 3, 1, "", "quantum_time_complexity"], [8, 3, 1, "", "reset"], [8, 3, 1, "", "set_parameter_ranges"], [8, 3, 1, "", "set_parameters"], [8, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[9, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[9, 2, 1, "", "complexity_type"], [9, 3, 1, "", "get_optimal_parameters_dict"], [9, 3, 1, "", "get_reduced_parameters"], [9, 3, 1, "", "has_optimal_parameter"], [9, 3, 1, "", "linear_algebra_constant"], [9, 2, 1, "", "memory_access"], [9, 3, 1, "", "memory_complexity"], [9, 3, 1, "", "n1"], [9, 3, 1, "", "npolynomials_reduced"], [9, 3, 1, "", "nvariables_reduced"], [9, 3, 1, "", "optimal_parameters"], [9, 3, 1, "", "parameter_names"], [9, 2, 1, "", "parameter_ranges"], [9, 3, 1, "", "quantum_time_complexity"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "set_parameter_ranges"], [9, 3, 1, "", "set_parameters"], [9, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[10, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[10, 2, 1, "", "complexity_type"], [10, 3, 1, "", "get_optimal_parameters_dict"], [10, 3, 1, "", "get_reduced_parameters"], [10, 3, 1, "", "has_optimal_parameter"], [10, 3, 1, "", "linear_algebra_constant"], [10, 2, 1, "", "memory_access"], [10, 3, 1, "", "memory_complexity"], [10, 3, 1, "", "npolynomials_reduced"], [10, 3, 1, "", "nvariables_reduced"], [10, 3, 1, "", "optimal_parameters"], [10, 3, 1, "", "parameter_names"], [10, 2, 1, "", "parameter_ranges"], [10, 3, 1, "", "quantum_time_complexity"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "set_parameter_ranges"], [10, 3, 1, "", "set_parameters"], [10, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[11, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[11, 2, 1, "", "complexity_type"], [11, 3, 1, "", "degree_of_polynomials"], [11, 3, 1, "", "get_optimal_parameters_dict"], [11, 3, 1, "", "get_reduced_parameters"], [11, 3, 1, "", "has_optimal_parameter"], [11, 3, 1, "", "linear_algebra_constant"], [11, 2, 1, "", "memory_access"], [11, 3, 1, "", "memory_complexity"], [11, 3, 1, "", "npolynomials_reduced"], [11, 3, 1, "", "nvariables_reduced"], [11, 3, 1, "", "optimal_parameters"], [11, 3, 1, "", "parameter_names"], [11, 2, 1, "", "parameter_ranges"], [11, 3, 1, "", "quantum_time_complexity"], [11, 3, 1, "", "reset"], [11, 3, 1, "", "set_parameter_ranges"], [11, 3, 1, "", "set_parameters"], [11, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[12, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "degree_of_polynomials"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "get_reduced_parameters"], [12, 3, 1, "", "has_optimal_parameter"], [12, 3, 1, "", "k"], [12, 3, 1, "", "linear_algebra_constant"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "npolynomials_reduced"], [12, 3, 1, "", "nvariables_reduced"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "quantum_time_complexity"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[13, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "get_reduced_parameters"], [13, 3, 1, "", "has_optimal_parameter"], [13, 3, 1, "", "linear_algebra_constant"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "npolynomials_reduced"], [13, 3, 1, "", "nvariables_reduced"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "quantum_time_complexity"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[14, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[14, 2, 1, "", "complexity_type"], [14, 3, 1, "", "delta"], [14, 3, 1, "", "get_optimal_parameters_dict"], [14, 3, 1, "", "get_reduced_parameters"], [14, 3, 1, "", "has_optimal_parameter"], [14, 3, 1, "", "linear_algebra_constant"], [14, 2, 1, "", "memory_access"], [14, 3, 1, "", "memory_complexity"], [14, 3, 1, "", "npolynomials_reduced"], [14, 3, 1, "", "nvariables_reduced"], [14, 3, 1, "", "optimal_parameters"], [14, 3, 1, "", "parameter_names"], [14, 2, 1, "", "parameter_ranges"], [14, 3, 1, "", "quantum_time_complexity"], [14, 3, 1, "", "reset"], [14, 3, 1, "", "set_parameter_ranges"], [14, 3, 1, "", "set_parameters"], [14, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[15, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "get_optimal_parameters_dict"], [15, 3, 1, "", "get_reduced_parameters"], [15, 3, 1, "", "has_optimal_parameter"], [15, 3, 1, "", "linear_algebra_constant"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "memory_complexity"], [15, 3, 1, "", "npolynomials_reduced"], [15, 3, 1, "", "nvariables_reduced"], [15, 3, 1, "", "optimal_parameters"], [15, 3, 1, "", "parameter_names"], [15, 2, 1, "", "parameter_ranges"], [15, 3, 1, "", "quantum_time_complexity"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "set_parameter_ranges"], [15, 3, 1, "", "set_parameters"], [15, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator": [[16, 0, 0, "-", "degree_of_regularity"], [17, 0, 0, "-", "mq_algorithm"], [18, 0, 0, "-", "mq_constants"], [19, 0, 0, "-", "mq_estimator"], [20, 0, 0, "-", "mq_helper"], [21, 0, 0, "-", "mq_problem"], [24, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[16, 5, 1, "", "generic_system"], [16, 5, 1, "", "quadratic_system"], [16, 5, 1, "", "regular_system"], [16, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[17, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[17, 2, 1, "", "complexity_type"], [17, 3, 1, "", "get_optimal_parameters_dict"], [17, 3, 1, "", "get_reduced_parameters"], [17, 3, 1, "", "has_optimal_parameter"], [17, 3, 1, "", "linear_algebra_constant"], [17, 2, 1, "", "memory_access"], [17, 3, 1, "", "memory_complexity"], [17, 3, 1, "", "npolynomials_reduced"], [17, 3, 1, "", "nvariables_reduced"], [17, 3, 1, "", "optimal_parameters"], [17, 3, 1, "", "parameter_names"], [17, 2, 1, "", "parameter_ranges"], [17, 3, 1, "", "quantum_time_complexity"], [17, 3, 1, "", "reset"], [17, 3, 1, "", "set_parameter_ranges"], [17, 3, 1, "", "set_parameters"], [17, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[19, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[19, 3, 1, "", "algorithm_names"], [19, 3, 1, "", "algorithms"], [19, 2, 1, "", "bit_complexities"], [19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "estimate"], [19, 4, 1, "", "excluded_algorithms_by_default"], [19, 3, 1, "", "fastest_algorithm"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "nalgorithms"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[20, 5, 1, "", "ngates"], [20, 5, 1, "", "nmonomials_of_degree"], [20, 5, 1, "", "nmonomials_up_to_degree"], [20, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[21, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[21, 3, 1, "", "expected_number_solutions"], [21, 3, 1, "", "get_problem_parameters"], [21, 3, 1, "", "is_defined_over_finite_field"], [21, 3, 1, "", "is_overdefined_system"], [21, 3, 1, "", "is_square_system"], [21, 3, 1, "", "is_underdefined_system"], [21, 3, 1, "", "npolynomials"], [21, 3, 1, "", "nvariables"], [21, 3, 1, "", "order_of_the_field"], [21, 2, 1, "", "theta"], [21, 3, 1, "", "to_bitcomplexity_memory"], [21, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[22, 0, 0, "-", "hilbert"], [23, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[22, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[22, 2, 1, "", "degrees"], [22, 3, 1, "", "first_nonpositive_integer"], [22, 2, 1, "", "npolynomials"], [22, 2, 1, "", "nvariables"], [22, 2, 1, "", "precision"], [22, 2, 1, "", "ring"], [22, 2, 1, "", "series"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[23, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[23, 3, 1, "", "nmonomials_of_degree"], [23, 3, 1, "", "nmonomials_up_to_degree"], [23, 3, 1, "", "series_monomials_of_degree"], [23, 3, 1, "", "series_monomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[24, 5, 1, "", "quadratic_system"], [24, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[25, 0, 0, "-", "ball_collision"], [26, 0, 0, "-", "bjmm"], [27, 0, 0, "-", "bjmm_dw"], [28, 0, 0, "-", "bjmm_pdw"], [29, 0, 0, "-", "both_may"], [30, 0, 0, "-", "dumer"], [31, 0, 0, "-", "may_ozerov"], [32, 0, 0, "-", "prange"], [33, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[25, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[25, 2, 1, "", "complexity_type"], [25, 3, 1, "", "get_optimal_parameters_dict"], [25, 3, 1, "", "has_optimal_parameter"], [25, 3, 1, "", "l"], [25, 2, 1, "", "memory_access"], [25, 3, 1, "", "memory_complexity"], [25, 3, 1, "", "optimal_parameters"], [25, 3, 1, "", "p"], [25, 3, 1, "", "parameter_names"], [25, 2, 1, "", "parameter_ranges"], [25, 3, 1, "", "pl"], [25, 3, 1, "", "quantum_time_complexity"], [25, 3, 1, "", "r"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "set_parameter_ranges"], [25, 3, 1, "", "set_parameters"], [25, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[26, 1, 1, "", "BJMM"], [26, 1, 1, "", "BJMMd2"], [26, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[26, 2, 1, "", "complexity_type"], [26, 3, 1, "", "depth"], [26, 3, 1, "", "get_optimal_parameters_dict"], [26, 3, 1, "", "has_optimal_parameter"], [26, 3, 1, "", "initialize_parameter_ranges"], [26, 2, 1, "", "memory_access"], [26, 3, 1, "", "memory_complexity"], [26, 3, 1, "", "optimal_parameters"], [26, 3, 1, "", "parameter_names"], [26, 2, 1, "", "parameter_ranges"], [26, 3, 1, "", "quantum_time_complexity"], [26, 3, 1, "", "r"], [26, 3, 1, "", "reset"], [26, 3, 1, "", "set_parameter_ranges"], [26, 3, 1, "", "set_parameters"], [26, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[26, 2, 1, "", "complexity_type"], [26, 3, 1, "", "get_optimal_parameters_dict"], [26, 3, 1, "", "has_optimal_parameter"], [26, 3, 1, "", "initialize_parameter_ranges"], [26, 3, 1, "", "l"], [26, 2, 1, "", "memory_access"], [26, 3, 1, "", "memory_complexity"], [26, 3, 1, "", "optimal_parameters"], [26, 3, 1, "", "p"], [26, 3, 1, "", "p1"], [26, 3, 1, "", "parameter_names"], [26, 2, 1, "", "parameter_ranges"], [26, 3, 1, "", "quantum_time_complexity"], [26, 3, 1, "", "r"], [26, 3, 1, "", "reset"], [26, 3, 1, "", "set_parameter_ranges"], [26, 3, 1, "", "set_parameters"], [26, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[26, 2, 1, "", "complexity_type"], [26, 3, 1, "", "get_optimal_parameters_dict"], [26, 3, 1, "", "has_optimal_parameter"], [26, 3, 1, "", "initialize_parameter_ranges"], [26, 3, 1, "", "l"], [26, 2, 1, "", "memory_access"], [26, 3, 1, "", "memory_complexity"], [26, 3, 1, "", "optimal_parameters"], [26, 3, 1, "", "p"], [26, 3, 1, "", "p1"], [26, 3, 1, "", "p2"], [26, 3, 1, "", "parameter_names"], [26, 2, 1, "", "parameter_ranges"], [26, 3, 1, "", "quantum_time_complexity"], [26, 3, 1, "", "r"], [26, 3, 1, "", "reset"], [26, 3, 1, "", "set_parameter_ranges"], [26, 3, 1, "", "set_parameters"], [26, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[27, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[27, 2, 1, "", "complexity_type"], [27, 3, 1, "", "get_optimal_parameters_dict"], [27, 3, 1, "", "has_optimal_parameter"], [27, 3, 1, "", "initialize_parameter_ranges"], [27, 2, 1, "", "memory_access"], [27, 3, 1, "", "memory_complexity"], [27, 3, 1, "", "optimal_parameters"], [27, 3, 1, "", "p"], [27, 3, 1, "", "p1"], [27, 3, 1, "", "parameter_names"], [27, 2, 1, "", "parameter_ranges"], [27, 3, 1, "", "quantum_time_complexity"], [27, 3, 1, "", "r"], [27, 3, 1, "", "reset"], [27, 3, 1, "", "set_parameter_ranges"], [27, 3, 1, "", "set_parameters"], [27, 3, 1, "", "time_complexity"], [27, 3, 1, "", "w1"], [27, 3, 1, "", "w11"], [27, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[28, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[28, 2, 1, "", "complexity_type"], [28, 3, 1, "", "get_optimal_parameters_dict"], [28, 3, 1, "", "has_optimal_parameter"], [28, 3, 1, "", "initialize_parameter_ranges"], [28, 2, 1, "", "memory_access"], [28, 3, 1, "", "memory_complexity"], [28, 3, 1, "", "optimal_parameters"], [28, 3, 1, "", "p"], [28, 3, 1, "", "p1"], [28, 3, 1, "", "parameter_names"], [28, 2, 1, "", "parameter_ranges"], [28, 3, 1, "", "quantum_time_complexity"], [28, 3, 1, "", "r"], [28, 3, 1, "", "reset"], [28, 3, 1, "", "set_parameter_ranges"], [28, 3, 1, "", "set_parameters"], [28, 3, 1, "", "time_complexity"], [28, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[29, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[29, 2, 1, "", "complexity_type"], [29, 3, 1, "", "get_optimal_parameters_dict"], [29, 3, 1, "", "has_optimal_parameter"], [29, 3, 1, "", "initialize_parameter_ranges"], [29, 3, 1, "", "l"], [29, 2, 1, "", "memory_access"], [29, 3, 1, "", "memory_complexity"], [29, 3, 1, "", "optimal_parameters"], [29, 3, 1, "", "p"], [29, 3, 1, "", "p1"], [29, 3, 1, "", "parameter_names"], [29, 2, 1, "", "parameter_ranges"], [29, 3, 1, "", "quantum_time_complexity"], [29, 3, 1, "", "r"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "set_parameter_ranges"], [29, 3, 1, "", "set_parameters"], [29, 3, 1, "", "time_complexity"], [29, 3, 1, "", "w1"], [29, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[30, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[30, 2, 1, "", "complexity_type"], [30, 3, 1, "", "get_optimal_parameters_dict"], [30, 3, 1, "", "has_optimal_parameter"], [30, 3, 1, "", "initialize_parameter_ranges"], [30, 3, 1, "", "l"], [30, 2, 1, "", "memory_access"], [30, 3, 1, "", "memory_complexity"], [30, 3, 1, "", "optimal_parameters"], [30, 3, 1, "", "p"], [30, 3, 1, "", "parameter_names"], [30, 2, 1, "", "parameter_ranges"], [30, 3, 1, "", "quantum_time_complexity"], [30, 3, 1, "", "r"], [30, 3, 1, "", "reset"], [30, 3, 1, "", "set_parameter_ranges"], [30, 3, 1, "", "set_parameters"], [30, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[31, 1, 1, "", "MayOzerov"], [31, 1, 1, "", "MayOzerovD2"], [31, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "depth"], [31, 3, 1, "", "get_optimal_parameters_dict"], [31, 3, 1, "", "has_optimal_parameter"], [31, 3, 1, "", "initialize_parameter_ranges"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "memory_complexity"], [31, 3, 1, "", "optimal_parameters"], [31, 3, 1, "", "parameter_names"], [31, 2, 1, "", "parameter_ranges"], [31, 3, 1, "", "quantum_time_complexity"], [31, 3, 1, "", "r"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_parameter_ranges"], [31, 3, 1, "", "set_parameters"], [31, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "get_optimal_parameters_dict"], [31, 3, 1, "", "has_optimal_parameter"], [31, 3, 1, "", "initialize_parameter_ranges"], [31, 3, 1, "", "l"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "memory_complexity"], [31, 3, 1, "", "optimal_parameters"], [31, 3, 1, "", "p"], [31, 3, 1, "", "p1"], [31, 3, 1, "", "parameter_names"], [31, 2, 1, "", "parameter_ranges"], [31, 3, 1, "", "quantum_time_complexity"], [31, 3, 1, "", "r"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_parameter_ranges"], [31, 3, 1, "", "set_parameters"], [31, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "get_optimal_parameters_dict"], [31, 3, 1, "", "has_optimal_parameter"], [31, 3, 1, "", "initialize_parameter_ranges"], [31, 3, 1, "", "l"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "memory_complexity"], [31, 3, 1, "", "optimal_parameters"], [31, 3, 1, "", "p"], [31, 3, 1, "", "p1"], [31, 3, 1, "", "p2"], [31, 3, 1, "", "parameter_names"], [31, 2, 1, "", "parameter_ranges"], [31, 3, 1, "", "quantum_time_complexity"], [31, 3, 1, "", "r"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_parameter_ranges"], [31, 3, 1, "", "set_parameters"], [31, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[32, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[32, 2, 1, "", "complexity_type"], [32, 3, 1, "", "get_optimal_parameters_dict"], [32, 3, 1, "", "has_optimal_parameter"], [32, 2, 1, "", "memory_access"], [32, 3, 1, "", "memory_complexity"], [32, 3, 1, "", "optimal_parameters"], [32, 3, 1, "", "parameter_names"], [32, 2, 1, "", "parameter_ranges"], [32, 3, 1, "", "quantum_time_complexity"], [32, 3, 1, "", "r"], [32, 3, 1, "", "reset"], [32, 3, 1, "", "set_parameter_ranges"], [32, 3, 1, "", "set_parameters"], [32, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[33, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "get_optimal_parameters_dict"], [33, 3, 1, "", "has_optimal_parameter"], [33, 3, 1, "", "initialize_parameter_ranges"], [33, 3, 1, "", "l"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "memory_complexity"], [33, 3, 1, "", "optimal_parameters"], [33, 3, 1, "", "p"], [33, 3, 1, "", "parameter_names"], [33, 2, 1, "", "parameter_ranges"], [33, 3, 1, "", "quantum_time_complexity"], [33, 3, 1, "", "r"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_parameter_ranges"], [33, 3, 1, "", "set_parameters"], [33, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[34, 0, 0, "-", "ball_collision"], [35, 0, 0, "-", "bjmm"], [36, 0, 0, "-", "both_may"], [37, 0, 0, "-", "dumer"], [38, 0, 0, "-", "may_ozerov"], [39, 0, 0, "-", "prange"], [40, 0, 0, "-", "stern"], [41, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[34, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[34, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[35, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[35, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[36, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[36, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[37, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[37, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[38, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[38, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[39, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[39, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[40, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[40, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[41, 5, 1, "", "binary_entropy"], [41, 5, 1, "", "binomial_approximation"], [41, 5, 1, "", "inverse_binary_entropy"], [41, 5, 1, "", "list_of_random_tuples"], [41, 5, 1, "", "may_ozerov_near_neighbor_time"], [41, 5, 1, "", "representations_asymptotic"], [41, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator": [[42, 0, 0, "-", "sd_algorithm"], [43, 0, 0, "-", "sd_constants"], [44, 0, 0, "-", "sd_estimator"], [45, 0, 0, "-", "sd_helper"], [46, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[42, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[42, 2, 1, "", "complexity_type"], [42, 3, 1, "", "get_optimal_parameters_dict"], [42, 3, 1, "", "has_optimal_parameter"], [42, 2, 1, "", "memory_access"], [42, 3, 1, "", "memory_complexity"], [42, 3, 1, "", "optimal_parameters"], [42, 3, 1, "", "parameter_names"], [42, 2, 1, "", "parameter_ranges"], [42, 3, 1, "", "quantum_time_complexity"], [42, 3, 1, "", "r"], [42, 3, 1, "", "reset"], [42, 3, 1, "", "set_parameter_ranges"], [42, 3, 1, "", "set_parameters"], [42, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[43, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[43, 4, 1, "", "CONSTRAINTS"], [43, 4, 1, "", "GAUSS"], [43, 4, 1, "", "LISTS"], [43, 4, 1, "", "PERMUTATIONS"], [43, 4, 1, "", "REPRESENTATIONS"], [43, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[44, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[44, 3, 1, "", "algorithm_names"], [44, 3, 1, "", "algorithms"], [44, 2, 1, "", "bit_complexities"], [44, 2, 1, "", "complexity_type"], [44, 3, 1, "", "estimate"], [44, 4, 1, "", "excluded_algorithms_by_default"], [44, 3, 1, "", "fastest_algorithm"], [44, 2, 1, "", "memory_access"], [44, 3, 1, "", "nalgorithms"], [44, 3, 1, "", "reset"], [44, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[45, 5, 1, "", "binom"], [45, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[46, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[46, 3, 1, "", "expected_number_solutions"], [46, 3, 1, "", "get_parameters"], [46, 3, 1, "", "to_bitcomplexity_memory"], [46, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators": [[47, 0, 0, "-", "base_algorithm"], [48, 0, 0, "-", "base_constants"], [49, 0, 0, "-", "base_estimator"], [50, 0, 0, "-", "base_problem"], [51, 0, 0, "-", "helper"]], "cryptographic_estimators.base_algorithm": [[47, 1, 1, "", "BaseAlgorithm"], [47, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[47, 2, 1, "", "complexity_type"], [47, 3, 1, "", "get_optimal_parameters_dict"], [47, 3, 1, "", "has_optimal_parameter"], [47, 2, 1, "", "memory_access"], [47, 3, 1, "", "memory_complexity"], [47, 3, 1, "", "optimal_parameters"], [47, 3, 1, "", "parameter_names"], [47, 2, 1, "", "parameter_ranges"], [47, 3, 1, "", "quantum_time_complexity"], [47, 3, 1, "", "reset"], [47, 3, 1, "", "set_parameter_ranges"], [47, 3, 1, "", "set_parameters"], [47, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[49, 1, 1, "", "BaseEstimator"], [49, 5, 1, "", "channels"], [49, 5, 1, "", "codes"], [49, 5, 1, "", "cones"], [49, 5, 1, "", "crystals"], [49, 5, 1, "", "finance"], [49, 5, 1, "", "finite_dynamical_systems"], [49, 5, 1, "", "game_theory"], [49, 5, 1, "", "graph_coloring"], [49, 5, 1, "", "groups"], [49, 5, 1, "", "lattice_polytope"], [49, 5, 1, "", "lie_algebras"], [49, 5, 1, "", "lie_conformal_algebras"], [49, 5, 1, "", "manifolds"], [49, 5, 1, "", "matroids"], [49, 5, 1, "", "path_tableaux"], [49, 5, 1, "", "simplicial_complexes"], [49, 5, 1, "", "simplicial_sets"], [49, 5, 1, "", "tests"], [49, 5, 1, "", "toric_plotter"], [49, 5, 1, "", "valuations"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[49, 3, 1, "", "algorithm_names"], [49, 3, 1, "", "algorithms"], [49, 2, 1, "", "bit_complexities"], [49, 2, 1, "", "complexity_type"], [49, 3, 1, "", "estimate"], [49, 4, 1, "", "excluded_algorithms_by_default"], [49, 3, 1, "", "fastest_algorithm"], [49, 2, 1, "", "memory_access"], [49, 3, 1, "", "nalgorithms"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[50, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[50, 3, 1, "", "expected_number_solutions"], [50, 3, 1, "", "to_bitcomplexity_memory"], [50, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.helper": [[51, 1, 1, "", "ComplexityType"], [51, 5, 1, "", "concat_all_tables"], [51, 5, 1, "", "concat_pretty_tables"], [51, 5, 1, "", "memory_access_cost"], [51, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[51, 4, 1, "", "ESTIMATE"], [51, 4, 1, "", "TILDEO"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"dummy_algorithm1": 0, "dummy_algorithm": 1, "dummy_estim": 2, "dummy_problem": 3, "bjorklund": 4, "boolean_solve_fxl": 5, "cgmta": 6, "crossbr": 7, "dinur1": 8, "dinur2": 9, "exhaustive_search": 10, "f5": 11, "hybrid_f5": 12, "kpg": 13, "lokshtanov": 14, "mht": 15, "degree_of_regular": 16, "mq_algorithm": 17, "mq_constant": 18, "mq_estim": 19, "mq_helper": 20, "mq_problem": 21, "hilbert": 22, "nmonomi": 23, "witness_degre": 24, "ball_collis": [25, 34], "bjmm": [26, 35], "bjmm_dw": 27, "bjmm_pdw": 28, "both_mai": [29, 36], "dumer": [30, 37], "may_ozerov": [31, 38], "prang": [32, 39], "stern": [33, 40], "workfactor_help": 41, "sd_algorithm": 42, "sd_constant": 43, "sd_estim": 44, "sd_helper": 45, "sd_problem": 46, "base_algorithm": 47, "base_const": 48, "base_estim": 49, "famili": 49, "code": 49, "rich": 49, "represent": 49, "gener": [49, 52], "matrix": 49, "deriv": 49, "catalog": 49, "function": 49, "method": 49, "base_problem": 50, "helper": 51, "tii": 52, "cryptanalysi": 52, "librari": 52, "mqestim": 52, "seri": 52, "mqalgorithm": 52, "sdestim": 52, "sdalgorithm": 52, "sdworkfactormodel": 52, "dummyestim": 52, "dummyalgorithm": 52, "inform": 52, "indic": 52, "tabl": 52}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "bjorklund": [[4, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "boolean_solve_fxl": [[5, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"]], "cgmta": [[6, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "crossbred": [[7, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "dinur1": [[8, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "dinur2": [[9, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "exhaustive_search": [[10, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "f5": [[11, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "hybrid_f5": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "kpg": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "lokshtanov": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "mht": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "degree_of_regularity": [[16, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "mq_algorithm": [[17, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "mq_constants": [[18, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mq_estimator": [[19, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "mq_helper": [[20, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "mq_problem": [[21, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "hilbert": [[22, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "nmonomial": [[23, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "witness_degree": [[24, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "ball_collision": [[25, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [34, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "bjmm": [[26, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [35, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "bjmm_dw": [[27, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "bjmm_pdw": [[28, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "both_may": [[29, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [36, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "dumer": [[30, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [37, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "may_ozerov": [[31, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [38, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "prange": [[32, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [39, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "stern": [[33, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [40, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "workfactor_helper": [[41, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "sd_algorithm": [[42, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "sd_constants": [[43, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sd_estimator": [[44, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "sd_helper": [[45, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "sd_problem": [[46, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "base_algorithm": [[47, "module-cryptographic_estimators.base_algorithm"]], "base_constants": [[48, "module-cryptographic_estimators.base_constants"]], "base_estimator": [[49, "module-cryptographic_estimators.base_estimator"]], "Families of Codes (Rich representation)": [[49, "families-of-codes-rich-representation"]], "Families of Codes (Generator matrix representation)": [[49, "families-of-codes-generator-matrix-representation"]], "Derived Codes": [[49, "derived-codes"]], "Catalog": [[49, "catalog"]], "Functions": [[49, "functions"]], "Methods": [[49, "methods"]], "base_problem": [[50, "module-cryptographic_estimators.base_problem"]], "helper": [[51, "module-cryptographic_estimators.helper"]], "TII Cryptanalysis Library": [[52, "tii-cryptanalysis-library"]], "MQEstimator": [[52, "mqestimator"]], "series": [[52, "series"]], "MQAlgorithms": [[52, "mqalgorithms"]], "SDEstimator": [[52, "sdestimator"]], "SDAlgorithms": [[52, "sdalgorithms"]], "SDWorkfactorModels": [[52, "sdworkfactormodels"]], "DummyEstimator": [[52, "dummyestimator"]], "DummyAlgorithms": [[52, "dummyalgorithms"]], "General Information": [[52, "general-information"]], "Indices and Tables": [[52, "indices-and-tables"]]}, "indexentries": {"dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1"]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type"]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity"]], "module": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"], [1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"], [2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"], [3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"], [4, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"], [5, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"], [6, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"], [7, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"], [8, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"], [9, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"], [10, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"], [11, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"], [12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"], [13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"], [14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"], [15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"], [16, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"], [17, "module-cryptographic_estimators.MQEstimator.mq_algorithm"], [18, "module-cryptographic_estimators.MQEstimator.mq_constants"], [19, "module-cryptographic_estimators.MQEstimator.mq_estimator"], [20, "module-cryptographic_estimators.MQEstimator.mq_helper"], [21, "module-cryptographic_estimators.MQEstimator.mq_problem"], [22, "module-cryptographic_estimators.MQEstimator.series.hilbert"], [23, "module-cryptographic_estimators.MQEstimator.series.nmonomial"], [24, "module-cryptographic_estimators.MQEstimator.witness_degree"], [25, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [26, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [27, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"], [28, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"], [29, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [30, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [31, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [32, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [33, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [34, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"], [35, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"], [36, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"], [37, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"], [38, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"], [39, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [40, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [41, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"], [42, "module-cryptographic_estimators.SDEstimator.sd_algorithm"], [43, "module-cryptographic_estimators.SDEstimator.sd_constants"], [44, "module-cryptographic_estimators.SDEstimator.sd_estimator"], [45, "module-cryptographic_estimators.SDEstimator.sd_helper"], [46, "module-cryptographic_estimators.SDEstimator.sd_problem"], [47, "module-cryptographic_estimators.base_algorithm"], [48, "module-cryptographic_estimators.base_constants"], [49, "module-cryptographic_estimators.base_estimator"], [50, "module-cryptographic_estimators.base_problem"], [51, "module-cryptographic_estimators.helper"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters"]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1"]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2"]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.quantum_time_complexity"]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity"]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.quantum_time_complexity"]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity"]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator"]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms"]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset"]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table"]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem"]], "cryptographic_estimators.dummyestimator.dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time"]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[4, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[4, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity"]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl": [[5, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.time_complexity"]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[5, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.variant"]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[6, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[6, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity"]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred"]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D"], [7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[7, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant"]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[7, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity"]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[8, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter"]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[8, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity"]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[9, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity"]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[9, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity"]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[10, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[10, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity"]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[11, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[11, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity"]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity"]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity"]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity"]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity"]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[16, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[16, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[16, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system"]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[16, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[16, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system"]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm"]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type"]], "cryptographic_estimators.mqestimator.mq_algorithm": [[17, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.quantum_time_complexity"]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[17, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity"]], "cryptographic_estimators.mqestimator.mq_constants": [[18, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator"]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type"]], "cryptographic_estimators.mqestimator.mq_estimator": [[19, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset"]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[19, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table"]], "cryptographic_estimators.mqestimator.mq_helper": [[20, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "ngates() (in module cryptographic_estimators.mqestimator.mq_helper)": [[20, "cryptographic_estimators.MQEstimator.mq_helper.ngates"]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[20, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree"]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[20, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree"]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[20, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients"]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem"]], "cryptographic_estimators.mqestimator.mq_problem": [[21, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions"]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters"]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field"]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system"]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system"]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system"]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field"]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[21, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time"]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries"]], "cryptographic_estimators.mqestimator.series.hilbert": [[22, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees"]], "first_nonpositive_integer() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_integer"]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials"]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables"]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision"]], "ring (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.ring"]], "series (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[22, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.series"]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[23, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries"]], "cryptographic_estimators.mqestimator.series.nmonomial": [[23, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[23, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree"]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[23, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree"]], "series_monomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[23, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_of_degree"]], "series_monomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[23, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_up_to_degree"]], "cryptographic_estimators.mqestimator.witness_degree": [[24, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[24, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[24, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system"]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[25, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges"]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[25, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity"]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM"]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2"]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[26, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.quantum_time_complexity"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.quantum_time_complexity"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[26, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity"]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[27, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1"]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[27, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2"]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[28, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[28, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2"]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[29, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[29, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2"]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[30, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[30, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity"]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov"]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2"]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[31, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.quantum_time_complexity"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.quantum_time_complexity"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[31, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity"]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[32, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[32, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[33, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[33, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity"]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[34, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[34, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[34, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters"]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[35, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[35, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[35, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters"]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[36, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[36, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[36, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters"]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[37, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[37, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[37, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters"]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[38, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[38, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[38, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters"]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[39, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[39, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[39, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters"]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[40, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[40, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[40, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters"]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy"]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[41, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy"]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples"]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time"]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic"]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[41, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap"]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm"]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type"]], "cryptographic_estimators.sdestimator.sd_algorithm": [[42, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.quantum_time_complexity"]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r"]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[42, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[43, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation"]], "cryptographic_estimators.sdestimator.sd_constants": [[43, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator"]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type"]], "cryptographic_estimators.sdestimator.sd_estimator": [[44, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset"]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[44, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table"]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[45, "cryptographic_estimators.SDEstimator.sd_helper.binom"]], "cryptographic_estimators.sdestimator.sd_helper": [[45, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[45, "cryptographic_estimators.SDEstimator.sd_helper.min_max"]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[46, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem"]], "cryptographic_estimators.sdestimator.sd_problem": [[46, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[46, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[46, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[46, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[46, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time"]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm"]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type"]], "cryptographic_estimators.base_algorithm": [[47, "module-cryptographic_estimators.base_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access"]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity"]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[47, "cryptographic_estimators.base_algorithm.optimal_parameter"]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges"]], "quantum_time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.quantum_time_complexity"]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[47, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity"]], "cryptographic_estimators.base_constants": [[48, "module-cryptographic_estimators.base_constants"]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator"]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities"]], "channels() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.channels"]], "codes() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.codes"]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type"]], "cones() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.cones"]], "cryptographic_estimators.base_estimator": [[49, "module-cryptographic_estimators.base_estimator"]], "crystals() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.crystals"]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm"]], "finance() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.finance"]], "finite_dynamical_systems() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.finite_dynamical_systems"]], "game_theory() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.game_theory"]], "graph_coloring() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.graph_coloring"]], "groups() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.groups"]], "lattice_polytope() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.lattice_polytope"]], "lie_algebras() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.lie_algebras"]], "lie_conformal_algebras() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.lie_conformal_algebras"]], "manifolds() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.manifolds"]], "matroids() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.matroids"]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms"]], "path_tableaux() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.path_tableaux"]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.reset"]], "simplicial_complexes() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.simplicial_complexes"]], "simplicial_sets() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.simplicial_sets"]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[49, "cryptographic_estimators.base_estimator.BaseEstimator.table"]], "tests() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.tests"]], "toric_plotter() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.toric_plotter"]], "valuations() (in module cryptographic_estimators.base_estimator)": [[49, "cryptographic_estimators.base_estimator.valuations"]], "baseproblem (class in cryptographic_estimators.base_problem)": [[50, "cryptographic_estimators.base_problem.BaseProblem"]], "cryptographic_estimators.base_problem": [[50, "module-cryptographic_estimators.base_problem"]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[50, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions"]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[50, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[50, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time"]], "complexitytype (class in cryptographic_estimators.helper)": [[51, "cryptographic_estimators.helper.ComplexityType"]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[51, "cryptographic_estimators.helper.ComplexityType.ESTIMATE"]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[51, "cryptographic_estimators.helper.ComplexityType.TILDEO"]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[51, "cryptographic_estimators.helper.concat_all_tables"]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[51, "cryptographic_estimators.helper.concat_pretty_tables"]], "cryptographic_estimators.helper": [[51, "module-cryptographic_estimators.helper"]], "memory_access_cost() (in module cryptographic_estimators.helper)": [[51, "cryptographic_estimators.helper.memory_access_cost"]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[51, "cryptographic_estimators.helper.round_or_truncate"]]}})