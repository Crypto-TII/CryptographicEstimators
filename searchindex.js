Search.setIndex({"docnames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "LEEstimator/LEAlgorithms/bbps", "LEEstimator/LEAlgorithms/beullens", "LEEstimator/LEAlgorithms/leon", "LEEstimator/le_algorithm", "LEEstimator/le_constants", "LEEstimator/le_estimator", "LEEstimator/le_helper", "LEEstimator/le_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/boolean_solve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "PEEstimator/PEAlgorithms/beullens", "PEEstimator/PEAlgorithms/leon", "PEEstimator/PEAlgorithms/ssa", "PEEstimator/pe_algorithm", "PEEstimator/pe_constants", "PEEstimator/pe_estimator", "PEEstimator/pe_helper", "PEEstimator/pe_problem", "PKEstimator/PKAlgorithms/kmp", "PKEstimator/PKAlgorithms/sbc", "PKEstimator/pk_algorithm", "PKEstimator/pk_constants", "PKEstimator/pk_estimator", "PKEstimator/pk_helper", "PKEstimator/pk_problem", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "SDFqEstimator/SDFqAlgorithms/leebrickell", "SDFqEstimator/SDFqAlgorithms/prange", "SDFqEstimator/SDFqAlgorithms/stern", "SDFqEstimator/sdfq_algorithm", "SDFqEstimator/sdfq_constants", "SDFqEstimator/sdfq_estimator", "SDFqEstimator/sdfq_helper", "SDFqEstimator/sdfq_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "helper", "index", "references"], "filenames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "LEEstimator/LEAlgorithms/bbps.rst", "LEEstimator/LEAlgorithms/beullens.rst", "LEEstimator/LEAlgorithms/leon.rst", "LEEstimator/le_algorithm.rst", "LEEstimator/le_constants.rst", "LEEstimator/le_estimator.rst", "LEEstimator/le_helper.rst", "LEEstimator/le_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/boolean_solve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "PEEstimator/PEAlgorithms/beullens.rst", "PEEstimator/PEAlgorithms/leon.rst", "PEEstimator/PEAlgorithms/ssa.rst", "PEEstimator/pe_algorithm.rst", "PEEstimator/pe_constants.rst", "PEEstimator/pe_estimator.rst", "PEEstimator/pe_helper.rst", "PEEstimator/pe_problem.rst", "PKEstimator/PKAlgorithms/kmp.rst", "PKEstimator/PKAlgorithms/sbc.rst", "PKEstimator/pk_algorithm.rst", "PKEstimator/pk_constants.rst", "PKEstimator/pk_estimator.rst", "PKEstimator/pk_helper.rst", "PKEstimator/pk_problem.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "SDFqEstimator/SDFqAlgorithms/leebrickell.rst", "SDFqEstimator/SDFqAlgorithms/prange.rst", "SDFqEstimator/SDFqAlgorithms/stern.rst", "SDFqEstimator/sdfq_algorithm.rst", "SDFqEstimator/sdfq_constants.rst", "SDFqEstimator/sdfq_estimator.rst", "SDFqEstimator/sdfq_helper.rst", "SDFqEstimator/sdfq_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "helper.rst", "index.rst", "references.rst"], "titles": ["dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "bbps", "beullens", "leon", "le_algorithm", "le_constants", "le_estimator", "le_helper", "le_problem", "bjorklund", "boolean_solve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "beullens", "leon", "ssa", "pe_algorithm", "pe_constants", "pe_estimator", "pe_helper", "pe_problem", "kmp", "sbc", "pk_algorithm", "pk_constants", "pk_estimator", "pk_helper", "pk_problem", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "leebrickell", "prange", "stern", "sdfq_algorithm", "sdfq_constants", "sdfq_estimator", "sdfq_helper", "sdfq_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "helper", "TII Cryptanalysis Library", "References"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82], "cryptographic_estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83], "dummyestim": [0, 1, 2, 3], "dummyalgorithm": [0, 1], "dummyalgorithm1": [0, 83], "problem": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 69, 70, 71, 72, 73, 77, 78, 81, 84], "dummyproblem": [0, 1, 3, 83], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82], "construct": [0, 2, 3, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 38, 40, 45, 47, 50, 51, 55, 56, 67, 69, 70, 71, 72, 77, 80, 81], "an": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 77, 78, 80, 81, 84], "instanc": [0, 2, 3, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 38, 40, 45, 47, 50, 51, 55, 56, 67, 69, 70, 71, 72, 77, 80, 81], "estim": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 82, 83], "add": [0, 67], "refer": [0, 80, 83], "correpond": 0, "paper": [0, 80], "here": [0, 67, 80], "input": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82], "object": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 30, 31, 33, 34, 35, 36, 41, 42, 43, 48, 49, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80, 81], "includ": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "all": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "necessari": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 75, 78, 80, 81], "memory_access": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 83], "specifi": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81], "access": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "cost": [0, 1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "model": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 80], "default": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 77, 78, 80], "0": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 67, 70, 71, 72, 73, 75, 78, 80, 82], "choic": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "constant": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "1": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 36, 38, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 67, 70, 71, 72, 73, 75, 78, 80, 82], "logarithm": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 33, 34, 35, 36, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 69, 70, 71, 72, 73, 77, 78, 80, 81], "2": [0, 1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 64, 65, 67, 70, 71, 72, 73, 75, 78, 80, 84], "squar": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "root": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "3": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 65, 67, 70, 71, 72, 73, 75, 78, 80, 84], "cube": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "deploi": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "custom": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "function": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 70, 71, 72, 73, 78], "which": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "take": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "total": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "usag": [0, 1, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "complexity_typ": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 83], "complex": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 84], "type": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "consid": [0, 1, 2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 38, 45, 67, 73, 75, 78, 80], "tild": [0, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 73, 78, 80, 82], "o": [0, 1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 31, 73, 78, 80, 82, 84], "exampl": [0, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 70, 71, 72, 75, 80, 83], "sage": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "from": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 83, 84], "import": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 83], "dummy_problem": [0, 83], "e": [0, 2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 29, 38, 40, 45, 47, 49, 67, 75, 80, 84], "100": [0, 4, 5, 6, 33, 34, 35, 38, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 70, 71, 72, 75, 80], "50": [0, 4, 5, 6, 30, 33, 34, 35, 38, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 70, 71, 72, 75], "dummi": [0, 1], "algorithm": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 75, 77, 78, 80, 83, 84], "properti": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "return": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81], "attribut": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "_complexity_typ": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "get_optimal_parameters_dict": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "optim": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 75, 77, 78, 80], "dictionari": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "has_optimal_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "true": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 82], "ha": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "test": [0, 1, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 34, 35, 36, 38, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 83], "basealgorithm": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80, 83], "baseproblem": [0, 1, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 69, 70, 71, 72, 73, 77, 78, 80, 81, 83], "fals": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 68, 70, 71, 72, 73, 75, 76, 78, 80], "_memory_access": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "memory_access_cost": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "mem": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "float": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 69, 70, 71, 72, 73, 77, 78, 81, 82], "consumpt": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "memory_complex": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "optimal_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "each": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 16, 17, 20, 22, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "valu": [0, 1, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 66, 70, 71, 72, 73, 74, 78, 80, 82], "i": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 33, 34, 35, 36, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 82, 83, 84], "provid": [0, 1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 20, 22, 25, 28, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "comput": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 22, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 78, 80, 84], "done": [0, 1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 20, 22, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "those": [0, 1, 4, 5, 6, 7, 12, 13, 15, 16, 17, 20, 22, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "optimization_parameter_1": [0, 83], "25": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 38, 50, 52, 67, 75], "optimization_parameter_2": [0, 83], "optimization_parameter_3": [0, 83], "10": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 32, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 70, 71, 72, 75, 80, 84], "parameter_nam": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "list": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 32, 33, 34, 35, 36, 38, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 80, 82, 83], "name": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 62, 63, 65, 68, 70, 71, 72, 73, 76, 78, 80, 84], "parameter_rang": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "set": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 77, 78, 80], "rang": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "ar": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "search": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 65, 70, 71, 72, 73, 78, 83, 84], "us": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 65, 67, 70, 71, 72, 73, 75, 78, 80, 81, 83], "onli": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "reset": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80, 83], "intern": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "state": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "set_parameter_rang": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "str": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 82], "min_valu": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "max_valu": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "specif": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 80], "alreadi": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "must": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "fall": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "lowerbound": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "inclus": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "upperbound": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "set_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "dict": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 81], "predifin": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "subset": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78], "time_complex": [0, 1, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 33, 34, 35, 36, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 72, 73, 78, 83], "time": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 35, 36, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 70, 71, 72, 73, 75, 78, 80], "problem_parameter1": [2, 3], "problem_parameter2": [2, 3], "memory_bound": [2, 9, 27, 29, 38, 45, 67, 75, 81], "inf": [2, 9, 27, 38, 45, 67, 75], "baseestim": [2, 9, 27, 38, 45, 67, 75, 80, 83], "first": [2, 3, 15, 16, 24, 30, 80, 82], "second": [2, 3, 17, 51, 80, 82], "nsolut": [2, 3, 9, 11, 16, 27, 29, 38, 40, 45, 47, 67, 69, 75, 77, 81], "number": [2, 3, 6, 9, 11, 12, 16, 24, 27, 28, 29, 31, 34, 38, 39, 40, 45, 47, 64, 67, 69, 75, 77, 80, 81, 82], "solut": [2, 3, 9, 11, 12, 15, 16, 18, 27, 29, 38, 40, 45, 47, 67, 69, 75, 77, 81], "scale": [2, 3, 11, 29, 40, 47, 69, 77], "algorithm_nam": [2, 9, 27, 38, 45, 67, 75, 80, 83], "bit_complex": [2, 9, 14, 18, 27, 38, 45, 67, 73, 75, 78, 80, 83], "describ": [2, 9, 22, 27, 38, 45, 67, 75, 80], "its": [2, 9, 27, 38, 45, 52, 67, 75, 80], "excluded_algorithms_by_default": [2, 9, 27, 38, 45, 67, 75, 80, 83], "fastest_algorithm": [2, 9, 27, 38, 45, 67, 75, 80, 83], "use_tilde_o_tim": [2, 9, 27, 38, 45, 67, 75, 80], "smallest": [2, 9, 27, 38, 45, 67, 75, 80], "\u014d": [2, 9, 27, 38, 45, 67, 75, 80], "ignor": [2, 9, 27, 38, 45, 67, 75, 80], "polynomi": [2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 38, 45, 67, 75, 80, 84], "factor": [2, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 38, 45, 67, 75, 80], "nalgorithm": [2, 9, 27, 38, 45, 67, 75, 80, 83], "tabl": [2, 9, 27, 38, 45, 67, 75, 80, 82], "show_quantum_complex": [2, 9, 27, 38, 45, 67, 75, 80], "show_tilde_o_tim": [2, 9, 27, 38, 45, 67, 75, 80], "show_all_paramet": [2, 9, 27, 38, 45, 67, 75, 80], "precis": [2, 9, 27, 30, 38, 45, 67, 75, 80, 82, 83], "truncat": [2, 9, 27, 38, 45, 67, 75, 80, 82], "print": [2, 9, 27, 38, 45, 67, 75, 80], "show": [2, 9, 27, 38, 45, 67, 75, 80, 83], "quantum": [2, 9, 27, 38, 45, 52, 67, 75, 80], "decim": [2, 9, 27, 38, 45, 67, 75, 80], "digit": [2, 9, 27, 38, 45, 67, 75, 80, 82], "output": [2, 9, 27, 38, 45, 67, 75, 80], "rather": [2, 9, 27, 38, 45, 67, 75, 80], "than": [2, 9, 24, 27, 38, 45, 67, 75, 80], "round": [2, 9, 27, 38, 45, 67, 75, 80, 82], "contain": [3, 80], "over": [3, 13, 14, 15, 16, 17, 20, 21, 22, 24, 29, 30, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 70, 71, 72, 73, 77, 80, 84], "expected_number_solut": [3, 11, 29, 40, 47, 69, 77, 81, 83], "expect": [3, 11, 29, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 69, 70, 71, 72, 77, 81], "exist": [3, 11, 29, 40, 47, 69, 77, 81], "get_paramet": [3, 11, 40, 47, 69, 77, 83], "to_bitcomplexity_memori": [3, 11, 29, 40, 47, 69, 77, 81, 83], "elements_to_stor": [3, 11, 29, 40, 47, 69, 77, 81], "bit": [3, 11, 27, 29, 40, 47, 54, 69, 73, 77, 78, 80, 81], "associ": [3, 11, 29, 40, 47, 69, 77, 80, 81], "given": [3, 11, 15, 22, 24, 28, 29, 31, 40, 47, 69, 73, 77, 78, 80, 81], "element": [3, 11, 29, 40, 41, 42, 43, 45, 47, 69, 77, 81], "store": [3, 11, 29, 40, 47, 69, 77, 80, 81], "oper": [3, 27, 29, 41, 42, 43, 45, 69, 73, 78, 80, 81], "to_bitcomplexity_tim": [3, 11, 29, 40, 47, 69, 77, 81, 83], "basic_oper": [3, 11, 29, 40, 47, 69, 77, 81], "correspond": [3, 11, 29, 40, 47, 69, 77], "certain": 3, "amount": 3, "basic": [3, 29, 73, 78, 81], "leestim": [4, 5, 6, 7, 8, 9, 10, 11], "lealgorithm": [4, 5, 6, 7, 9], "leproblem": [4, 5, 6, 7, 11, 41, 42, 43, 83], "bbps20": [4, 35, 84], "adapt": [4, 5, 6, 33, 34, 41, 42, 65, 73], "version": [4, 5, 6, 33, 34, 41, 42, 80], "script": [4, 5, 6, 33, 34], "deriv": [4, 5, 6, 33, 34], "code": [4, 5, 6, 9, 10, 11, 33, 34, 38, 39, 40, 41, 42, 49, 50, 52, 53, 54, 67, 69, 75, 77, 83, 84], "http": [4, 5, 6, 33, 34, 41, 42, 80, 84], "github": [4, 5, 6, 33, 34, 41, 42], "com": [4, 5, 6, 33, 34, 41, 42, 84], "paolo": [4, 84], "santini": [4, 84], "less_project": 4, "peproblem": [4, 6, 33, 34, 35, 36, 40, 83], "sd_paramet": [4, 5, 6, 33, 34, 38, 45], "sdfqestim": [4, 5, 6, 33, 34, 70, 71, 72, 73, 74, 75, 76, 77], "subroutin": [4, 5, 6, 33, 34, 38], "n": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 67, 68, 69, 70, 71, 72, 75, 76, 77, 80, 84], "k": [4, 5, 6, 9, 10, 11, 13, 14, 15, 20, 27, 33, 34, 35, 38, 39, 40, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 67, 68, 69, 70, 71, 72, 75, 76, 77, 80, 83, 84], "q": [4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 47, 70, 71, 72, 75, 77, 80, 84], "permut": [4, 5, 6, 33, 34, 35, 38, 40, 41, 42, 43, 45, 47, 66, 74, 80, 83, 84], "equival": [4, 5, 6, 9, 11, 33, 34, 35, 38, 40, 84], "w": [4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 34, 38, 39, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 69, 70, 71, 72, 75, 77, 83, 84], "A": [4, 5, 6, 9, 14, 33, 34, 38, 41, 42, 45, 48, 49, 50, 51, 52, 53, 54, 56, 67, 70, 72, 75, 80, 84], "200": [4, 9], "110": [4, 9], "31": [4, 9, 20, 27, 33, 41, 42, 45, 70, 72, 75, 80], "102": [4, 9], "w_prime": [4, 9, 83], "60": [4, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27], "beu20": [5, 6, 33, 34, 84], "wardbeullen": [5, 6, 33, 34], "less_attack": [5, 6, 33, 34], "34": 5, "leo82": [6, 34, 84], "codewords_needed_for_success": [6, 34], "low": [6, 34], "word": [6, 34, 39], "codeword": [6, 34], "need": [6, 34, 47, 80, 83], "success": [6, 34], "peestim": [6, 33, 34, 35, 36, 37, 38, 39, 40], "pealgorithm": [6, 33, 34, 35, 36, 38], "20": [6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 34, 49, 67, 80], "sd": 7, "verboseinform": [8, 37, 44, 66, 74, 83], "enum": [8, 37, 44, 66, 74, 82], "isd": [8, 44, 53, 69, 77, 83], "c_isd": 8, "l_prime": 8, "lists_siz": [8, 37, 83], "list_siz": [8, 37, 64], "normal_form": [8, 37, 83], "nw": [8, 46, 83], "nw_prime": 8, "int": [9, 10, 11, 24, 27, 29, 30, 31, 32, 38, 39, 40, 45, 46, 47, 53, 58, 64, 67, 68, 69, 75, 76, 77, 82], "linear": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 49, 52, 53, 54, 65, 80], "length": [9, 10, 11, 38, 40, 67, 69, 75, 77], "dimens": [9, 10, 11, 38, 40, 50, 67, 69, 75, 77, 80], "field": [9, 11, 14, 15, 20, 21, 24, 27, 28, 29, 30, 31, 32, 38, 40, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 70, 71, 72, 75, 77, 80, 84], "size": [9, 11, 15, 31, 38, 40, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 70, 71, 72, 75, 77], "excluded_algorithm": [9, 27, 38, 45, 67, 75, 80], "tupl": [9, 19, 20, 27, 38, 45, 67, 75, 80], "exclud": [9, 27, 38, 45, 67, 75, 80], "none": [9, 24, 27, 29, 30, 31, 32, 38, 45, 57, 58, 59, 60, 61, 62, 63, 67, 75, 80], "long": [9, 27, 38, 67, 75], "leon": [9, 38, 83, 84], "105": [9, 27], "356": 9, "33": [9, 27], "624": 9, "beullen": [9, 38, 83, 84], "123": [9, 27], "109": [9, 27], "42": [9, 27, 33, 38, 67, 75], "252": 9, "bbp": [9, 83], "97": 9, "495": 9, "79": [9, 67], "cost_to_find_random_2dim_subcodes_with_support_w": [10, 83], "find": [10, 12, 15], "dimension": [10, 80], "subcod": [10, 80, 84], "support": [10, 35, 80, 84], "fq": [11, 40, 41, 42, 43, 45, 47, 73, 77, 84], "addit": [11, 29, 40, 41, 42, 43, 45, 47, 69, 77, 80], "mqestim": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32], "mqalgorithm": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "mqproblem": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29, 83], "et": [12, 22], "al": [12, 22], "probabilist": [12, 16, 17, 22], "solv": [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 29, 81, 84], "mq": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "gf": [12, 13, 16, 17, 22, 84], "bkw19": [12, 84], "It": [12, 14, 16, 17, 22], "qudract": 12, "system": [12, 15, 16, 20, 21, 22, 24, 29, 30, 32, 80, 84], "pariti": [12, 16, 80, 84], "h": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 40, 64, 84], "extern": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 80], "hybrid": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 84], "mq_problem": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 83], "m": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 32, 41, 42, 43, 45, 46, 47, 80, 84], "12": [12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 32, 54, 67, 80], "bj\u00f6rklund": [12, 84], "variabl": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 54], "algebra": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 80], "theta": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 83], "expon": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 48], "convers": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29], "get_reduced_paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 83], "lambda_": [12, 16, 27, 83], "linear_algebra_const": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 83], "mq_algorithm": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 83], "5": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 67, 70, 75, 80], "4": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 67, 75, 80], "npolynomials_reduc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 83], "after": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 80], "appli": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 51, 77], "thoma": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 49], "wolf": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "strategi": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "18": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 49], "nvariables_reduc": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 83], "fix": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25], "some": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 38, 80], "booleansolvefxl": [13, 27, 83], "booleansolv": 13, "fxl": 13, "respect": [13, 24], "bfss11": [13, 84], "ckp": [13, 84], "thei": [13, 80], "work": [13, 14, 80], "guess": 13, "consist": [13, 15, 22, 80], "result": [13, 15, 80], "subsystem": [13, 20], "7": [13, 14, 15, 27, 30, 31, 32, 38, 45, 48, 67, 72, 75, 80], "variant": [13, 27, 83], "determinist": [13, 27], "cgmt": 14, "ani": [14, 15, 64, 80], "finit": [14, 20, 24, 27, 28, 29, 30, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 70, 71, 72, 80, 84], "when": [14, 23], "integ": [14, 24, 28, 30, 31, 32, 80], "2k": 14, "leq": [14, 23, 80], "cgmt02": [14, 84], "note": 14, "In": [14, 15, 48, 49, 52, 53, 54, 80], "thi": [14, 15, 18, 80, 83], "modul": [14, 18, 80, 83], "compleixti": 14, "min": [14, 40, 68, 76], "floor": 14, "sqrt": 14, "41": [14, 27], "nvariabl": [14, 21, 23, 29, 30, 83], "339850002884624": 14, "23": [14, 20, 27, 67, 75], "137080884841787": 14, "The": [15, 16, 18, 20, 21, 23, 24, 41, 42, 80, 84], "jv18": [15, 84], "two": [15, 80, 82], "step": 15, "preprocess": 15, "we": [15, 67, 80], "degre": [15, 19, 20, 24, 28, 30, 31, 32, 83], "d": [15, 27, 28, 31, 39, 42, 45, 46, 48, 49, 50, 80, 83, 84], "ideal": [15, 28], "gener": [15, 18, 28], "initi": [15, 49, 50, 51, 52, 53, 54, 56, 70, 72, 80], "everi": 15, "special": [15, 16, 77, 80], "final": [15, 44], "found": [15, 18, 80], "direct": 15, "our": 15, "formula": [15, 18], "dua20": [15, 84], "either": [15, 80, 82], "max_d": [15, 83], "upper": [15, 50, 80], "bound": [15, 39, 50, 80], "macaulai": 15, "matrix": [15, 45, 47], "dinurfirst": [16, 27, 83], "dinur": [16, 17, 84], "din21a": [16, 17, 84], "mani": [16, 80], "quadrat": [16, 20, 21, 24, 32, 80, 84], "These": [16, 80], "come": 16, "origin": [16, 41, 42], "kappa": [16, 27, 83], "9": [16, 22, 24, 27, 30, 45, 56, 67, 75], "dinursecond": [17, 27, 83], "din21b": [17, 84], "idea": [17, 20, 80], "n1": [17, 27, 80, 83], "n_1": 17, "exhaustivesearch": [18, 27, 83], "exhaust": [18, 20, 84], "evalu": 18, "possibl": 18, "until": 18, "one": [18, 41, 42, 43, 45, 47, 80, 82], "shown": 18, "bcccnsy10": [18, 84], "228818690495881": 18, "e0": 18, "15": [18, 19, 24, 27, 29, 30, 32, 38, 67, 80], "e1": 18, "17": [18, 27], "917197145402291": 18, "degree_of_polynomi": [19, 20, 83], "f5_": 19, "24": [19, 21, 23, 38, 41, 67, 75, 80], "578308707446713": 19, "19": [19, 27, 75, 80], "934452517671986": 19, "hybridf5": [20, 27, 83], "propos": [20, 41], "bfp09": [20, 84], "bfp12": [20, 84], "tradeoff": 20, "between": [20, 80, 82], "groebner": 20, "sai": 20, "where": [20, 80], "order": [20, 24, 27, 28, 29, 30, 32, 80], "grobner": 20, "f5": [20, 27, 83], "mpkc": 20, "256": 20, "equat": [21, 22, 24, 28, 84], "even": [21, 80], "characterist": 21, "kpg99": [21, 84], "comp": [21, 23], "183": [21, 23], "8": [21, 23, 27, 30, 45, 49, 53, 67, 80], "61636217728924": [21, 23], "628922047916475": [21, 23], "lptwy17": [22, 84], "determin": [22, 80], "delta": [22, 27, 83], "mht13": [23, 84], "generic_system": [24, 83], "regular": [24, 32], "repres": [24, 30, 32], "traceback": [24, 28], "most": [24, 28, 80], "recent": [24, 28], "call": [24, 28, 80], "last": [24, 28], "valueerror": [24, 28, 80], "defin": [24, 29, 80], "quadratic_system": [24, 32, 83], "16": [24, 27, 28, 30, 67, 80], "regular_system": [24, 83], "equal": [24, 29], "semi_regular_system": [24, 32, 83], "semi": [24, 32], "f_1": 24, "ldot": 24, "f_m": 24, "d_1": 24, "d_m": 24, "index": [24, 80, 83], "non": [24, 28, 30, 31], "posit": [24, 30, 80], "coeffici": [24, 64, 68, 76], "dfrac": 24, "prod_": 24, "z": [24, 30, 31, 64, 80, 84], "d_i": 24, "If": [24, 28, 80], "follow": [24, 80, 83], "sequenc": [24, 80], "cdot": [24, 80], "bigg": 24, "relev": [27, 80], "45": [27, 28], "bjorklund": [27, 83], "80": [27, 30], "6": [27, 28, 30, 31, 67, 80], "crossbr": [27, 83, 84], "39": [27, 67], "37": 27, "57": [27, 42, 45], "44": 27, "43": [27, 38], "lokshtanov": [27, 83, 84], "93": 27, "451": 27, "316": 27, "584": 27, "240": 27, "672": 27, "785": 27, "32": [27, 67], "111": 27, "493": 27, "349": 27, "801": 27, "966": 27, "11": [27, 67, 80], "720": 27, "30": [27, 67, 80], "972": 27, "158": 27, "169": 27, "906": 27, "67": 27, "62": 27, "26": [27, 38, 80, 84], "174": 27, "tilde_o_estim": [27, 67], "107": [27, 49], "71": 27, "98": 27, "70": 27, "89": 27, "87": [27, 67], "167": 27, "164": 27, "99": 27, "72": 27, "95": [27, 67], "626": 27, "147": 27, "13": [27, 67, 75], "19677": 27, "las_vega": 27, "38": 27, "40": [27, 30], "28": [27, 31, 42, 45, 67, 80], "3057": 27, "18665241123894338": 27, "592592592592592": 27, "35": [27, 42, 45], "8765": 27, "ngate": [28, 83], "gate": 28, "multipl": [28, 29, 80, 84], "prime": 28, "power": [28, 30], "nmonomials_of_degre": [28, 31, 83], "monomi": [28, 31], "ring": [28, 30, 31, 83], "modulo": 28, "nmonomials_up_to_degre": [28, 31, 83], "up": [28, 31, 50], "56": [28, 31], "sum_of_binomial_coeffici": [28, 83], "l": [28, 48, 49, 52, 53, 54, 56, 67, 70, 72, 75, 80, 83, 84], "sum_": 28, "j": [28, 48, 80, 84], "binom": [28, 68, 76, 83], "neg": [28, 31], "maximum": [29, 80, 81], "allow": [29, 65, 73, 81], "get_problem_paramet": [29, 83], "is_defined_over_finite_field": [29, 83], "is_overdefined_system": [29, 83], "overdefin": [29, 84], "is_square_system": [29, 83], "is_underdefined_system": [29, 83], "underdefin": [29, 84], "npolynomi": [29, 30, 83], "order_of_the_field": [29, 83], "runtim": [29, 64], "seri": [30, 31], "hilbertseri": [30, 83], "f_2": [30, 84], "first_nonpositive_integ": [30, 83], "14": [30, 67], "ration": [30, 80], "125": 30, "140": [30, 67, 70, 75], "nmonomialseri": [31, 83], "max_prec": 31, "nm": 31, "f_5": 31, "126": 31, "210": 31, "series_monomials_of_degre": [31, 83], "21": [31, 67, 75, 80], "246": 31, "426": 31, "series_monomials_up_to_degre": [31, 83], "84": 31, "456": 31, "882": 31, "wit": 32, "split": [35, 84], "sen06": [35, 84], "rough": 35, "accord": 35, "pe": 36, "list_comput": [37, 83], "norm_form": 37, "sdestim": [38, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "workfactor_accuraci": [38, 67], "48": [38, 70, 72, 75], "156": 38, "603": 38, "839": 38, "ssa": [38, 83], "179": 38, "625": 38, "437": 38, "360": 38, "117": 38, "157": 38, "113": 38, "362": 38, "gv_distanc": [39, 83], "gilbert": 39, "varsharmov": 39, "hamming_bal": [39, 83], "median_size_of_random_orbit": [39, 83], "number_of_weight_d_codeword": [39, 83], "weight": [39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 69, 70, 71, 72, 75, 77], "random_sparse_vec_orbit": [39, 83], "hull": [40, 80], "assum": 40, "weakli": 40, "self": [40, 80, 84], "dual": [40, 80], "pkestim": [41, 42, 43, 44, 45, 46, 47], "pkalgorithm": [41, 42, 43, 45], "pkproblem": [41, 42, 43, 47, 83], "kmp19": [41, 84], "accompani": [41, 42], "sbc22": [41, 42, 84], "secomm": [41, 42], "pkpattack": [41, 42], "ell": [41, 42, 45, 47], "kernel": [41, 42, 43, 45, 47, 84], "cost_for_list_oper": [41, 42, 43, 45], "sbc": [41, 43, 45, 83], "memory_for_list_el": [41, 42, 43, 45], "u": [41, 42, 44, 83, 84], "kmp": [42, 43, 45, 83], "w1": [42, 45, 50, 52, 67, 83], "enumer": 44, "kmp_final_list": [44, 83], "kmp_l1": [44, 83], "l1": [44, 50, 51], "kmp_l2": [44, 83], "l2": [44, 50, 51], "sbc_isd": [44, 83], "sbc_u": [44, 83], "column": [45, 47, 82], "row": [45, 47], "whose": [45, 47, 80], "should": [45, 47, 67, 80], "lie": [45, 47, 80], "option": [45, 80], "argument": [45, 80], "use_parity_row": [45, 47], "enabl": [45, 47], "trick": [45, 47], "append": [45, 47], "extra": [45, 47], "243": 45, "194": 45, "187": 45, "266": 45, "945": 45, "beullens_lee_brickell_adapt": [46, 83], "cost_for_finding_subcod": [46, 83], "gauss_binomi": [46, 83], "r": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 83, 84], "lof": [46, 83], "x": [46, 64, 80, 82, 84], "sdalgorithm": [48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67], "ballcollis": [48, 67, 83], "sdproblem": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 69, 70, 71, 72, 83], "ball": [48, 57], "collis": [48, 57], "decod": [48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 77], "blp11": 48, "bernstein": 48, "lang": 48, "t": [48, 84], "peter": [48, 72], "c": [48, 64, 80, 84], "smaller": 48, "annual": [48, 49, 54], "cryptologi": [48, 49], "confer": [48, 49, 52, 54], "pp": [48, 49, 52, 53, 54], "743": 48, "760": 48, "springer": [48, 49, 52, 54, 84], "2011": [48, 49], "distribut": [48, 49, 50, 51, 52, 53, 54, 55, 56, 70, 71, 72, 80], "2p": [48, 49, 52, 53, 54, 56, 72], "2pl": 48, "pl": [48, 67, 83], "p": [48, 49, 50, 51, 52, 53, 54, 56, 67, 70, 72, 75, 80, 83, 84], "syndrom": [48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 67, 69, 70, 71, 72, 73, 77], "m4ri": [48, 49, 50, 51, 52, 53, 54, 55, 56, 65], "gaussian": [48, 49, 50, 51, 52, 53, 54, 55, 56, 65], "elimin": [48, 49, 50, 51, 52, 53, 54, 55, 56, 65], "depth": [49, 50, 51, 52, 54, 58, 59, 61, 67, 83], "mmt11": 49, "mai": [49, 52, 54, 59, 61, 64, 80], "meurer": 49, "random": [49, 80], "054n": 49, "theori": [49, 53, 54, 80], "applic": [49, 54, 80, 84], "inform": [49, 53, 80], "secur": [49, 52, 54], "124": 49, "bjmm12": 49, "becker": 49, "joux": [49, 84], "binari": [49, 54, 64, 80], "how": 49, "improv": [49, 84], "cryptograph": [49, 54], "techniqu": [49, 54], "520": 49, "536": 49, "2012": 49, "initialize_parameter_rang": [49, 50, 51, 52, 53, 54, 56, 70, 72, 83], "p1": [49, 50, 51, 52, 54, 67, 83], "p2": [49, 52, 54, 67, 83], "restart": [49, 54], "process": [49, 50, 51, 52, 53, 54, 56, 70, 72], "bjmmd2": [49, 67, 83], "bjmm_depth_2": 49, "start": [49, 50, 51, 52, 53, 54, 56, 70, 72, 80], "optimis": [49, 50, 51, 52, 53, 54, 56, 70, 72, 82], "bjmmd3": [49, 67, 83], "bjmm_depth_3": 49, "bjmmdw": [50, 51, 67, 83], "bjmm": [50, 51, 54, 67, 83], "isjoint": 50, "eight": 50, "combin": 50, "mitm": [50, 51, 52], "nearest": [50, 54, 59, 61, 64], "neighbor": [50, 54, 59, 61], "eb2022": [50, 51], "mmt2011": [50, 51], "bjmm2012": [50, 51], "w2": [50, 51, 52, 67, 83], "ham": [50, 80], "error": [50, 52, 67, 69, 75, 77, 80, 84], "vector": 50, "avail": [50, 80], "log2": 50, "unlimit": 50, "hmap": [50, 65], "indic": [50, 65, 78, 80], "hashmap": [50, 65], "being": [50, 65], "p_rang": 50, "interv": [50, 80], "help": [50, 80], "speed": 50, "disjoint": [50, 51], "w11": [50, 83], "bjmmpdw": [51, 67, 83], "partial": 51, "explicit": 51, "nn": [51, 52], "level": 51, "bothmai": [52, 67, 83], "both": [52, 59, 80], "indyk": 52, "motwani": 52, "botmay18": 52, "high": 52, "rate": 52, "impact": 52, "lpn": 52, "post": 52, "cryptographi": 52, "46": 52, "2018": [52, 80], "dum91": 53, "On": [53, 54, 84], "minimum": 53, "distanc": 53, "proc": 53, "5th": 53, "joint": 53, "soviet": 53, "swedish": 53, "workshop": 53, "52": 53, "1991": 53, "mayozerov": [54, 67, 83], "ozerov": [54, 59, 61, 64], "mo15": [54, 64], "203": 54, "228": 54, "2015": 54, "asymptot": [54, 64], "mayozerovd2": [54, 67, 83], "mayozerov_depth_2": 54, "mayozerovd3": [54, 67, 83], "mayozerov_depth_3": 54, "pra1962": [55, 71], "ste1988": [56, 72], "blp2008": [56, 72], "sdworkfactormodel": [57, 58, 59, 60, 61, 62, 63, 64], "ballcollisionscipymodel": [57, 83], "par_nam": [57, 58, 59, 60, 61, 62, 63], "iter": [57, 58, 59, 60, 61, 62, 63], "accuraci": [57, 58, 59, 60, 61, 62, 63], "scipymodel": [57, 58, 59, 60, 61, 62, 63], "workfactor": [57, 58, 59, 60, 61, 62, 63], "get_time_memory_and_paramet": [57, 58, 59, 60, 61, 62, 63, 83], "bjmmscipymodel": [58, 83], "bothmayscipymodel": [59, 83], "dumerscipymodel": [60, 83], "mayozerovscipymodel": [61, 83], "prangescipymodel": [62, 83], "sternscipymodel": [63, 83], "binary_entropi": [64, 83], "entropi": 64, "binomial_approxim": [64, 83], "binomi": [64, 68, 76], "coefficietn": 64, "via": [64, 80], "sterl": 64, "approxim": 64, "inverse_binary_entropi": [64, 83], "v": [64, 84], "invers": 64, "eg": 64, "uniqu": 64, "list_of_random_tupl": [64, 83], "y": [64, 80, 84], "may_ozerov_near_neighbor_tim": [64, 83], "vector_length": 64, "target_weight": 64, "neighbour": 64, "representations_asymptot": [64, 83], "weight_to_cancel": 64, "represent": [64, 66, 74, 83], "wrap": [64, 83], "f": [64, 84], "g": [64, 80, 84], "helper": [64, 80, 83], "scipi": 64, "framework": 64, "var_rang": [65, 73], "sort": 65, "constraint": [66, 74, 83], "gauss": [66, 74, 83], "tree": [66, 74, 83], "todo": [67, 70, 72], "mayb": 67, "optional_paramet": 67, "may_ozerov": [67, 83], "22": 67, "dumer": [67, 83], "prang": [67, 75, 83], "stern": [67, 75, 83], "29": [67, 75], "3488": 67, "2720": 67, "64": 67, "151": [67, 75], "460": 67, "49": 67, "814": 67, "143": 67, "448": 67, "86": 67, "221": 67, "141": 67, "886": 67, "104": 67, "057": 67, "197": 67, "711": 67, "995": 67, "380": 67, "58": 67, "019": 67, "47": 67, "795": 67, "592": 67, "173": 67, "388": 67, "576": 67, "409": 67, "163": 67, "650": 67, "587": 67, "162": 67, "998": 67, "600": 67, "976": 67, "619": 67, "160": 67, "317": 67, "172": 67, "635": 67, "608": 67, "346": 67, "092": 67, "180": 67, "580": 67, "260": 67, "min_max": [68, 76, 83], "b": [68, 76, 80, 84], "bool": [68, 76, 82], "max": [68, 76], "depend": [68, 76], "switch": [68, 76, 80], "paramt": [69, 77], "sdfqalgorithm": [70, 71, 72, 73], "sdfqproblem": [70, 71, 72, 73, 77, 83], "lee": 70, "brickel": 70, "961": [70, 72, 75], "771": [70, 72, 75], "31928490910389": 70, "129": [72, 75], "05902980703917": 72, "deterimin": [73, 78], "leebrickel": [75, 83], "310": 75, "794": 75, "059": 75, "016": 75, "319": [75, 84], "808": 75, "basefield": 77, "is_syndrome_zero": 77, "can": [77, 80], "func": 78, "decor": 78, "method": [78, 84], "basealgoritm": 78, "subclass": [78, 80], "alg": 80, "prob": 80, "include_tildeo": 80, "tildeo": [80, 82, 83], "esim": 80, "include_quantum": 80, "quyantum": 80, "channel": [80, 83], "implement": 80, "theoret": 80, "notion": 80, "transmiss": 80, "messag": 80, "build": 80, "errorerasurechannel": 80, "qarysymmetricchannel": 80, "staticerrorratechannel": 80, "To": [80, 83], "global": 80, "namespac": 80, "channels_catalog": 80, "paritycheckcod": 80, "check": 80, "cycliccod": 80, "cyclic": 80, "bchcode": 80, "bch": 80, "generalizedreedsolomoncod": 80, "reed": 80, "solomon": 80, "reedsolomoncod": 80, "binaryreedmullercod": 80, "muller": 80, "reedmullercod": 80, "ari": 80, "hammingcod": 80, "golaycod": 80, "golai": 80, "goppacod": 80, "goppa": 80, "kasamicod": 80, "kasami": 80, "duadiccodeevenpair": 80, "duadic": 80, "pair": 80, "duadiccodeoddpair": 80, "odd": 80, "quadraticresiduecod": 80, "residu": 80, "extendedquadraticresiduecod": 80, "extend": [80, 84], "quadraticresiduecodeevenpair": 80, "like": 80, "quadraticresiduecodeoddpair": 80, "quasiquadraticresiduecod": 80, "quasi": 80, "requir": 80, "gap": 80, "guava": 80, "toriccod": 80, "toric": 80, "walshcod": 80, "walsh": 80, "from_parity_check_matrix": 80, "random_linear_cod": 80, "randomlinearcodeguava": 80, "through": 80, "subfieldsubcod": 80, "subfield": 80, "extendedcod": 80, "puncturedcod": 80, "codes_catalog": 80, "cone": [80, 83], "common": 80, "polyhedr": 80, "convex": 80, "shortcut": 80, "group": [80, 83, 84], "under": 80, "prefix": 80, "creat": 80, "nonneg": 80, "orthant": 80, "rearrang": 80, "schur": 80, "trivial": 80, "At": 80, "moment": 80, "built": 80, "constructor": 80, "As": 80, "pass": 80, "ambient": 80, "ambient_dim": 80, "lattic": 80, "infer": 80, "space": 80, "typic": 80, "nonnegative_orth": 80, "rai": 80, "empti": 80, "collect": 80, "other": 80, "For": 80, "more": 80, "about": 80, "see": 80, "document": [80, 83, 84], "individu": 80, "therein": 80, "crystal": [80, 83], "Of": 80, "let": 80, "pi": 80, "vee": 80, "cartan": 80, "datum": 80, "a_": 80, "ij": 80, "_": 80, "jin": 80, "abstract": 80, "togeth": 80, "map": 80, "e_i": 80, "f_i": 80, "colon": 80, "cup": 80, "qquad": 80, "varepsilon_i": 80, "varphi_i": 80, "zz": 80, "infti": 80, "mathrm": 80, "wt": 80, "subject": 80, "condit": 80, "langl": 80, "h_i": 80, "rangl": 80, "e_ib": 80, "alpha_i": 80, "f_ib": 80, "iin": 80, "bin": 80, "categori": 80, "combinat": 80, "current": 80, "affinecrystalfromclass": 80, "affinecrystalfromclassicalandpromot": 80, "affinefactor": 80, "affinizationof": 80, "alcovepath": 80, "fastranktwo": 80, "fullycommutativestablegrothendieck": 80, "generalizedyoungwal": 80, "highestweight": 80, "induc": 80, "kacmodul": 80, "kirillovreshetikhin": 80, "kleshchevpartit": 80, "kyotopathmodel": 80, "letter": 80, "lspath": 80, "minimaj": 80, "nakajimamonomi": 80, "oddnegativeroot": 80, "projectedlevelzerolspath": 80, "riggedconfigur": 80, "shiftedprimedtableaux": 80, "spin": 80, "spinsplu": 80, "spinsminu": 80, "tableaux": 80, "subcatalog": 80, "catalog_infinity_cryst": 80, "catalog_elementary_cryst": 80, "catalog_kirillov_reshetikhin": 80, "functori": 80, "directsum": 80, "tensorproduct": 80, "financ": [80, 83], "accur": 80, "signatur": [80, 84], "finite_dynamical_system": [80, 83], "discret": 80, "dynam": 80, "sever": 80, "finite_dynamical_system_catalog": 80, "just": 80, "hit": 80, "tab": 80, "author": 80, "darij": 80, "grinberg": 80, "tom": 80, "robi": 80, "game_theori": [80, 83], "game": 80, "graph_color": [80, 83], "file": 80, "graph": 80, "pyx": 80, "line": 80, "color": 80, "gather": 80, "relat": 80, "what": 80, "do": 80, "proper": 80, "vertex": 80, "all_graph_color": 80, "first_color": 80, "number_of_n_color": 80, "numbers_of_color": 80, "chromatic_numb": 80, "chromat": 80, "vertex_color": 80, "fraction": 80, "relax": 80, "fractional_chromatic_numb": 80, "fractional_chromatic_index": 80, "grundy_color": 80, "grundi": 80, "b_color": 80, "edge_color": 80, "edg": 80, "round_robin": 80, "robin": 80, "complet": 80, "vertic": 80, "linear_arbor": 80, "arbor": 80, "acyclic_edge_color": 80, "acycl": 80, "boothbi": 80, "2008": 80, "02": 80, "carlo": 80, "hamalainen": 80, "2009": [80, 84], "03": 80, "minor": 80, "chang": 80, "dlx": 80, "solver": 80, "nathann": 80, "cohen": 80, "program": 80, "variou": 80, "easi": 80, "wai": 80, "discov": 80, "quickli": 80, "press": 80, "kei": 80, "so": 80, "begin": 80, "primari": 80, "divis": 80, "matric": 80, "symmetr": 80, "altern": 80, "kleinfour": 80, "quaternion": 80, "complexreflect": 80, "dihedr": 80, "dicycl": 80, "mathieu": 80, "suzuki": 80, "pgl": 80, "psl": 80, "psp": 80, "psu": 80, "pgu": 80, "transit": 80, "rubikscub": 80, "quaterniongf3": 80, "gl": 80, "sl": 80, "sp": 80, "gu": 80, "su": 80, "go": 80, "present": 80, "fgabelian": 80, "affin": 80, "euclidean": 80, "nilpot": 80, "miscellan": 80, "misc": 80, "coxet": 80, "reflect": 80, "braid": 80, "coxetergroup": 80, "reflectiongroup": 80, "rightangledartin": 80, "weylgroup": 80, "additiveabelian": 80, "additivecycl": 80, "free": 80, "semimonomialtransform": 80, "lattice_polytop": [80, 83], "reflex": 80, "polytop": 80, "tool": 80, "point": 80, "rr": 80, "embed": 80, "have": 80, "coordin": 80, "geq": 80, "text": 80, "polar": 80, "also": 80, "packag": 80, "analyz": 80, "palp": 80, "written": 80, "maximilian": 80, "kreuzer": 80, "harald": 80, "skark": 80, "freeli": 80, "gnu": 80, "licens": 80, "term": 80, "hep": 80, "itp": 80, "tuwien": 80, "ac": 80, "cy": 80, "moreov": 80, "standard": 80, "arxiv": [80, 84], "math": 80, "sc": 80, "0204356": 80, "Its": 80, "nef": 80, "wa": 80, "erwin": 80, "riegler": 80, "partit": 80, "hodg": 80, "data": 80, "intersect": 80, "acknowledg": 80, "py": 80, "william": [80, 84], "stein": 80, "organ": 80, "interfac": 80, "andrei": 80, "novoseltsev": 80, "debug": 80, "tune": [80, 84], "robert": 80, "bradshaw": 80, "realiz": 80, "plot3d": 80, "dure": 80, "compil": 80, "etc": 80, "limit": 80, "lead": 80, "differ": 80, "except": 80, "rais": 80, "poli": 80, "exclam": 80, "mark": 80, "exact": 80, "command": 80, "caus": 80, "descript": 80, "obtain": 80, "cach": 80, "immut": 80, "particular": 80, "you": [80, 83], "cannot": 80, "creation": 80, "larg": 80, "look": 80, "all_": 80, "precomput": 80, "few": 80, "run": 80, "significantli": 80, "affect": 80, "futur": 80, "dump": 80, "load": 80, "face": 80, "boundari": 80, "2007": 80, "01": 80, "04": 80, "convex_hul": 80, "minkowski_sum": 80, "skeleton_show": 80, "08": 80, "drop": [80, 84], "maxim": 80, "2010": 80, "new": [80, 84], "2013": 80, "09": 80, "pointcollect": 80, "lie_algebra": [80, 83], "There": 80, "comprehens": 80, "transform": 80, "abelian": 80, "triangular": 80, "strictli": 80, "symplect": 80, "rank": 80, "heisenberg": 80, "virasoro": 80, "liealgebraregularvectorfield": 80, "virasoroalgebra": 80, "travi": 80, "scrimshaw": 80, "07": 80, "lie_conformal_algebra": [80, 83], "conform": 80, "boson": 80, "ghost": 80, "fermion": 80, "super": 80, "neveu": 80, "schwarz": 80, "weyl": 80, "reimundo": 80, "heluani": 80, "2020": 80, "06": 80, "manifold": [80, 83], "rapidli": 80, "simpl": 80, "entri": 80, "euclideanspac": 80, "reallin": 80, "real": 80, "openinterv": 80, "open": 80, "sphere": 80, "toru": 80, "minkowski": 80, "kerr": 80, "spacetim": 80, "florentin": 80, "jaffredo": 80, "matroid": [80, 83], "submenu": 80, "named_matroid": 80, "varieti": 80, "parametr": 80, "ag": 80, "completegraph": 80, "pg": 80, "uniform": 80, "wheel": 80, "whirl": 80, "ag23minu": 80, "ag32prim": 80, "betsyross": 80, "block_9_4": 80, "block_10_5": 80, "d16": 80, "extendedbinarygolaycod": 80, "extendedternarygolaycod": 80, "f8": 80, "fano": 80, "k33dual": 80, "l8": 80, "n2": 80, "nonfano": 80, "nonpappu": 80, "nonvamo": 80, "notp8": 80, "o7": 80, "p6": 80, "p7": 80, "p8": 80, "p8pp": 80, "p9": 80, "pappu": 80, "q6": 80, "q8": 80, "q10": 80, "r6": 80, "r8": 80, "r9a": 80, "r9b": 80, "r10": 80, "r12": 80, "s8": 80, "t8": 80, "t12": 80, "ternarydowling3": 80, "terrahawk": 80, "tictacto": 80, "vamo": 80, "path_tableaux": [80, 83], "path": 80, "tableau": 80, "cylindricaldiagram": 80, "dyckpath": 80, "friezepattern": 80, "semistandardpathtableau": 80, "semistandardpathtableaux": 80, "simplicial_complex": [80, 83], "simplici": 80, "main": 80, "project": 80, "plane": 80, "surfac": 80, "arbitrari": 80, "genu": 80, "asid": 80, "connect": 80, "match": 80, "chessboard": 80, "noticonnectedgraph": 80, "million": 80, "simplic": 80, "barnettespher": 80, "brucknergrunbaumspher": 80, "chessboardcomplex": 80, "complexprojectiveplan": 80, "duncehat": 80, "fareymap": 80, "k3surfac": 80, "kleinbottl": 80, "matchingcomplex": 80, "moorespac": 80, "poincarehomologythreespher": 80, "pseudoquaternionicprojectiveplan": 80, "randomcomplex": 80, "randomtwospher": 80, "realprojectiveplan": 80, "realprojectivespac": 80, "rudinbal": 80, "shiftedcomplex": 80, "simplex": 80, "sumcomplex": 80, "surfaceofgenu": 80, "zieglerbal": 80, "get": 80, "homologi": 80, "triangul": 80, "orient": 80, "m4": 80, "c4": 80, "simplicial_set": [80, 83], "pre": 80, "practic": 80, "increas": 80, "longer": 80, "horn": 80, "much": 80, "becaus": 80, "nondegener": 80, "exponenti": 80, "feasibl": 80, "sinc": 80, "101": 80, "probabl": 80, "bad": 80, "classifi": 80, "monoid": 80, "klein": 80, "bottl": 80, "hopf": 80, "morphism": 80, "extract": 80, "domain": 80, "codomain": 80, "rp10": 80, "c2": 80, "eta": 80, "hopfmap": 80, "s3": 80, "s2": 80, "wedg": 80, "deprec": 80, "warn": 80, "completematch": 80, "doctest": 80, "deprecationwarn": 80, "pleas": 80, "directli": 80, "arxiv_0812_2725": 80, "trac": 80, "sagemath": [80, 83], "org": [80, 84], "27337": 80, "detail": 80, "modsym": 80, "modular": 80, "toric_plott": [80, 83], "plotter": 80, "toricplott": 80, "produc": 80, "plot": 80, "geometri": 80, "adjust": 80, "reset_opt": 80, "volker": 80, "braun": 80, "case": 80, "indirectli": 80, "fan": 80, "toric_varieti": 80, "dp6": 80, "graphic": 80, "primit": 80, "show_rai": 80, "valuat": [80, 83], "complexitytyp": [82, 83], "distinguish": 82, "normal": 82, "concat_all_t": [82, 83], "prettyt": 82, "concat_pretty_t": [82, 83], "t1": 82, "t2": 82, "merg": 82, "round_or_trunc": [82, 83], "eiter": 82, "els": 82, "decimi": 82, "sampl": 83, "manual": 83, "minim": 83, "guidelin": 83, "base_const": 83, "base_algorithm": 83, "base_problem": 83, "base_estim": 83, "dummy_estim": 83, "dummy_algorithm": 83, "dummy_algorithm1": 83, "sdfq_algorithm": 83, "sdfq_helper": 83, "sdfq_estim": 83, "sdfq_problem": 83, "sdfq_constant": 83, "le_estim": 83, "le_problem": 83, "le_const": 83, "le_algorithm": 83, "le_help": 83, "pe_const": 83, "pe_algorithm": 83, "pe_estim": 83, "pe_problem": 83, "pe_help": 83, "degree_of_regular": 83, "mq_helper": 83, "mq_estim": 83, "witness_degre": 83, "mq_constant": 83, "dinur1": 83, "cgmta": 83, "kpg": 83, "mht": 83, "boolean_solve_fxl": 83, "exhaustive_search": 83, "dinur2": 83, "hybrid_f5": 83, "nmonomi": 83, "hilbert": 83, "pk_problem": 83, "pk_constant": 83, "pk_helper": 83, "pk_algorithm": 83, "pk_estim": 83, "sd_algorithm": 83, "sd_constant": 83, "sd_helper": 83, "sd_estim": 83, "sd_problem": 83, "both_mai": 83, "workfactor_help": 83, "ball_collis": 83, "bjmm_dw": 83, "bjmm_pdw": 83, "bibliograph": 83, "page": 83, "andrea": 84, "petteri": 84, "kaski": 84, "ryan": 84, "count": 84, "reduct": 84, "dagstuhl": 84, "de": 84, "opu": 84, "volltext": 84, "2019": 84, "10602": 84, "pdf": 84, "lipic": 84, "icalp": 84, "antoin": 84, "vanessa": 84, "vits": 84, "boolean": 84, "link": 84, "chapter": 84, "1007": 84, "978": 84, "76620": 84, "1_1": 84, "aviad": 84, "kipni": 84, "jacqu": 84, "patarin": 84, "loui": 84, "goubin": 84, "unbalanc": 84, "oil": 84, "vinegar": 84, "scheme": 84, "540": 84, "48910": 84, "x_15": 84, "alessandro": 84, "barenghi": 84, "jean": 84, "francoi": 84, "biass": 84, "edoardo": 84, "persichetti": 84, "less": 84, "fm": 84, "fine": 84, "doi": 84, "030": 84, "81293": 84, "5_2": 84, "charl": 84, "bouillaguet": 84, "hsieh": 84, "chung": 84, "chen": 84, "mou": 84, "cheng": 84, "tung": 84, "chou": 84, "ruben": 84, "niederhagen": 84, "adi": 84, "shamir": 84, "bo": 84, "yin": 84, "yang": 84, "fast": 84, "www": 84, "iacr": 84, "archiv": 84, "ches2010": 84, "62250195": 84, "daniel": 84, "ramamohan": 84, "paturi": 84, "suguru": 84, "tamaki": 84, "huacheng": 84, "yu": 84, "beat": 84, "brute": 84, "forc": 84, "peopl": 84, "csail": 84, "mit": 84, "edu": 84, "rrw": 84, "polyeqsoda2017submit": 84, "elian": 84, "koussa": 84, "gill": 84, "macario": 84, "rat": 84, "eprint": 84, "412": 84, "hiroyuki": 84, "miura": 84, "yasufumi": 84, "hashimoto": 84, "tsuyoshi": 84, "takagi": 84, "multivari": 84, "642": 84, "38616": 84, "9_8": 84, "itai": 84, "2005": 84, "04800": 84, "cryptanalyt": 84, "2021": 84, "578": 84, "jo\u00e3o": 84, "diogo": 84, "duart": 84, "jjeffrei": 84, "automorph": 84, "correct": 84, "1109": 84, "tit": 84, "1982": 84, "1056498": 84, "luk": 84, "bettal": 84, "faug\u00e8r": 84, "ludov": 84, "perret": 84, "approach": 84, "1515": 84, "jmc": 84, "009": 84, "analysi": 84, "1145": 84, "2442829": 84, "2442843": 84, "magali": 84, "bardet": 84, "bruno": 84, "salvi": 84, "pierr": 84, "spaenlehau": 84, "sciencedirect": 84, "scienc": 84, "articl": 84, "pii": 84, "s0885064x12000611": 84, "nicola": 84, "courtoi": 84, "alexand": 84, "klimov": 84, "effici": 84, "eurocrypt2000": 84, "1807": 84, "18070398": 84, "willi": 84, "meier": 84, "tacier": 84, "45664": 84, "3_15": 84, "sendrier": 84, "hal": 84, "inria": 84, "fr": 84, "00073037": 84, "marco": 84, "baldi": 84, "franco": 84, "chiaraluc": 84, "hard": 84, "2022": 84, "1749": 84, "ward": 84, "Not": 84, "enough": 84, "81652": 84, "0_15": 84}, "objects": {"cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[0, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[0, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_access_cost"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "optimization_parameter_1"], [0, 3, 1, "", "optimization_parameter_2"], [0, 3, 1, "", "optimization_parameter_3"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator": [[1, 0, 0, "-", "dummy_algorithm"], [2, 0, 0, "-", "dummy_estimator"], [3, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[1, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_access_cost"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[2, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[2, 3, 1, "", "algorithm_names"], [2, 3, 1, "", "algorithms"], [2, 2, 1, "", "bit_complexities"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "estimate"], [2, 4, 1, "", "excluded_algorithms_by_default"], [2, 3, 1, "", "fastest_algorithm"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "nalgorithms"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[3, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[3, 3, 1, "", "expected_number_solutions"], [3, 3, 1, "", "get_parameters"], [3, 3, 1, "", "to_bitcomplexity_memory"], [3, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.LEEstimator.LEAlgorithms": [[4, 0, 0, "-", "bbps"], [5, 0, 0, "-", "beullens"], [6, 0, 0, "-", "leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps": [[4, 1, 1, "", "BBPS"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS": [[4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "get_optimal_parameters_dict"], [4, 3, 1, "", "has_optimal_parameter"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "memory_access_cost"], [4, 3, 1, "", "memory_complexity"], [4, 3, 1, "", "optimal_parameters"], [4, 3, 1, "", "parameter_names"], [4, 2, 1, "", "parameter_ranges"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "set_parameter_ranges"], [4, 3, 1, "", "set_parameters"], [4, 3, 1, "", "time_complexity"], [4, 3, 1, "", "w"], [4, 3, 1, "", "w_prime"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens": [[5, 1, 1, "", "Beullens"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens": [[5, 2, 1, "", "complexity_type"], [5, 3, 1, "", "get_optimal_parameters_dict"], [5, 3, 1, "", "has_optimal_parameter"], [5, 2, 1, "", "memory_access"], [5, 3, 1, "", "memory_access_cost"], [5, 3, 1, "", "memory_complexity"], [5, 3, 1, "", "optimal_parameters"], [5, 3, 1, "", "parameter_names"], [5, 2, 1, "", "parameter_ranges"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "set_parameter_ranges"], [5, 3, 1, "", "set_parameters"], [5, 3, 1, "", "time_complexity"], [5, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon": [[6, 1, 1, "", "Leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon": [[6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "get_optimal_parameters_dict"], [6, 3, 1, "", "has_optimal_parameter"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "memory_access_cost"], [6, 3, 1, "", "memory_complexity"], [6, 3, 1, "", "optimal_parameters"], [6, 3, 1, "", "parameter_names"], [6, 2, 1, "", "parameter_ranges"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "set_parameter_ranges"], [6, 3, 1, "", "set_parameters"], [6, 3, 1, "", "time_complexity"], [6, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator": [[7, 0, 0, "-", "le_algorithm"], [8, 0, 0, "-", "le_constants"], [9, 0, 0, "-", "le_estimator"], [10, 0, 0, "-", "le_helper"], [11, 0, 0, "-", "le_problem"]], "cryptographic_estimators.LEEstimator.le_algorithm": [[7, 1, 1, "", "LEAlgorithm"]], "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm": [[7, 2, 1, "", "complexity_type"], [7, 3, 1, "", "get_optimal_parameters_dict"], [7, 3, 1, "", "has_optimal_parameter"], [7, 2, 1, "", "memory_access"], [7, 3, 1, "", "memory_access_cost"], [7, 3, 1, "", "memory_complexity"], [7, 3, 1, "", "optimal_parameters"], [7, 3, 1, "", "parameter_names"], [7, 2, 1, "", "parameter_ranges"], [7, 3, 1, "", "reset"], [7, 3, 1, "", "set_parameter_ranges"], [7, 3, 1, "", "set_parameters"], [7, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator.le_constants": [[8, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation": [[8, 4, 1, "", "ISD"], [8, 4, 1, "", "LISTS"], [8, 4, 1, "", "LISTS_SIZE"], [8, 4, 1, "", "NORMAL_FORM"], [8, 4, 1, "", "NW"]], "cryptographic_estimators.LEEstimator.le_estimator": [[9, 1, 1, "", "LEEstimator"]], "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator": [[9, 3, 1, "", "algorithm_names"], [9, 3, 1, "", "algorithms"], [9, 2, 1, "", "bit_complexities"], [9, 2, 1, "", "complexity_type"], [9, 3, 1, "", "estimate"], [9, 4, 1, "", "excluded_algorithms_by_default"], [9, 3, 1, "", "fastest_algorithm"], [9, 2, 1, "", "memory_access"], [9, 3, 1, "", "nalgorithms"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "table"]], "cryptographic_estimators.LEEstimator.le_helper": [[10, 5, 1, "", "cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.LEEstimator.le_problem": [[11, 1, 1, "", "LEProblem"]], "cryptographic_estimators.LEEstimator.le_problem.LEProblem": [[11, 3, 1, "", "expected_number_solutions"], [11, 3, 1, "", "get_parameters"], [11, 3, 1, "", "to_bitcomplexity_memory"], [11, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[12, 0, 0, "-", "bjorklund"], [13, 0, 0, "-", "boolean_solve_fxl"], [14, 0, 0, "-", "cgmta"], [15, 0, 0, "-", "crossbred"], [16, 0, 0, "-", "dinur1"], [17, 0, 0, "-", "dinur2"], [18, 0, 0, "-", "exhaustive_search"], [19, 0, 0, "-", "f5"], [20, 0, 0, "-", "hybrid_f5"], [21, 0, 0, "-", "kpg"], [22, 0, 0, "-", "lokshtanov"], [23, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[12, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "get_reduced_parameters"], [12, 3, 1, "", "has_optimal_parameter"], [12, 3, 1, "", "lambda_"], [12, 3, 1, "", "linear_algebra_constant"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_access_cost"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "npolynomials_reduced"], [12, 3, 1, "", "nvariables_reduced"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl": [[13, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL": [[13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "get_reduced_parameters"], [13, 3, 1, "", "has_optimal_parameter"], [13, 3, 1, "", "k"], [13, 3, 1, "", "linear_algebra_constant"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_access_cost"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "npolynomials_reduced"], [13, 3, 1, "", "nvariables_reduced"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"], [13, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[14, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[14, 2, 1, "", "complexity_type"], [14, 3, 1, "", "get_optimal_parameters_dict"], [14, 3, 1, "", "get_reduced_parameters"], [14, 3, 1, "", "has_optimal_parameter"], [14, 3, 1, "", "linear_algebra_constant"], [14, 2, 1, "", "memory_access"], [14, 3, 1, "", "memory_access_cost"], [14, 3, 1, "", "memory_complexity"], [14, 3, 1, "", "npolynomials_reduced"], [14, 3, 1, "", "nvariables_reduced"], [14, 3, 1, "", "optimal_parameters"], [14, 3, 1, "", "parameter_names"], [14, 2, 1, "", "parameter_ranges"], [14, 3, 1, "", "reset"], [14, 3, 1, "", "set_parameter_ranges"], [14, 3, 1, "", "set_parameters"], [14, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[15, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[15, 3, 1, "", "D"], [15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "d"], [15, 3, 1, "", "get_optimal_parameters_dict"], [15, 3, 1, "", "get_reduced_parameters"], [15, 3, 1, "", "has_optimal_parameter"], [15, 3, 1, "", "k"], [15, 3, 1, "", "linear_algebra_constant"], [15, 2, 1, "", "max_D"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "memory_access_cost"], [15, 3, 1, "", "memory_complexity"], [15, 3, 1, "", "npolynomials_reduced"], [15, 3, 1, "", "nvariables_reduced"], [15, 3, 1, "", "optimal_parameters"], [15, 3, 1, "", "parameter_names"], [15, 2, 1, "", "parameter_ranges"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "set_parameter_ranges"], [15, 3, 1, "", "set_parameters"], [15, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[16, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[16, 2, 1, "", "complexity_type"], [16, 3, 1, "", "get_optimal_parameters_dict"], [16, 3, 1, "", "get_reduced_parameters"], [16, 3, 1, "", "has_optimal_parameter"], [16, 3, 1, "", "kappa"], [16, 3, 1, "", "lambda_"], [16, 3, 1, "", "linear_algebra_constant"], [16, 2, 1, "", "memory_access"], [16, 3, 1, "", "memory_access_cost"], [16, 3, 1, "", "memory_complexity"], [16, 3, 1, "", "npolynomials_reduced"], [16, 3, 1, "", "nvariables_reduced"], [16, 3, 1, "", "optimal_parameters"], [16, 3, 1, "", "parameter_names"], [16, 2, 1, "", "parameter_ranges"], [16, 3, 1, "", "reset"], [16, 3, 1, "", "set_parameter_ranges"], [16, 3, 1, "", "set_parameters"], [16, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[17, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[17, 2, 1, "", "complexity_type"], [17, 3, 1, "", "get_optimal_parameters_dict"], [17, 3, 1, "", "get_reduced_parameters"], [17, 3, 1, "", "has_optimal_parameter"], [17, 3, 1, "", "linear_algebra_constant"], [17, 2, 1, "", "memory_access"], [17, 3, 1, "", "memory_access_cost"], [17, 3, 1, "", "memory_complexity"], [17, 3, 1, "", "n1"], [17, 3, 1, "", "npolynomials_reduced"], [17, 3, 1, "", "nvariables_reduced"], [17, 3, 1, "", "optimal_parameters"], [17, 3, 1, "", "parameter_names"], [17, 2, 1, "", "parameter_ranges"], [17, 3, 1, "", "reset"], [17, 3, 1, "", "set_parameter_ranges"], [17, 3, 1, "", "set_parameters"], [17, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[18, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[18, 2, 1, "", "complexity_type"], [18, 3, 1, "", "get_optimal_parameters_dict"], [18, 3, 1, "", "get_reduced_parameters"], [18, 3, 1, "", "has_optimal_parameter"], [18, 3, 1, "", "linear_algebra_constant"], [18, 2, 1, "", "memory_access"], [18, 3, 1, "", "memory_access_cost"], [18, 3, 1, "", "memory_complexity"], [18, 3, 1, "", "npolynomials_reduced"], [18, 3, 1, "", "nvariables_reduced"], [18, 3, 1, "", "optimal_parameters"], [18, 3, 1, "", "parameter_names"], [18, 2, 1, "", "parameter_ranges"], [18, 3, 1, "", "reset"], [18, 3, 1, "", "set_parameter_ranges"], [18, 3, 1, "", "set_parameters"], [18, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[19, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "degree_of_polynomials"], [19, 3, 1, "", "get_optimal_parameters_dict"], [19, 3, 1, "", "get_reduced_parameters"], [19, 3, 1, "", "has_optimal_parameter"], [19, 3, 1, "", "linear_algebra_constant"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "memory_access_cost"], [19, 3, 1, "", "memory_complexity"], [19, 3, 1, "", "npolynomials_reduced"], [19, 3, 1, "", "nvariables_reduced"], [19, 3, 1, "", "optimal_parameters"], [19, 3, 1, "", "parameter_names"], [19, 2, 1, "", "parameter_ranges"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "set_parameter_ranges"], [19, 3, 1, "", "set_parameters"], [19, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[20, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[20, 2, 1, "", "complexity_type"], [20, 3, 1, "", "degree_of_polynomials"], [20, 3, 1, "", "get_optimal_parameters_dict"], [20, 3, 1, "", "get_reduced_parameters"], [20, 3, 1, "", "has_optimal_parameter"], [20, 3, 1, "", "k"], [20, 3, 1, "", "linear_algebra_constant"], [20, 2, 1, "", "memory_access"], [20, 3, 1, "", "memory_access_cost"], [20, 3, 1, "", "memory_complexity"], [20, 3, 1, "", "npolynomials_reduced"], [20, 3, 1, "", "nvariables_reduced"], [20, 3, 1, "", "optimal_parameters"], [20, 3, 1, "", "parameter_names"], [20, 2, 1, "", "parameter_ranges"], [20, 3, 1, "", "reset"], [20, 3, 1, "", "set_parameter_ranges"], [20, 3, 1, "", "set_parameters"], [20, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[21, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[21, 2, 1, "", "complexity_type"], [21, 3, 1, "", "get_optimal_parameters_dict"], [21, 3, 1, "", "get_reduced_parameters"], [21, 3, 1, "", "has_optimal_parameter"], [21, 3, 1, "", "linear_algebra_constant"], [21, 2, 1, "", "memory_access"], [21, 3, 1, "", "memory_access_cost"], [21, 3, 1, "", "memory_complexity"], [21, 3, 1, "", "npolynomials_reduced"], [21, 3, 1, "", "nvariables_reduced"], [21, 3, 1, "", "optimal_parameters"], [21, 3, 1, "", "parameter_names"], [21, 2, 1, "", "parameter_ranges"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "set_parameter_ranges"], [21, 3, 1, "", "set_parameters"], [21, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[22, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[22, 2, 1, "", "complexity_type"], [22, 3, 1, "", "delta"], [22, 3, 1, "", "get_optimal_parameters_dict"], [22, 3, 1, "", "get_reduced_parameters"], [22, 3, 1, "", "has_optimal_parameter"], [22, 3, 1, "", "linear_algebra_constant"], [22, 2, 1, "", "memory_access"], [22, 3, 1, "", "memory_access_cost"], [22, 3, 1, "", "memory_complexity"], [22, 3, 1, "", "npolynomials_reduced"], [22, 3, 1, "", "nvariables_reduced"], [22, 3, 1, "", "optimal_parameters"], [22, 3, 1, "", "parameter_names"], [22, 2, 1, "", "parameter_ranges"], [22, 3, 1, "", "reset"], [22, 3, 1, "", "set_parameter_ranges"], [22, 3, 1, "", "set_parameters"], [22, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[23, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[23, 2, 1, "", "complexity_type"], [23, 3, 1, "", "get_optimal_parameters_dict"], [23, 3, 1, "", "get_reduced_parameters"], [23, 3, 1, "", "has_optimal_parameter"], [23, 3, 1, "", "linear_algebra_constant"], [23, 2, 1, "", "memory_access"], [23, 3, 1, "", "memory_access_cost"], [23, 3, 1, "", "memory_complexity"], [23, 3, 1, "", "npolynomials_reduced"], [23, 3, 1, "", "nvariables_reduced"], [23, 3, 1, "", "optimal_parameters"], [23, 3, 1, "", "parameter_names"], [23, 2, 1, "", "parameter_ranges"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "set_parameter_ranges"], [23, 3, 1, "", "set_parameters"], [23, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator": [[24, 0, 0, "-", "degree_of_regularity"], [25, 0, 0, "-", "mq_algorithm"], [26, 0, 0, "-", "mq_constants"], [27, 0, 0, "-", "mq_estimator"], [28, 0, 0, "-", "mq_helper"], [29, 0, 0, "-", "mq_problem"], [32, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[24, 5, 1, "", "generic_system"], [24, 5, 1, "", "quadratic_system"], [24, 5, 1, "", "regular_system"], [24, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[25, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[25, 2, 1, "", "complexity_type"], [25, 3, 1, "", "get_optimal_parameters_dict"], [25, 3, 1, "", "get_reduced_parameters"], [25, 3, 1, "", "has_optimal_parameter"], [25, 3, 1, "", "linear_algebra_constant"], [25, 2, 1, "", "memory_access"], [25, 3, 1, "", "memory_access_cost"], [25, 3, 1, "", "memory_complexity"], [25, 3, 1, "", "npolynomials_reduced"], [25, 3, 1, "", "nvariables_reduced"], [25, 3, 1, "", "optimal_parameters"], [25, 3, 1, "", "parameter_names"], [25, 2, 1, "", "parameter_ranges"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "set_parameter_ranges"], [25, 3, 1, "", "set_parameters"], [25, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[27, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[27, 3, 1, "", "algorithm_names"], [27, 3, 1, "", "algorithms"], [27, 2, 1, "", "bit_complexities"], [27, 2, 1, "", "complexity_type"], [27, 3, 1, "", "estimate"], [27, 4, 1, "", "excluded_algorithms_by_default"], [27, 3, 1, "", "fastest_algorithm"], [27, 2, 1, "", "memory_access"], [27, 3, 1, "", "nalgorithms"], [27, 3, 1, "", "reset"], [27, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[28, 5, 1, "", "ngates"], [28, 5, 1, "", "nmonomials_of_degree"], [28, 5, 1, "", "nmonomials_up_to_degree"], [28, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[29, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[29, 3, 1, "", "expected_number_solutions"], [29, 3, 1, "", "get_problem_parameters"], [29, 3, 1, "", "is_defined_over_finite_field"], [29, 3, 1, "", "is_overdefined_system"], [29, 3, 1, "", "is_square_system"], [29, 3, 1, "", "is_underdefined_system"], [29, 3, 1, "", "npolynomials"], [29, 3, 1, "", "nvariables"], [29, 3, 1, "", "order_of_the_field"], [29, 2, 1, "", "theta"], [29, 3, 1, "", "to_bitcomplexity_memory"], [29, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[30, 0, 0, "-", "hilbert"], [31, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[30, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[30, 2, 1, "", "degrees"], [30, 3, 1, "", "first_nonpositive_integer"], [30, 2, 1, "", "npolynomials"], [30, 2, 1, "", "nvariables"], [30, 2, 1, "", "precision"], [30, 2, 1, "", "ring"], [30, 2, 1, "", "series"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[31, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[31, 3, 1, "", "nmonomials_of_degree"], [31, 3, 1, "", "nmonomials_up_to_degree"], [31, 3, 1, "", "series_monomials_of_degree"], [31, 3, 1, "", "series_monomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[32, 5, 1, "", "quadratic_system"], [32, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.PEEstimator.PEAlgorithms": [[33, 0, 0, "-", "beullens"], [34, 0, 0, "-", "leon"], [35, 0, 0, "-", "ssa"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens": [[33, 1, 1, "", "Beullens"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens": [[33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "get_optimal_parameters_dict"], [33, 3, 1, "", "has_optimal_parameter"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "memory_access_cost"], [33, 3, 1, "", "memory_complexity"], [33, 3, 1, "", "optimal_parameters"], [33, 3, 1, "", "parameter_names"], [33, 2, 1, "", "parameter_ranges"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_parameter_ranges"], [33, 3, 1, "", "set_parameters"], [33, 3, 1, "", "time_complexity"], [33, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon": [[34, 1, 1, "", "Leon"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon": [[34, 2, 1, "", "complexity_type"], [34, 3, 1, "", "get_optimal_parameters_dict"], [34, 3, 1, "", "has_optimal_parameter"], [34, 2, 1, "", "memory_access"], [34, 3, 1, "", "memory_access_cost"], [34, 3, 1, "", "memory_complexity"], [34, 3, 1, "", "optimal_parameters"], [34, 3, 1, "", "parameter_names"], [34, 2, 1, "", "parameter_ranges"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_parameter_ranges"], [34, 3, 1, "", "set_parameters"], [34, 3, 1, "", "time_complexity"], [34, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa": [[35, 1, 1, "", "SSA"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA": [[35, 2, 1, "", "complexity_type"], [35, 3, 1, "", "get_optimal_parameters_dict"], [35, 3, 1, "", "has_optimal_parameter"], [35, 2, 1, "", "memory_access"], [35, 3, 1, "", "memory_access_cost"], [35, 3, 1, "", "memory_complexity"], [35, 3, 1, "", "optimal_parameters"], [35, 3, 1, "", "parameter_names"], [35, 2, 1, "", "parameter_ranges"], [35, 3, 1, "", "reset"], [35, 3, 1, "", "set_parameter_ranges"], [35, 3, 1, "", "set_parameters"], [35, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator": [[36, 0, 0, "-", "pe_algorithm"], [37, 0, 0, "-", "pe_constants"], [38, 0, 0, "-", "pe_estimator"], [39, 0, 0, "-", "pe_helper"], [40, 0, 0, "-", "pe_problem"]], "cryptographic_estimators.PEEstimator.pe_algorithm": [[36, 1, 1, "", "PEAlgorithm"]], "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm": [[36, 2, 1, "", "complexity_type"], [36, 3, 1, "", "get_optimal_parameters_dict"], [36, 3, 1, "", "has_optimal_parameter"], [36, 2, 1, "", "memory_access"], [36, 3, 1, "", "memory_access_cost"], [36, 3, 1, "", "memory_complexity"], [36, 3, 1, "", "optimal_parameters"], [36, 3, 1, "", "parameter_names"], [36, 2, 1, "", "parameter_ranges"], [36, 3, 1, "", "reset"], [36, 3, 1, "", "set_parameter_ranges"], [36, 3, 1, "", "set_parameters"], [36, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_constants": [[37, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation": [[37, 4, 1, "", "LISTS_SIZE"], [37, 4, 1, "", "LIST_COMPUTATION"], [37, 4, 1, "", "NORMAL_FORM"]], "cryptographic_estimators.PEEstimator.pe_estimator": [[38, 1, 1, "", "PEEstimator"]], "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator": [[38, 3, 1, "", "algorithm_names"], [38, 3, 1, "", "algorithms"], [38, 2, 1, "", "bit_complexities"], [38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "estimate"], [38, 4, 1, "", "excluded_algorithms_by_default"], [38, 3, 1, "", "fastest_algorithm"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "nalgorithms"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "table"]], "cryptographic_estimators.PEEstimator.pe_helper": [[39, 5, 1, "", "gv_distance"], [39, 5, 1, "", "hamming_ball"], [39, 5, 1, "", "median_size_of_random_orbit"], [39, 5, 1, "", "number_of_weight_d_codewords"], [39, 5, 1, "", "random_sparse_vec_orbit"]], "cryptographic_estimators.PEEstimator.pe_problem": [[40, 1, 1, "", "PEProblem"]], "cryptographic_estimators.PEEstimator.pe_problem.PEProblem": [[40, 3, 1, "", "expected_number_solutions"], [40, 3, 1, "", "get_parameters"], [40, 3, 1, "", "to_bitcomplexity_memory"], [40, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PKEstimator.PKAlgorithms": [[41, 0, 0, "-", "kmp"], [42, 0, 0, "-", "sbc"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp": [[41, 1, 1, "", "KMP"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP": [[41, 2, 1, "", "complexity_type"], [41, 3, 1, "", "get_optimal_parameters_dict"], [41, 3, 1, "", "has_optimal_parameter"], [41, 2, 1, "", "memory_access"], [41, 3, 1, "", "memory_access_cost"], [41, 3, 1, "", "memory_complexity"], [41, 3, 1, "", "optimal_parameters"], [41, 3, 1, "", "parameter_names"], [41, 2, 1, "", "parameter_ranges"], [41, 3, 1, "", "reset"], [41, 3, 1, "", "set_parameter_ranges"], [41, 3, 1, "", "set_parameters"], [41, 3, 1, "", "time_complexity"], [41, 3, 1, "", "u"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc": [[42, 1, 1, "", "SBC"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC": [[42, 2, 1, "", "complexity_type"], [42, 3, 1, "", "d"], [42, 3, 1, "", "get_optimal_parameters_dict"], [42, 3, 1, "", "has_optimal_parameter"], [42, 2, 1, "", "memory_access"], [42, 3, 1, "", "memory_access_cost"], [42, 3, 1, "", "memory_complexity"], [42, 3, 1, "", "optimal_parameters"], [42, 3, 1, "", "parameter_names"], [42, 2, 1, "", "parameter_ranges"], [42, 3, 1, "", "reset"], [42, 3, 1, "", "set_parameter_ranges"], [42, 3, 1, "", "set_parameters"], [42, 3, 1, "", "time_complexity"], [42, 3, 1, "", "w"], [42, 3, 1, "", "w1"]], "cryptographic_estimators.PKEstimator": [[43, 0, 0, "-", "pk_algorithm"], [44, 0, 0, "-", "pk_constants"], [45, 0, 0, "-", "pk_estimator"], [46, 0, 0, "-", "pk_helper"], [47, 0, 0, "-", "pk_problem"]], "cryptographic_estimators.PKEstimator.pk_algorithm": [[43, 1, 1, "", "PKAlgorithm"]], "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm": [[43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "get_optimal_parameters_dict"], [43, 3, 1, "", "has_optimal_parameter"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "memory_access_cost"], [43, 3, 1, "", "memory_complexity"], [43, 3, 1, "", "optimal_parameters"], [43, 3, 1, "", "parameter_names"], [43, 2, 1, "", "parameter_ranges"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_parameter_ranges"], [43, 3, 1, "", "set_parameters"], [43, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator.pk_constants": [[44, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation": [[44, 4, 1, "", "KMP_FINAL_LIST"], [44, 4, 1, "", "KMP_L1"], [44, 4, 1, "", "KMP_L2"], [44, 4, 1, "", "SBC_ISD"], [44, 4, 1, "", "SBC_U"]], "cryptographic_estimators.PKEstimator.pk_estimator": [[45, 1, 1, "", "PKEstimator"]], "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator": [[45, 3, 1, "", "algorithm_names"], [45, 3, 1, "", "algorithms"], [45, 2, 1, "", "bit_complexities"], [45, 2, 1, "", "complexity_type"], [45, 3, 1, "", "estimate"], [45, 4, 1, "", "excluded_algorithms_by_default"], [45, 3, 1, "", "fastest_algorithm"], [45, 2, 1, "", "memory_access"], [45, 3, 1, "", "nalgorithms"], [45, 3, 1, "", "reset"], [45, 3, 1, "", "table"]], "cryptographic_estimators.PKEstimator.pk_helper": [[46, 5, 1, "", "beullens_lee_brickell_adaptation"], [46, 5, 1, "", "cost_for_finding_subcode"], [46, 5, 1, "", "gauss_binomial"], [46, 5, 1, "", "lof"]], "cryptographic_estimators.PKEstimator.pk_problem": [[47, 1, 1, "", "PKProblem"]], "cryptographic_estimators.PKEstimator.pk_problem.PKProblem": [[47, 3, 1, "", "expected_number_solutions"], [47, 3, 1, "", "get_parameters"], [47, 3, 1, "", "to_bitcomplexity_memory"], [47, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[48, 0, 0, "-", "ball_collision"], [49, 0, 0, "-", "bjmm"], [50, 0, 0, "-", "bjmm_dw"], [51, 0, 0, "-", "bjmm_pdw"], [52, 0, 0, "-", "both_may"], [53, 0, 0, "-", "dumer"], [54, 0, 0, "-", "may_ozerov"], [55, 0, 0, "-", "prange"], [56, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[48, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[48, 2, 1, "", "complexity_type"], [48, 3, 1, "", "get_optimal_parameters_dict"], [48, 3, 1, "", "has_optimal_parameter"], [48, 3, 1, "", "l"], [48, 2, 1, "", "memory_access"], [48, 3, 1, "", "memory_access_cost"], [48, 3, 1, "", "memory_complexity"], [48, 3, 1, "", "optimal_parameters"], [48, 3, 1, "", "p"], [48, 3, 1, "", "parameter_names"], [48, 2, 1, "", "parameter_ranges"], [48, 3, 1, "", "pl"], [48, 3, 1, "", "r"], [48, 3, 1, "", "reset"], [48, 3, 1, "", "set_parameter_ranges"], [48, 3, 1, "", "set_parameters"], [48, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[49, 1, 1, "", "BJMM"], [49, 1, 1, "", "BJMMd2"], [49, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[49, 2, 1, "", "complexity_type"], [49, 3, 1, "", "depth"], [49, 3, 1, "", "get_optimal_parameters_dict"], [49, 3, 1, "", "has_optimal_parameter"], [49, 3, 1, "", "initialize_parameter_ranges"], [49, 2, 1, "", "memory_access"], [49, 3, 1, "", "memory_access_cost"], [49, 3, 1, "", "memory_complexity"], [49, 3, 1, "", "optimal_parameters"], [49, 3, 1, "", "parameter_names"], [49, 2, 1, "", "parameter_ranges"], [49, 3, 1, "", "r"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "set_parameter_ranges"], [49, 3, 1, "", "set_parameters"], [49, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[49, 2, 1, "", "complexity_type"], [49, 3, 1, "", "get_optimal_parameters_dict"], [49, 3, 1, "", "has_optimal_parameter"], [49, 3, 1, "", "initialize_parameter_ranges"], [49, 3, 1, "", "l"], [49, 2, 1, "", "memory_access"], [49, 3, 1, "", "memory_access_cost"], [49, 3, 1, "", "memory_complexity"], [49, 3, 1, "", "optimal_parameters"], [49, 3, 1, "", "p"], [49, 3, 1, "", "p1"], [49, 3, 1, "", "parameter_names"], [49, 2, 1, "", "parameter_ranges"], [49, 3, 1, "", "r"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "set_parameter_ranges"], [49, 3, 1, "", "set_parameters"], [49, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[49, 2, 1, "", "complexity_type"], [49, 3, 1, "", "get_optimal_parameters_dict"], [49, 3, 1, "", "has_optimal_parameter"], [49, 3, 1, "", "initialize_parameter_ranges"], [49, 3, 1, "", "l"], [49, 2, 1, "", "memory_access"], [49, 3, 1, "", "memory_access_cost"], [49, 3, 1, "", "memory_complexity"], [49, 3, 1, "", "optimal_parameters"], [49, 3, 1, "", "p"], [49, 3, 1, "", "p1"], [49, 3, 1, "", "p2"], [49, 3, 1, "", "parameter_names"], [49, 2, 1, "", "parameter_ranges"], [49, 3, 1, "", "r"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "set_parameter_ranges"], [49, 3, 1, "", "set_parameters"], [49, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[50, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[50, 2, 1, "", "complexity_type"], [50, 3, 1, "", "get_optimal_parameters_dict"], [50, 3, 1, "", "has_optimal_parameter"], [50, 3, 1, "", "initialize_parameter_ranges"], [50, 2, 1, "", "memory_access"], [50, 3, 1, "", "memory_access_cost"], [50, 3, 1, "", "memory_complexity"], [50, 3, 1, "", "optimal_parameters"], [50, 3, 1, "", "p"], [50, 3, 1, "", "p1"], [50, 3, 1, "", "parameter_names"], [50, 2, 1, "", "parameter_ranges"], [50, 3, 1, "", "r"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "set_parameter_ranges"], [50, 3, 1, "", "set_parameters"], [50, 3, 1, "", "time_complexity"], [50, 3, 1, "", "w1"], [50, 3, 1, "", "w11"], [50, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[51, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[51, 2, 1, "", "complexity_type"], [51, 3, 1, "", "get_optimal_parameters_dict"], [51, 3, 1, "", "has_optimal_parameter"], [51, 3, 1, "", "initialize_parameter_ranges"], [51, 2, 1, "", "memory_access"], [51, 3, 1, "", "memory_access_cost"], [51, 3, 1, "", "memory_complexity"], [51, 3, 1, "", "optimal_parameters"], [51, 3, 1, "", "p"], [51, 3, 1, "", "p1"], [51, 3, 1, "", "parameter_names"], [51, 2, 1, "", "parameter_ranges"], [51, 3, 1, "", "r"], [51, 3, 1, "", "reset"], [51, 3, 1, "", "set_parameter_ranges"], [51, 3, 1, "", "set_parameters"], [51, 3, 1, "", "time_complexity"], [51, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[52, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[52, 2, 1, "", "complexity_type"], [52, 3, 1, "", "get_optimal_parameters_dict"], [52, 3, 1, "", "has_optimal_parameter"], [52, 3, 1, "", "initialize_parameter_ranges"], [52, 3, 1, "", "l"], [52, 2, 1, "", "memory_access"], [52, 3, 1, "", "memory_access_cost"], [52, 3, 1, "", "memory_complexity"], [52, 3, 1, "", "optimal_parameters"], [52, 3, 1, "", "p"], [52, 3, 1, "", "p1"], [52, 3, 1, "", "parameter_names"], [52, 2, 1, "", "parameter_ranges"], [52, 3, 1, "", "r"], [52, 3, 1, "", "reset"], [52, 3, 1, "", "set_parameter_ranges"], [52, 3, 1, "", "set_parameters"], [52, 3, 1, "", "time_complexity"], [52, 3, 1, "", "w1"], [52, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[53, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[53, 2, 1, "", "complexity_type"], [53, 3, 1, "", "get_optimal_parameters_dict"], [53, 3, 1, "", "has_optimal_parameter"], [53, 3, 1, "", "initialize_parameter_ranges"], [53, 3, 1, "", "l"], [53, 2, 1, "", "memory_access"], [53, 3, 1, "", "memory_access_cost"], [53, 3, 1, "", "memory_complexity"], [53, 3, 1, "", "optimal_parameters"], [53, 3, 1, "", "p"], [53, 3, 1, "", "parameter_names"], [53, 2, 1, "", "parameter_ranges"], [53, 3, 1, "", "r"], [53, 3, 1, "", "reset"], [53, 3, 1, "", "set_parameter_ranges"], [53, 3, 1, "", "set_parameters"], [53, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[54, 1, 1, "", "MayOzerov"], [54, 1, 1, "", "MayOzerovD2"], [54, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "depth"], [54, 3, 1, "", "get_optimal_parameters_dict"], [54, 3, 1, "", "has_optimal_parameter"], [54, 3, 1, "", "initialize_parameter_ranges"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "memory_access_cost"], [54, 3, 1, "", "memory_complexity"], [54, 3, 1, "", "optimal_parameters"], [54, 3, 1, "", "parameter_names"], [54, 2, 1, "", "parameter_ranges"], [54, 3, 1, "", "r"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "set_parameter_ranges"], [54, 3, 1, "", "set_parameters"], [54, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "get_optimal_parameters_dict"], [54, 3, 1, "", "has_optimal_parameter"], [54, 3, 1, "", "initialize_parameter_ranges"], [54, 3, 1, "", "l"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "memory_access_cost"], [54, 3, 1, "", "memory_complexity"], [54, 3, 1, "", "optimal_parameters"], [54, 3, 1, "", "p"], [54, 3, 1, "", "p1"], [54, 3, 1, "", "parameter_names"], [54, 2, 1, "", "parameter_ranges"], [54, 3, 1, "", "r"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "set_parameter_ranges"], [54, 3, 1, "", "set_parameters"], [54, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "get_optimal_parameters_dict"], [54, 3, 1, "", "has_optimal_parameter"], [54, 3, 1, "", "initialize_parameter_ranges"], [54, 3, 1, "", "l"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "memory_access_cost"], [54, 3, 1, "", "memory_complexity"], [54, 3, 1, "", "optimal_parameters"], [54, 3, 1, "", "p"], [54, 3, 1, "", "p1"], [54, 3, 1, "", "p2"], [54, 3, 1, "", "parameter_names"], [54, 2, 1, "", "parameter_ranges"], [54, 3, 1, "", "r"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "set_parameter_ranges"], [54, 3, 1, "", "set_parameters"], [54, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[55, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[55, 2, 1, "", "complexity_type"], [55, 3, 1, "", "get_optimal_parameters_dict"], [55, 3, 1, "", "has_optimal_parameter"], [55, 2, 1, "", "memory_access"], [55, 3, 1, "", "memory_access_cost"], [55, 3, 1, "", "memory_complexity"], [55, 3, 1, "", "optimal_parameters"], [55, 3, 1, "", "parameter_names"], [55, 2, 1, "", "parameter_ranges"], [55, 3, 1, "", "r"], [55, 3, 1, "", "reset"], [55, 3, 1, "", "set_parameter_ranges"], [55, 3, 1, "", "set_parameters"], [55, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[56, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[56, 2, 1, "", "complexity_type"], [56, 3, 1, "", "get_optimal_parameters_dict"], [56, 3, 1, "", "has_optimal_parameter"], [56, 3, 1, "", "initialize_parameter_ranges"], [56, 3, 1, "", "l"], [56, 2, 1, "", "memory_access"], [56, 3, 1, "", "memory_access_cost"], [56, 3, 1, "", "memory_complexity"], [56, 3, 1, "", "optimal_parameters"], [56, 3, 1, "", "p"], [56, 3, 1, "", "parameter_names"], [56, 2, 1, "", "parameter_ranges"], [56, 3, 1, "", "r"], [56, 3, 1, "", "reset"], [56, 3, 1, "", "set_parameter_ranges"], [56, 3, 1, "", "set_parameters"], [56, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[57, 0, 0, "-", "ball_collision"], [58, 0, 0, "-", "bjmm"], [59, 0, 0, "-", "both_may"], [60, 0, 0, "-", "dumer"], [61, 0, 0, "-", "may_ozerov"], [62, 0, 0, "-", "prange"], [63, 0, 0, "-", "stern"], [64, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[57, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[57, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[58, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[58, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[59, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[59, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[60, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[60, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[61, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[61, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[62, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[62, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[63, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[63, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[64, 5, 1, "", "binary_entropy"], [64, 5, 1, "", "binomial_approximation"], [64, 5, 1, "", "inverse_binary_entropy"], [64, 5, 1, "", "list_of_random_tuples"], [64, 5, 1, "", "may_ozerov_near_neighbor_time"], [64, 5, 1, "", "representations_asymptotic"], [64, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator": [[65, 0, 0, "-", "sd_algorithm"], [66, 0, 0, "-", "sd_constants"], [67, 0, 0, "-", "sd_estimator"], [68, 0, 0, "-", "sd_helper"], [69, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[65, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[65, 2, 1, "", "complexity_type"], [65, 3, 1, "", "get_optimal_parameters_dict"], [65, 3, 1, "", "has_optimal_parameter"], [65, 2, 1, "", "memory_access"], [65, 3, 1, "", "memory_access_cost"], [65, 3, 1, "", "memory_complexity"], [65, 3, 1, "", "optimal_parameters"], [65, 3, 1, "", "parameter_names"], [65, 2, 1, "", "parameter_ranges"], [65, 3, 1, "", "r"], [65, 3, 1, "", "reset"], [65, 3, 1, "", "set_parameter_ranges"], [65, 3, 1, "", "set_parameters"], [65, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[66, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[66, 4, 1, "", "CONSTRAINTS"], [66, 4, 1, "", "GAUSS"], [66, 4, 1, "", "LISTS"], [66, 4, 1, "", "PERMUTATIONS"], [66, 4, 1, "", "REPRESENTATIONS"], [66, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[67, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[67, 3, 1, "", "algorithm_names"], [67, 3, 1, "", "algorithms"], [67, 2, 1, "", "bit_complexities"], [67, 2, 1, "", "complexity_type"], [67, 3, 1, "", "estimate"], [67, 4, 1, "", "excluded_algorithms_by_default"], [67, 3, 1, "", "fastest_algorithm"], [67, 2, 1, "", "memory_access"], [67, 3, 1, "", "nalgorithms"], [67, 3, 1, "", "reset"], [67, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[68, 5, 1, "", "binom"], [68, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[69, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[69, 3, 1, "", "expected_number_solutions"], [69, 3, 1, "", "get_parameters"], [69, 3, 1, "", "to_bitcomplexity_memory"], [69, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms": [[70, 0, 0, "-", "leebrickell"], [71, 0, 0, "-", "prange"], [72, 0, 0, "-", "stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell": [[70, 1, 1, "", "LeeBrickell"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell": [[70, 2, 1, "", "complexity_type"], [70, 3, 1, "", "get_optimal_parameters_dict"], [70, 3, 1, "", "has_optimal_parameter"], [70, 3, 1, "", "initialize_parameter_ranges"], [70, 2, 1, "", "memory_access"], [70, 3, 1, "", "memory_access_cost"], [70, 3, 1, "", "memory_complexity"], [70, 3, 1, "", "optimal_parameters"], [70, 3, 1, "", "p"], [70, 3, 1, "", "parameter_names"], [70, 2, 1, "", "parameter_ranges"], [70, 3, 1, "", "reset"], [70, 3, 1, "", "set_parameter_ranges"], [70, 3, 1, "", "set_parameters"], [70, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange": [[71, 1, 1, "", "Prange"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange": [[71, 2, 1, "", "complexity_type"], [71, 3, 1, "", "get_optimal_parameters_dict"], [71, 3, 1, "", "has_optimal_parameter"], [71, 2, 1, "", "memory_access"], [71, 3, 1, "", "memory_access_cost"], [71, 3, 1, "", "memory_complexity"], [71, 3, 1, "", "optimal_parameters"], [71, 3, 1, "", "parameter_names"], [71, 2, 1, "", "parameter_ranges"], [71, 3, 1, "", "reset"], [71, 3, 1, "", "set_parameter_ranges"], [71, 3, 1, "", "set_parameters"], [71, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern": [[72, 1, 1, "", "Stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern": [[72, 2, 1, "", "complexity_type"], [72, 3, 1, "", "get_optimal_parameters_dict"], [72, 3, 1, "", "has_optimal_parameter"], [72, 3, 1, "", "initialize_parameter_ranges"], [72, 3, 1, "", "l"], [72, 2, 1, "", "memory_access"], [72, 3, 1, "", "memory_access_cost"], [72, 3, 1, "", "memory_complexity"], [72, 3, 1, "", "optimal_parameters"], [72, 3, 1, "", "p"], [72, 3, 1, "", "parameter_names"], [72, 2, 1, "", "parameter_ranges"], [72, 3, 1, "", "reset"], [72, 3, 1, "", "set_parameter_ranges"], [72, 3, 1, "", "set_parameters"], [72, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator": [[73, 0, 0, "-", "sdfq_algorithm"], [74, 0, 0, "-", "sdfq_constants"], [75, 0, 0, "-", "sdfq_estimator"], [76, 0, 0, "-", "sdfq_helper"], [77, 0, 0, "-", "sdfq_problem"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm": [[73, 1, 1, "", "SDFqAlgorithm"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm": [[73, 2, 1, "", "complexity_type"], [73, 3, 1, "", "get_optimal_parameters_dict"], [73, 3, 1, "", "has_optimal_parameter"], [73, 2, 1, "", "memory_access"], [73, 3, 1, "", "memory_access_cost"], [73, 3, 1, "", "memory_complexity"], [73, 3, 1, "", "optimal_parameters"], [73, 3, 1, "", "parameter_names"], [73, 2, 1, "", "parameter_ranges"], [73, 3, 1, "", "reset"], [73, 3, 1, "", "set_parameter_ranges"], [73, 3, 1, "", "set_parameters"], [73, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants": [[74, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation": [[74, 4, 1, "", "CONSTRAINTS"], [74, 4, 1, "", "GAUSS"], [74, 4, 1, "", "LISTS"], [74, 4, 1, "", "PERMUTATIONS"], [74, 4, 1, "", "REPRESENTATIONS"], [74, 4, 1, "", "TREE"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator": [[75, 1, 1, "", "SDFqEstimator"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator": [[75, 3, 1, "", "algorithm_names"], [75, 3, 1, "", "algorithms"], [75, 2, 1, "", "bit_complexities"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "estimate"], [75, 4, 1, "", "excluded_algorithms_by_default"], [75, 3, 1, "", "fastest_algorithm"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "nalgorithms"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "table"]], "cryptographic_estimators.SDFqEstimator.sdfq_helper": [[76, 5, 1, "", "binom"], [76, 5, 1, "", "min_max"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem": [[77, 1, 1, "", "SDFqProblem"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem": [[77, 3, 1, "", "expected_number_solutions"], [77, 3, 1, "", "get_parameters"], [77, 3, 1, "", "to_bitcomplexity_memory"], [77, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators": [[78, 0, 0, "-", "base_algorithm"], [79, 0, 0, "-", "base_constants"], [80, 0, 0, "-", "base_estimator"], [81, 0, 0, "-", "base_problem"], [82, 0, 0, "-", "helper"]], "cryptographic_estimators.base_algorithm": [[78, 1, 1, "", "BaseAlgorithm"], [78, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[78, 2, 1, "", "complexity_type"], [78, 3, 1, "", "get_optimal_parameters_dict"], [78, 3, 1, "", "has_optimal_parameter"], [78, 2, 1, "", "memory_access"], [78, 3, 1, "", "memory_access_cost"], [78, 3, 1, "", "memory_complexity"], [78, 3, 1, "", "optimal_parameters"], [78, 3, 1, "", "parameter_names"], [78, 2, 1, "", "parameter_ranges"], [78, 3, 1, "", "reset"], [78, 3, 1, "", "set_parameter_ranges"], [78, 3, 1, "", "set_parameters"], [78, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[80, 1, 1, "", "BaseEstimator"], [80, 5, 1, "", "channels"], [80, 5, 1, "", "codes"], [80, 5, 1, "", "cones"], [80, 5, 1, "", "crystals"], [80, 5, 1, "", "finance"], [80, 5, 1, "", "finite_dynamical_systems"], [80, 5, 1, "", "game_theory"], [80, 5, 1, "", "graph_coloring"], [80, 5, 1, "", "groups"], [80, 5, 1, "", "lattice_polytope"], [80, 5, 1, "", "lie_algebras"], [80, 5, 1, "", "lie_conformal_algebras"], [80, 5, 1, "", "manifolds"], [80, 5, 1, "", "matroids"], [80, 5, 1, "", "path_tableaux"], [80, 5, 1, "", "simplicial_complexes"], [80, 5, 1, "", "simplicial_sets"], [80, 5, 1, "", "tests"], [80, 5, 1, "", "toric_plotter"], [80, 5, 1, "", "valuations"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[80, 3, 1, "", "algorithm_names"], [80, 3, 1, "", "algorithms"], [80, 2, 1, "", "bit_complexities"], [80, 2, 1, "", "complexity_type"], [80, 3, 1, "", "estimate"], [80, 4, 1, "", "excluded_algorithms_by_default"], [80, 3, 1, "", "fastest_algorithm"], [80, 2, 1, "", "memory_access"], [80, 3, 1, "", "nalgorithms"], [80, 3, 1, "", "reset"], [80, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[81, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[81, 3, 1, "", "expected_number_solutions"], [81, 3, 1, "", "to_bitcomplexity_memory"], [81, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.helper": [[82, 1, 1, "", "ComplexityType"], [82, 5, 1, "", "concat_all_tables"], [82, 5, 1, "", "concat_pretty_tables"], [82, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[82, 4, 1, "", "ESTIMATE"], [82, 4, 1, "", "TILDEO"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"dummy_algorithm1": 0, "dummy_algorithm": 1, "dummy_estim": 2, "dummy_problem": 3, "bbp": 4, "beullen": [5, 33], "leon": [6, 34], "le_algorithm": 7, "le_const": 8, "le_estim": 9, "le_help": 10, "le_problem": 11, "bjorklund": 12, "boolean_solve_fxl": 13, "cgmta": 14, "crossbr": 15, "dinur1": 16, "dinur2": 17, "exhaustive_search": 18, "f5": 19, "hybrid_f5": 20, "kpg": 21, "lokshtanov": 22, "mht": 23, "degree_of_regular": 24, "mq_algorithm": 25, "mq_constant": 26, "mq_estim": 27, "mq_helper": 28, "mq_problem": 29, "hilbert": 30, "nmonomi": 31, "witness_degre": 32, "ssa": 35, "pe_algorithm": 36, "pe_const": 37, "pe_estim": 38, "pe_help": 39, "pe_problem": 40, "kmp": 41, "sbc": 42, "pk_algorithm": 43, "pk_constant": 44, "pk_estim": 45, "pk_helper": 46, "pk_problem": 47, "ball_collis": [48, 57], "bjmm": [49, 58], "bjmm_dw": 50, "bjmm_pdw": 51, "both_mai": [52, 59], "dumer": [53, 60], "may_ozerov": [54, 61], "prang": [55, 62, 71], "stern": [56, 63, 72], "workfactor_help": 64, "sd_algorithm": 65, "sd_constant": 66, "sd_estim": 67, "sd_helper": 68, "sd_problem": 69, "leebrickel": 70, "sdfq_algorithm": 73, "sdfq_constant": 74, "sdfq_estim": 75, "sdfq_helper": 76, "sdfq_problem": 77, "base_algorithm": 78, "base_const": 79, "base_estim": 80, "famili": 80, "code": 80, "rich": 80, "represent": 80, "gener": [80, 83], "matrix": 80, "deriv": 80, "catalog": 80, "function": 80, "method": 80, "base_problem": 81, "helper": 82, "tii": 83, "cryptanalysi": 83, "librari": 83, "dummyestim": 83, "dummyalgorithm": 83, "sdfqestim": 83, "sdfqalgorithm": 83, "leestim": 83, "lealgorithm": 83, "peestim": 83, "pealgorithm": 83, "mqestim": 83, "mqalgorithm": 83, "seri": 83, "pkestim": 83, "pkalgorithm": 83, "sdestim": 83, "sdworkfactormodel": 83, "sdalgorithm": 83, "inform": 83, "indic": 83, "tabl": 83, "refer": 84}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "bbps": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "beullens": [[5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [33, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "leon": [[6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [34, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "le_algorithm": [[7, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "le_constants": [[8, "module-cryptographic_estimators.LEEstimator.le_constants"]], "le_estimator": [[9, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "le_helper": [[10, "module-cryptographic_estimators.LEEstimator.le_helper"]], "le_problem": [[11, "module-cryptographic_estimators.LEEstimator.le_problem"]], "bjorklund": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "boolean_solve_fxl": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"]], "cgmta": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "crossbred": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "dinur1": [[16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "dinur2": [[17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "exhaustive_search": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "f5": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "hybrid_f5": [[20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "kpg": [[21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "lokshtanov": [[22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "mht": [[23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "degree_of_regularity": [[24, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "mq_algorithm": [[25, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "mq_constants": [[26, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mq_estimator": [[27, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "mq_helper": [[28, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "mq_problem": [[29, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "hilbert": [[30, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "nmonomial": [[31, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "witness_degree": [[32, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "ssa": [[35, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "pe_algorithm": [[36, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "pe_constants": [[37, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "pe_estimator": [[38, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "pe_helper": [[39, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "pe_problem": [[40, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "kmp": [[41, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "sbc": [[42, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "pk_algorithm": [[43, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "pk_constants": [[44, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pk_estimator": [[45, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "pk_helper": [[46, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "pk_problem": [[47, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "ball_collision": [[48, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [57, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "bjmm": [[49, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [58, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "bjmm_dw": [[50, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "bjmm_pdw": [[51, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "both_may": [[52, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [59, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "dumer": [[53, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [60, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "may_ozerov": [[54, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [61, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "prange": [[55, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [62, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [71, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "stern": [[56, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [63, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [72, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "workfactor_helper": [[64, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "sd_algorithm": [[65, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "sd_constants": [[66, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sd_estimator": [[67, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "sd_helper": [[68, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "sd_problem": [[69, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "leebrickell": [[70, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "sdfq_algorithm": [[73, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "sdfq_constants": [[74, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfq_estimator": [[75, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "sdfq_helper": [[76, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "sdfq_problem": [[77, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "base_algorithm": [[78, "module-cryptographic_estimators.base_algorithm"]], "base_constants": [[79, "module-cryptographic_estimators.base_constants"]], "base_estimator": [[80, "module-cryptographic_estimators.base_estimator"]], "Families of Codes (Rich representation)": [[80, "families-of-codes-rich-representation"]], "Families of Codes (Generator matrix representation)": [[80, "families-of-codes-generator-matrix-representation"]], "Derived Codes": [[80, "derived-codes"]], "Catalog": [[80, "catalog"]], "Functions": [[80, "functions"]], "Methods": [[80, "methods"]], "base_problem": [[81, "module-cryptographic_estimators.base_problem"]], "helper": [[82, "module-cryptographic_estimators.helper"]], "TII Cryptanalysis Library": [[83, "tii-cryptanalysis-library"]], "DummyEstimator": [[83, "dummyestimator"]], "DummyAlgorithms": [[83, "dummyalgorithms"]], "SDFqEstimator": [[83, "sdfqestimator"]], "SDFqAlgorithms": [[83, "sdfqalgorithms"]], "LEEstimator": [[83, "leestimator"]], "LEAlgorithms": [[83, "lealgorithms"]], "PEEstimator": [[83, "peestimator"]], "PEAlgorithms": [[83, "pealgorithms"]], "MQEstimator": [[83, "mqestimator"]], "MQAlgorithms": [[83, "mqalgorithms"]], "series": [[83, "series"]], "PKEstimator": [[83, "pkestimator"]], "PKAlgorithms": [[83, "pkalgorithms"]], "SDEstimator": [[83, "sdestimator"]], "SDWorkfactorModels": [[83, "sdworkfactormodels"]], "SDAlgorithms": [[83, "sdalgorithms"]], "General Information": [[83, "general-information"]], "Indices and Tables": [[83, "indices-and-tables"]], "References": [[84, "references"]]}, "indexentries": {"dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1"]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type"]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity"]], "module": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"], [1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"], [2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"], [3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"], [4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"], [5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [7, "module-cryptographic_estimators.LEEstimator.le_algorithm"], [8, "module-cryptographic_estimators.LEEstimator.le_constants"], [9, "module-cryptographic_estimators.LEEstimator.le_estimator"], [10, "module-cryptographic_estimators.LEEstimator.le_helper"], [11, "module-cryptographic_estimators.LEEstimator.le_problem"], [12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"], [13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"], [14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"], [15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"], [16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"], [17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"], [18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"], [19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"], [20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"], [21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"], [22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"], [23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"], [24, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"], [25, "module-cryptographic_estimators.MQEstimator.mq_algorithm"], [26, "module-cryptographic_estimators.MQEstimator.mq_constants"], [27, "module-cryptographic_estimators.MQEstimator.mq_estimator"], [28, "module-cryptographic_estimators.MQEstimator.mq_helper"], [29, "module-cryptographic_estimators.MQEstimator.mq_problem"], [30, "module-cryptographic_estimators.MQEstimator.series.hilbert"], [31, "module-cryptographic_estimators.MQEstimator.series.nmonomial"], [32, "module-cryptographic_estimators.MQEstimator.witness_degree"], [33, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"], [34, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"], [35, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"], [36, "module-cryptographic_estimators.PEEstimator.pe_algorithm"], [37, "module-cryptographic_estimators.PEEstimator.pe_constants"], [38, "module-cryptographic_estimators.PEEstimator.pe_estimator"], [39, "module-cryptographic_estimators.PEEstimator.pe_helper"], [40, "module-cryptographic_estimators.PEEstimator.pe_problem"], [41, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"], [42, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"], [43, "module-cryptographic_estimators.PKEstimator.pk_algorithm"], [44, "module-cryptographic_estimators.PKEstimator.pk_constants"], [45, "module-cryptographic_estimators.PKEstimator.pk_estimator"], [46, "module-cryptographic_estimators.PKEstimator.pk_helper"], [47, "module-cryptographic_estimators.PKEstimator.pk_problem"], [48, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [49, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [50, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"], [51, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"], [52, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [53, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [54, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [55, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [56, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [57, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"], [58, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"], [59, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"], [60, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"], [61, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"], [62, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [63, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [64, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"], [65, "module-cryptographic_estimators.SDEstimator.sd_algorithm"], [66, "module-cryptographic_estimators.SDEstimator.sd_constants"], [67, "module-cryptographic_estimators.SDEstimator.sd_estimator"], [68, "module-cryptographic_estimators.SDEstimator.sd_helper"], [69, "module-cryptographic_estimators.SDEstimator.sd_problem"], [70, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"], [71, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"], [72, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"], [73, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"], [74, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"], [75, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"], [76, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"], [77, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"], [78, "module-cryptographic_estimators.base_algorithm"], [79, "module-cryptographic_estimators.base_constants"], [80, "module-cryptographic_estimators.base_estimator"], [81, "module-cryptographic_estimators.base_problem"], [82, "module-cryptographic_estimators.helper"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters"]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1"]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2"]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity"]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity"]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator"]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms"]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset"]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table"]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem"]], "cryptographic_estimators.dummyestimator.dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time"]], "bbps (class in cryptographic_estimators.leestimator.lealgorithms.bbps)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.bbps": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w"]], "w_prime() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w_prime"]], "beullens (class in cryptographic_estimators.leestimator.lealgorithms.beullens)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.beullens": [[5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.leestimator.lealgorithms.leon)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.leon": [[6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.w"]], "lealgorithm (class in cryptographic_estimators.leestimator.le_algorithm)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm"]], "complexity_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.complexity_type"]], "cryptographic_estimators.leestimator.le_algorithm": [[7, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.time_complexity"]], "isd (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.ISD"]], "lists (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS"]], "lists_size (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS_SIZE"]], "normal_form (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NORMAL_FORM"]], "nw (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NW"]], "verboseinformation (class in cryptographic_estimators.leestimator.le_constants)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation"]], "cryptographic_estimators.leestimator.le_constants": [[8, "module-cryptographic_estimators.LEEstimator.le_constants"]], "leestimator (class in cryptographic_estimators.leestimator.le_estimator)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator"]], "algorithm_names() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.complexity_type"]], "cryptographic_estimators.leestimator.le_estimator": [[9, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "estimate() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.leestimator.le_estimator.leestimator attribute)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.reset"]], "table() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.table"]], "cost_to_find_random_2dim_subcodes_with_support_w() (in module cryptographic_estimators.leestimator.le_helper)": [[10, "cryptographic_estimators.LEEstimator.le_helper.cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.leestimator.le_helper": [[10, "module-cryptographic_estimators.LEEstimator.le_helper"]], "leproblem (class in cryptographic_estimators.leestimator.le_problem)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem"]], "cryptographic_estimators.leestimator.le_problem": [[11, "module-cryptographic_estimators.LEEstimator.le_problem"]], "expected_number_solutions() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_time"]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[12, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[12, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity"]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl": [[13, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl property)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.time_complexity"]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.boolean_solve_fxl.booleansolvefxl method)": [[13, "cryptographic_estimators.MQEstimator.MQAlgorithms.boolean_solve_fxl.BooleanSolveFXL.variant"]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[14, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[14, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity"]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred"]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D"], [15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[15, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant"]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[15, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity"]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[16, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter"]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[16, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity"]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[17, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity"]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[17, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity"]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity"]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity"]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity"]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity"]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity"]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity"]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[24, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system"]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[24, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system"]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm"]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type"]], "cryptographic_estimators.mqestimator.mq_algorithm": [[25, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[25, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity"]], "cryptographic_estimators.mqestimator.mq_constants": [[26, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator"]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type"]], "cryptographic_estimators.mqestimator.mq_estimator": [[27, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset"]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[27, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table"]], "cryptographic_estimators.mqestimator.mq_helper": [[28, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "ngates() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.ngates"]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree"]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree"]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[28, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients"]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem"]], "cryptographic_estimators.mqestimator.mq_problem": [[29, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions"]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters"]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field"]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system"]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system"]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system"]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field"]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[29, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time"]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries"]], "cryptographic_estimators.mqestimator.series.hilbert": [[30, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees"]], "first_nonpositive_integer() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_integer"]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials"]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables"]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision"]], "ring (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.ring"]], "series (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[30, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.series"]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries"]], "cryptographic_estimators.mqestimator.series.nmonomial": [[31, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree"]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree"]], "series_monomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_of_degree"]], "series_monomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[31, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.series_monomials_up_to_degree"]], "cryptographic_estimators.mqestimator.witness_degree": [[32, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[32, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[32, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system"]], "beullens (class in cryptographic_estimators.peestimator.pealgorithms.beullens)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.beullens": [[33, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[33, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.peestimator.pealgorithms.leon)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.leon": [[34, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[34, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.w"]], "ssa (class in cryptographic_estimators.peestimator.pealgorithms.ssa)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.ssa": [[35, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[35, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.time_complexity"]], "pealgorithm (class in cryptographic_estimators.peestimator.pe_algorithm)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm"]], "complexity_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.complexity_type"]], "cryptographic_estimators.peestimator.pe_algorithm": [[36, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[36, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.time_complexity"]], "lists_size (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[37, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LISTS_SIZE"]], "list_computation (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[37, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LIST_COMPUTATION"]], "normal_form (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[37, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.NORMAL_FORM"]], "verboseinformation (class in cryptographic_estimators.peestimator.pe_constants)": [[37, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation"]], "cryptographic_estimators.peestimator.pe_constants": [[37, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "peestimator (class in cryptographic_estimators.peestimator.pe_estimator)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator"]], "algorithm_names() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.complexity_type"]], "cryptographic_estimators.peestimator.pe_estimator": [[38, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "estimate() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.peestimator.pe_estimator.peestimator attribute)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.reset"]], "table() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[38, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.table"]], "cryptographic_estimators.peestimator.pe_helper": [[39, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "gv_distance() (in module cryptographic_estimators.peestimator.pe_helper)": [[39, "cryptographic_estimators.PEEstimator.pe_helper.gv_distance"]], "hamming_ball() (in module cryptographic_estimators.peestimator.pe_helper)": [[39, "cryptographic_estimators.PEEstimator.pe_helper.hamming_ball"]], "median_size_of_random_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[39, "cryptographic_estimators.PEEstimator.pe_helper.median_size_of_random_orbit"]], "number_of_weight_d_codewords() (in module cryptographic_estimators.peestimator.pe_helper)": [[39, "cryptographic_estimators.PEEstimator.pe_helper.number_of_weight_d_codewords"]], "random_sparse_vec_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[39, "cryptographic_estimators.PEEstimator.pe_helper.random_sparse_vec_orbit"]], "peproblem (class in cryptographic_estimators.peestimator.pe_problem)": [[40, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem"]], "cryptographic_estimators.peestimator.pe_problem": [[40, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "expected_number_solutions() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[40, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[40, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[40, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[40, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_time"]], "kmp (class in cryptographic_estimators.pkestimator.pkalgorithms.kmp)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.kmp": [[41, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.time_complexity"]], "u() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[41, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.u"]], "sbc (class in cryptographic_estimators.pkestimator.pkalgorithms.sbc)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.sbc": [[42, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "d() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.d"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.time_complexity"]], "w() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w"]], "w1() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[42, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w1"]], "pkalgorithm (class in cryptographic_estimators.pkestimator.pk_algorithm)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm"]], "complexity_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.complexity_type"]], "cryptographic_estimators.pkestimator.pk_algorithm": [[43, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[43, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.time_complexity"]], "kmp_final_list (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[44, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_FINAL_LIST"]], "kmp_l1 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[44, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L1"]], "kmp_l2 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[44, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L2"]], "sbc_isd (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[44, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_ISD"]], "sbc_u (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[44, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_U"]], "verboseinformation (class in cryptographic_estimators.pkestimator.pk_constants)": [[44, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation"]], "cryptographic_estimators.pkestimator.pk_constants": [[44, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pkestimator (class in cryptographic_estimators.pkestimator.pk_estimator)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator"]], "algorithm_names() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.complexity_type"]], "cryptographic_estimators.pkestimator.pk_estimator": [[45, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "estimate() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.pkestimator.pk_estimator.pkestimator attribute)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.nalgorithms"]], "reset() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.reset"]], "table() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[45, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.table"]], "beullens_lee_brickell_adaptation() (in module cryptographic_estimators.pkestimator.pk_helper)": [[46, "cryptographic_estimators.PKEstimator.pk_helper.beullens_lee_brickell_adaptation"]], "cost_for_finding_subcode() (in module cryptographic_estimators.pkestimator.pk_helper)": [[46, "cryptographic_estimators.PKEstimator.pk_helper.cost_for_finding_subcode"]], "cryptographic_estimators.pkestimator.pk_helper": [[46, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "gauss_binomial() (in module cryptographic_estimators.pkestimator.pk_helper)": [[46, "cryptographic_estimators.PKEstimator.pk_helper.gauss_binomial"]], "lof() (in module cryptographic_estimators.pkestimator.pk_helper)": [[46, "cryptographic_estimators.PKEstimator.pk_helper.lof"]], "pkproblem (class in cryptographic_estimators.pkestimator.pk_problem)": [[47, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem"]], "cryptographic_estimators.pkestimator.pk_problem": [[47, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "expected_number_solutions() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[47, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[47, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[47, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[47, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_time"]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[48, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges"]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[48, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity"]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM"]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2"]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[49, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[49, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity"]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[50, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1"]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[50, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2"]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[51, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[51, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2"]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[52, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[52, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2"]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[53, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[53, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity"]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov"]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2"]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[54, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[54, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity"]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[55, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[55, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[56, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[56, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity"]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[57, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[57, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[57, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters"]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[58, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[58, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[58, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters"]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[59, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[59, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[59, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters"]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[60, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[60, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[60, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters"]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[61, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[61, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[61, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters"]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[62, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[62, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[62, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters"]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[63, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[63, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[63, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters"]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy"]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[64, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy"]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples"]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time"]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic"]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[64, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap"]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm"]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type"]], "cryptographic_estimators.sdestimator.sd_algorithm": [[65, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r"]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[65, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[66, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation"]], "cryptographic_estimators.sdestimator.sd_constants": [[66, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator"]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type"]], "cryptographic_estimators.sdestimator.sd_estimator": [[67, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset"]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[67, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table"]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[68, "cryptographic_estimators.SDEstimator.sd_helper.binom"]], "cryptographic_estimators.sdestimator.sd_helper": [[68, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[68, "cryptographic_estimators.SDEstimator.sd_helper.min_max"]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[69, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem"]], "cryptographic_estimators.sdestimator.sd_problem": [[69, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[69, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[69, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[69, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[69, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time"]], "leebrickell (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell": [[70, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[70, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.time_complexity"]], "prange (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange": [[71, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[71, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern": [[72, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[72, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.time_complexity"]], "sdfqalgorithm (class in cryptographic_estimators.sdfqestimator.sdfq_algorithm)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_algorithm": [[73, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[73, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdfqestimator.sdfq_constants)": [[74, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation"]], "cryptographic_estimators.sdfqestimator.sdfq_constants": [[74, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfqestimator (class in cryptographic_estimators.sdfqestimator.sdfq_estimator)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator"]], "algorithm_names() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_estimator": [[75, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "estimate() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator attribute)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.reset"]], "table() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[75, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.table"]], "binom() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[76, "cryptographic_estimators.SDFqEstimator.sdfq_helper.binom"]], "cryptographic_estimators.sdfqestimator.sdfq_helper": [[76, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "min_max() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[76, "cryptographic_estimators.SDFqEstimator.sdfq_helper.min_max"]], "sdfqproblem (class in cryptographic_estimators.sdfqestimator.sdfq_problem)": [[77, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem"]], "cryptographic_estimators.sdfqestimator.sdfq_problem": [[77, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "expected_number_solutions() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[77, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[77, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[77, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[77, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_time"]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm"]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type"]], "cryptographic_estimators.base_algorithm": [[78, "module-cryptographic_estimators.base_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity"]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[78, "cryptographic_estimators.base_algorithm.optimal_parameter"]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[78, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity"]], "cryptographic_estimators.base_constants": [[79, "module-cryptographic_estimators.base_constants"]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator"]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities"]], "channels() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.channels"]], "codes() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.codes"]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type"]], "cones() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.cones"]], "cryptographic_estimators.base_estimator": [[80, "module-cryptographic_estimators.base_estimator"]], "crystals() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.crystals"]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.estimate"]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm"]], "finance() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.finance"]], "finite_dynamical_systems() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.finite_dynamical_systems"]], "game_theory() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.game_theory"]], "graph_coloring() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.graph_coloring"]], "groups() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.groups"]], "lattice_polytope() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.lattice_polytope"]], "lie_algebras() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.lie_algebras"]], "lie_conformal_algebras() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.lie_conformal_algebras"]], "manifolds() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.manifolds"]], "matroids() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.matroids"]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms"]], "path_tableaux() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.path_tableaux"]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.reset"]], "simplicial_complexes() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.simplicial_complexes"]], "simplicial_sets() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.simplicial_sets"]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[80, "cryptographic_estimators.base_estimator.BaseEstimator.table"]], "tests() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.tests"]], "toric_plotter() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.toric_plotter"]], "valuations() (in module cryptographic_estimators.base_estimator)": [[80, "cryptographic_estimators.base_estimator.valuations"]], "baseproblem (class in cryptographic_estimators.base_problem)": [[81, "cryptographic_estimators.base_problem.BaseProblem"]], "cryptographic_estimators.base_problem": [[81, "module-cryptographic_estimators.base_problem"]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[81, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions"]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[81, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[81, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time"]], "complexitytype (class in cryptographic_estimators.helper)": [[82, "cryptographic_estimators.helper.ComplexityType"]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[82, "cryptographic_estimators.helper.ComplexityType.ESTIMATE"]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[82, "cryptographic_estimators.helper.ComplexityType.TILDEO"]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[82, "cryptographic_estimators.helper.concat_all_tables"]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[82, "cryptographic_estimators.helper.concat_pretty_tables"]], "cryptographic_estimators.helper": [[82, "module-cryptographic_estimators.helper"]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[82, "cryptographic_estimators.helper.round_or_truncate"]]}})