Search.setIndex({"docnames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "LEEstimator/LEAlgorithms/bbps", "LEEstimator/LEAlgorithms/beullens", "LEEstimator/LEAlgorithms/leon", "LEEstimator/le_algorithm", "LEEstimator/le_constants", "LEEstimator/le_estimator", "LEEstimator/le_helper", "LEEstimator/le_problem", "MAYOEstimator/MAYOAlgorithms/direct_attack", "MAYOEstimator/mayo_algorithm", "MAYOEstimator/mayo_constants", "MAYOEstimator/mayo_estimator", "MAYOEstimator/mayo_helper", "MAYOEstimator/mayo_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/booleansolve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "MREstimator/MRAlgorithms/big_k", "MREstimator/MRAlgorithms/bruteforce", "MREstimator/MRAlgorithms/kernel_search", "MREstimator/MRAlgorithms/minors", "MREstimator/MRAlgorithms/support_minors", "MREstimator/mr_algorithm", "MREstimator/mr_constants", "MREstimator/mr_estimator", "MREstimator/mr_helper", "MREstimator/mr_problem", "PEEstimator/PEAlgorithms/beullens", "PEEstimator/PEAlgorithms/leon", "PEEstimator/PEAlgorithms/ssa", "PEEstimator/pe_algorithm", "PEEstimator/pe_constants", "PEEstimator/pe_estimator", "PEEstimator/pe_helper", "PEEstimator/pe_problem", "PKEstimator/PKAlgorithms/kmp", "PKEstimator/PKAlgorithms/sbc", "PKEstimator/pk_algorithm", "PKEstimator/pk_constants", "PKEstimator/pk_estimator", "PKEstimator/pk_helper", "PKEstimator/pk_problem", "RegSDEstimator/RegSDAlgorithms/ccj", "RegSDEstimator/RegSDAlgorithms/ccj_lin", "RegSDEstimator/RegSDAlgorithms/regisd_enum", "RegSDEstimator/RegSDAlgorithms/regisd_perm", "RegSDEstimator/RegSDAlgorithms/regisd_rep", "RegSDEstimator/RegSDAlgorithms/sd_attack", "RegSDEstimator/regsd_algorithm", "RegSDEstimator/regsd_constants", "RegSDEstimator/regsd_estimator", "RegSDEstimator/regsd_helper", "RegSDEstimator/regsd_problem", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/bjmm_plus", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "SDFqEstimator/SDFqAlgorithms/leebrickell", "SDFqEstimator/SDFqAlgorithms/prange", "SDFqEstimator/SDFqAlgorithms/stern", "SDFqEstimator/sdfq_algorithm", "SDFqEstimator/sdfq_constants", "SDFqEstimator/sdfq_estimator", "SDFqEstimator/sdfq_helper", "SDFqEstimator/sdfq_problem", "UOVEstimator/UOVAlgorithms/collision_attack", "UOVEstimator/UOVAlgorithms/direct_attack", "UOVEstimator/UOVAlgorithms/intersection_attack", "UOVEstimator/UOVAlgorithms/kipnis_shamir", "UOVEstimator/uov_algorithm", "UOVEstimator/uov_constants", "UOVEstimator/uov_estimator", "UOVEstimator/uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "index", "references"], "filenames": ["DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "LEEstimator/LEAlgorithms/bbps.rst", "LEEstimator/LEAlgorithms/beullens.rst", "LEEstimator/LEAlgorithms/leon.rst", "LEEstimator/le_algorithm.rst", "LEEstimator/le_constants.rst", "LEEstimator/le_estimator.rst", "LEEstimator/le_helper.rst", "LEEstimator/le_problem.rst", "MAYOEstimator/MAYOAlgorithms/direct_attack.rst", "MAYOEstimator/mayo_algorithm.rst", "MAYOEstimator/mayo_constants.rst", "MAYOEstimator/mayo_estimator.rst", "MAYOEstimator/mayo_helper.rst", "MAYOEstimator/mayo_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/booleansolve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "MREstimator/MRAlgorithms/big_k.rst", "MREstimator/MRAlgorithms/bruteforce.rst", "MREstimator/MRAlgorithms/kernel_search.rst", "MREstimator/MRAlgorithms/minors.rst", "MREstimator/MRAlgorithms/support_minors.rst", "MREstimator/mr_algorithm.rst", "MREstimator/mr_constants.rst", "MREstimator/mr_estimator.rst", "MREstimator/mr_helper.rst", "MREstimator/mr_problem.rst", "PEEstimator/PEAlgorithms/beullens.rst", "PEEstimator/PEAlgorithms/leon.rst", "PEEstimator/PEAlgorithms/ssa.rst", "PEEstimator/pe_algorithm.rst", "PEEstimator/pe_constants.rst", "PEEstimator/pe_estimator.rst", "PEEstimator/pe_helper.rst", "PEEstimator/pe_problem.rst", "PKEstimator/PKAlgorithms/kmp.rst", "PKEstimator/PKAlgorithms/sbc.rst", "PKEstimator/pk_algorithm.rst", "PKEstimator/pk_constants.rst", "PKEstimator/pk_estimator.rst", "PKEstimator/pk_helper.rst", "PKEstimator/pk_problem.rst", "RegSDEstimator/RegSDAlgorithms/ccj.rst", "RegSDEstimator/RegSDAlgorithms/ccj_lin.rst", "RegSDEstimator/RegSDAlgorithms/regisd_enum.rst", "RegSDEstimator/RegSDAlgorithms/regisd_perm.rst", "RegSDEstimator/RegSDAlgorithms/regisd_rep.rst", "RegSDEstimator/RegSDAlgorithms/sd_attack.rst", "RegSDEstimator/regsd_algorithm.rst", "RegSDEstimator/regsd_constants.rst", "RegSDEstimator/regsd_estimator.rst", "RegSDEstimator/regsd_helper.rst", "RegSDEstimator/regsd_problem.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/bjmm_plus.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "SDFqEstimator/SDFqAlgorithms/leebrickell.rst", "SDFqEstimator/SDFqAlgorithms/prange.rst", "SDFqEstimator/SDFqAlgorithms/stern.rst", "SDFqEstimator/sdfq_algorithm.rst", "SDFqEstimator/sdfq_constants.rst", "SDFqEstimator/sdfq_estimator.rst", "SDFqEstimator/sdfq_helper.rst", "SDFqEstimator/sdfq_problem.rst", "UOVEstimator/UOVAlgorithms/collision_attack.rst", "UOVEstimator/UOVAlgorithms/direct_attack.rst", "UOVEstimator/UOVAlgorithms/intersection_attack.rst", "UOVEstimator/UOVAlgorithms/kipnis_shamir.rst", "UOVEstimator/uov_algorithm.rst", "UOVEstimator/uov_constants.rst", "UOVEstimator/uov_estimator.rst", "UOVEstimator/uov_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "estimation_renderer.rst", "helper.rst", "index.rst", "references.rst"], "titles": ["dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "bbps", "beullens", "leon", "le_algorithm", "le_constants", "le_estimator", "le_helper", "le_problem", "direct_attack", "mayo_algorithm", "mayo_constants", "mayo_estimator", "mayo_helper", "mayo_problem", "bjorklund", "booleansolve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "big_k", "bruteforce", "kernel_search", "minors", "support_minors", "mr_algorithm", "mr_constants", "mr_estimator", "mr_helper", "mr_problem", "beullens", "leon", "ssa", "pe_algorithm", "pe_constants", "pe_estimator", "pe_helper", "pe_problem", "kmp", "sbc", "pk_algorithm", "pk_constants", "pk_estimator", "pk_helper", "pk_problem", "ccj", "ccj_lin", "regisd_enum", "regisd_perm", "regisd_rep", "sd_attack", "regsd_algorithm", "regsd_constants", "regsd_estimator", "regsd_helper", "regsd_problem", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "bjmm_plus", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "leebrickell", "prange", "stern", "sdfq_algorithm", "sdfq_constants", "sdfq_estimator", "sdfq_helper", "sdfq_problem", "collision_attack", "direct_attack", "intersection_attack", "kipnis_shamir", "uov_algorithm", "uov_constants", "uov_estimator", "uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "CryptographicEstimators Library", "References"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119], "cryptographic_estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120], "dummyestim": [0, 1, 2, 3], "dummyalgorithm": [0, 1], "dummyalgorithm1": [0, 120], "problem": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 121], "dummyproblem": [0, 1, 3, 12, 120], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119], "construct": [0, 2, 3, 9, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, 36, 37, 39, 40, 41, 42, 43, 46, 48, 54, 56, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 77, 78, 83, 84, 95, 97, 98, 99, 100, 105, 106, 107, 108, 109, 112, 113, 116, 117], "an": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 121], "instanc": [0, 2, 3, 9, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 48, 54, 56, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 77, 78, 83, 84, 95, 97, 98, 99, 100, 105, 106, 107, 108, 109, 112, 113, 116, 117], "estim": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 118, 119, 120, 121], "add": [0, 95], "refer": [0, 79, 80, 120], "correpond": 0, "paper": 0, "here": [0, 95], "input": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119], "object": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 36, 37, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 109, 110, 114, 116, 117, 118, 119], "includ": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "all": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 109, 110, 112, 114, 116, 118, 119], "necessari": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 109, 110, 114], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118], "memory_access": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 120], "specifi": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 121], "access": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "cost": [0, 1, 2, 4, 5, 6, 7, 10, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "model": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "default": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118], "0": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 118, 119, 121], "choic": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "constant": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "1": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 118, 119, 121], "logarithm": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117], "2": [0, 1, 2, 4, 5, 6, 7, 9, 10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 92, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 119, 121], "squar": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "root": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "3": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 119, 121], "cube": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "deploi": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "custom": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "function": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "which": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "take": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "total": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "usag": [0, 1, 2, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 116], "complexity_typ": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 120], "complex": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 121], "type": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "consid": [0, 1, 2, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 46, 54, 61, 72, 95, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "tild": [0, 1, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 101, 106, 107, 108, 109, 110, 112, 114, 116, 119], "o": [0, 1, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 101, 106, 107, 108, 109, 110, 112, 114, 116, 119, 121], "exampl": [0, 4, 5, 6, 9, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 54, 57, 58, 61, 64, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 98, 99, 100, 103, 106, 108, 109, 112, 119, 120], "sage": [0, 1, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 119], "from": [0, 1, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 119, 120, 121], "import": [0, 1, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 119, 120], "dummy_problem": [0, 120], "e": [0, 2, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, 39, 40, 41, 42, 43, 44, 46, 54, 56, 61, 63, 72, 95, 103, 106, 108, 112, 113, 116, 121], "100": [0, 5, 6, 48, 49, 50, 51, 54, 57, 61, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 98, 99, 100, 103], "50": [0, 5, 6, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 98, 99, 100, 103], "dummi": [0, 1], "algorithm": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 120, 121], "properti": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116], "attack_typ": [0, 1, 4, 5, 6, 7, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 114, 120], "return": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 119], "attack": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 121], "attribut": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "_complexity_typ": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "get_optimal_parameters_dict": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "optim": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118], "dictionari": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 118], "has_optimal_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "true": [0, 1, 4, 5, 6, 7, 9, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 119], "ha": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "test": [0, 1, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 119], "basealgorithm": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 116, 120], "baseproblem": [0, 1, 3, 4, 5, 6, 7, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 113, 114, 116, 117, 120], "fals": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 96, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 112, 114, 116, 118, 119], "_memory_access": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "memory_access_cost": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "mem": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "float": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 93, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 113, 114, 117, 119], "scale": [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 114], "per": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "basic": [0, 1, 3, 4, 5, 6, 7, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 113, 114, 117], "oper": [0, 1, 3, 4, 5, 6, 7, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117], "consumpt": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "memory_complex": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "optimal_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "each": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "valu": [0, 1, 4, 5, 6, 7, 8, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 94, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 113, 114, 119], "i": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 119, 120, 121], "provid": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "comput": [0, 1, 4, 5, 6, 7, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 113, 114, 121], "done": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "those": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "optimization_parameter_1": [0, 120], "25": [0, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 54, 77, 95, 103, 112], "optimization_parameter_2": [0, 120], "optimization_parameter_3": [0, 120], "10": [0, 4, 9, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 58, 61, 64, 65, 66, 67, 68, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 98, 99, 100, 103, 106, 107, 108, 109, 110, 112, 119, 121], "parameter_nam": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "list": [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 114, 116, 119, 120], "name": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 93, 96, 98, 99, 100, 101, 104, 106, 107, 108, 109, 110, 114, 121], "parameter_rang": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "set": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 114, 121], "rang": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "ar": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 35, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "search": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120, 121], "us": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 93, 95, 97, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 120, 121], "onli": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 116], "reset": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 120], "intern": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "state": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116], "set_parameter_rang": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "str": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 119], "min_valu": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "max_valu": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "specif": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 121], "alreadi": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "must": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 119], "fall": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "lowerbound": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "inclus": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "upperbound": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "set_paramet": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "dict": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 117, 118], "predifin": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114], "subset": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 121], "time_complex": [0, 1, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 101, 106, 107, 108, 109, 110, 114, 120], "time": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 54, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 112, 114, 116, 118, 121], "problem_parameter1": [2, 3], "problem_parameter2": [2, 3], "memory_bound": [2, 9, 11, 15, 17, 33, 35, 46, 48, 54, 56, 61, 72, 74, 95, 97, 103, 112, 113, 117], "inf": [2, 9, 15, 17, 33, 35, 46, 48, 54, 61, 72, 95, 103, 112, 113, 117], "baseestim": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 120], "first": [2, 3, 21, 22, 30, 36, 119], "second": [2, 3, 23, 78, 119], "nsolut": [2, 3, 9, 11, 12, 17, 22, 33, 35, 48, 54, 56, 61, 63, 72, 74, 95, 97, 103, 105, 107, 117], "number": [2, 3, 6, 9, 11, 12, 15, 17, 18, 19, 22, 30, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 48, 50, 54, 55, 56, 61, 63, 72, 74, 92, 95, 97, 103, 105, 106, 107, 112, 113, 116, 117, 118, 119], "solut": [2, 3, 9, 11, 12, 17, 18, 21, 22, 24, 33, 35, 39, 40, 41, 42, 43, 44, 46, 48, 54, 56, 61, 63, 72, 74, 95, 97, 103, 105, 107, 113, 117], "algorithm_nam": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 120], "bit_complex": [2, 9, 12, 13, 15, 33, 46, 54, 61, 72, 95, 101, 103, 106, 107, 109, 110, 112, 114, 116, 120], "describ": [2, 9, 15, 28, 33, 46, 54, 61, 72, 95, 103, 112, 116], "its": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 121], "estimator_typ": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 120], "either": [2, 9, 15, 21, 33, 43, 46, 54, 61, 72, 95, 103, 112, 116, 119], "scheme": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 109, 112, 116, 121], "excluded_algorithms_by_default": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 120], "fastest_algorithm": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 120], "use_tilde_o_tim": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116], "smallest": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116], "\u014d": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "ignor": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116], "polynomi": [2, 9, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 46, 54, 61, 72, 95, 103, 106, 109, 112, 113, 116, 121], "factor": [2, 9, 15, 17, 33, 34, 35, 39, 40, 41, 42, 43, 46, 48, 54, 61, 72, 95, 103, 112, 113, 116], "nalgorithm": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 120], "tabl": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118, 119], "show_quantum_complex": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "show_tilde_o_tim": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "show_all_paramet": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "precis": [2, 9, 15, 33, 36, 46, 54, 61, 72, 95, 103, 112, 116, 118, 119, 120], "truncat": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118, 119], "print": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "show": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118, 120], "quantum": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "decim": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "digit": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118, 119], "output": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "rather": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "than": [2, 9, 15, 30, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118], "round": [2, 9, 15, 33, 46, 54, 61, 72, 95, 103, 112, 116, 118, 119], "contain": [3, 48], "over": [3, 19, 20, 21, 22, 23, 26, 27, 28, 30, 35, 36, 37, 48, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 98, 99, 100, 101, 105, 121], "expected_number_solut": [3, 11, 12, 17, 33, 35, 48, 56, 63, 74, 97, 105, 107, 113, 117, 120], "expect": [3, 11, 17, 35, 48, 56, 63, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 97, 98, 99, 100, 105, 107, 113, 117], "exist": [3, 11, 17, 35, 48, 56, 62, 63, 74, 97, 105, 107, 113, 117], "get_paramet": [3, 11, 17, 35, 48, 56, 63, 74, 97, 105, 113, 117, 120], "to_bitcomplexity_memori": [3, 11, 17, 35, 48, 56, 63, 74, 97, 105, 113, 117, 120], "elements_to_stor": [3, 11, 17, 35, 48, 56, 63, 74, 97, 105, 113, 117], "bit": [3, 11, 12, 13, 15, 17, 33, 35, 48, 56, 63, 74, 82, 97, 101, 105, 106, 107, 109, 110, 112, 113, 114, 116, 117], "associ": [3, 11, 12, 17, 35, 48, 56, 63, 74, 97, 105, 107, 113, 117], "given": [3, 11, 12, 13, 15, 17, 21, 28, 30, 34, 35, 48, 56, 63, 74, 97, 101, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 119], "element": [3, 11, 17, 35, 48, 56, 57, 58, 59, 61, 63, 74, 97, 105, 113, 117, 119], "store": [3, 11, 17, 19, 35, 48, 56, 63, 74, 97, 105, 113, 117], "to_bitcomplexity_tim": [3, 11, 17, 35, 48, 56, 63, 74, 97, 105, 113, 117, 120], "basic_oper": [3, 11, 17, 35, 48, 56, 63, 74, 97, 105, 113, 117], "correspond": [3, 11, 17, 35, 48, 56, 63, 74, 97, 105, 113], "certain": [3, 17, 48, 74, 113], "amount": [3, 17, 48, 74, 113], "leestim": [4, 5, 6, 7, 8, 9, 10, 11], "lealgorithm": [4, 5, 6, 7], "leproblem": [4, 5, 6, 7, 11, 57, 58, 59, 120], "bbps20": [4, 51, 121], "adapt": [4, 5, 6, 49, 50, 57, 58, 62, 93], "version": [4, 5, 6, 49, 50, 57, 58], "script": [4, 5, 6, 49, 50], "deriv": [4, 5, 6, 49, 50], "code": [4, 5, 6, 9, 10, 11, 49, 50, 54, 55, 56, 57, 58, 72, 74, 77, 82, 95, 97, 103, 105, 106, 121], "http": [4, 5, 6, 49, 50, 57, 58, 121], "github": [4, 5, 6, 49, 50, 57, 58], "com": [4, 5, 6, 49, 50, 57, 58, 121], "paolo": [4, 121], "santini": [4, 121], "less_project": 4, "peproblem": [4, 6, 49, 50, 51, 52, 56, 120], "sd_paramet": [4, 5, 6, 49, 50, 54, 61], "sdfqestim": [4, 5, 6, 49, 50, 98, 99, 100, 101, 102, 103, 104, 105], "subroutin": [4, 5, 6, 49, 50, 54], "30": [4, 9, 33, 68, 95], "20": [4, 6, 9, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 43, 46, 50, 54, 58, 72, 95, 121], "251": [4, 9], "permut": [4, 5, 6, 49, 50, 51, 54, 56, 57, 58, 59, 61, 63, 94, 102, 120, 121], "equival": [4, 5, 6, 9, 11, 49, 50, 51, 54, 56, 109, 121], "n": [4, 5, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 119, 121], "k": [4, 5, 6, 9, 10, 11, 12, 13, 15, 17, 19, 20, 21, 26, 33, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 54, 55, 56, 62, 64, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 95, 96, 97, 98, 99, 100, 103, 104, 105, 108, 112, 120, 121], "q": [4, 5, 6, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 54, 55, 56, 57, 58, 61, 62, 63, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 112, 113, 119, 121], "w": [4, 5, 6, 9, 10, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 49, 50, 54, 55, 58, 61, 62, 64, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 112, 120, 121], "A": [4, 5, 6, 9, 20, 46, 49, 50, 54, 57, 58, 61, 64, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 84, 95, 98, 100, 103, 112, 119, 121], "12": [4, 9, 15, 18, 19, 21, 22, 23, 24, 27, 28, 29, 38, 46, 95, 112], "w_prime": [4, 9, 120], "beu20": [5, 6, 49, 50, 108, 121], "wardbeullen": [5, 6, 49, 50], "less_attack": [5, 6, 49, 50], "34": [5, 54, 72], "leo82": [6, 50, 121], "codewords_needed_for_success": [6, 50], "low": [6, 39, 40, 41, 42, 43, 44, 50], "word": [6, 50, 55], "codeword": [6, 50, 121], "need": [6, 19, 50, 63, 120], "success": [6, 50], "peestim": [6, 49, 50, 51, 52, 53, 54, 55, 56], "pealgorithm": [6, 49, 50, 51, 52], "sd": 7, "verboseinform": [8, 53, 60, 94, 102, 120], "enum": [8, 47, 53, 60, 66, 68, 94, 102, 119], "isd": [8, 60, 81, 97, 105, 120, 121], "c_isd": 8, "l_prime": 8, "lists_siz": [8, 53, 120], "list_siz": [8, 53, 92], "normal_form": [8, 53, 120], "nw": [8, 62, 120], "nw_prime": 8, "int": [9, 10, 11, 15, 17, 30, 33, 35, 36, 37, 38, 46, 48, 54, 55, 56, 61, 62, 63, 72, 74, 86, 92, 95, 96, 97, 103, 104, 105, 112, 113, 119], "linear": [9, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 65, 82, 93, 106, 107, 108, 109, 110, 112, 121], "length": [9, 10, 11, 19, 46, 48, 54, 56, 72, 74, 92, 95, 97, 103, 105], "dimens": [9, 10, 11, 15, 17, 54, 56, 72, 74, 77, 95, 97, 103, 105], "field": [9, 11, 15, 17, 20, 21, 26, 27, 30, 33, 34, 35, 36, 37, 38, 46, 48, 54, 56, 61, 63, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 98, 99, 100, 103, 105, 112, 113, 116, 119, 121], "size": [9, 11, 21, 37, 54, 56, 61, 63, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98, 99, 100, 103, 105], "excluded_algorithm": [9, 12, 15, 33, 46, 54, 61, 72, 95, 103, 107, 112, 116], "tupl": [9, 12, 15, 25, 26, 33, 46, 54, 61, 72, 95, 103, 107, 112, 116], "exclud": [9, 12, 15, 33, 46, 54, 61, 72, 95, 103, 107, 112, 116], "none": [9, 15, 17, 30, 33, 35, 36, 37, 38, 46, 48, 54, 61, 72, 85, 86, 87, 88, 89, 90, 91, 95, 103, 112, 113, 116, 118], "leon": [9, 54, 120, 121], "35": [9, 33, 112], "9": [9, 12, 13, 15, 22, 28, 30, 33, 39, 40, 41, 42, 43, 44, 46, 48, 72, 84, 95, 103, 112], "beullen": [9, 54, 62, 120, 121], "29": [9, 33, 54, 95, 103], "7": [9, 15, 19, 33, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 54, 58, 61, 72, 75, 95, 100, 103, 112, 119], "14": [9, 36, 46, 54, 95, 113], "4": [9, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 61, 66, 72, 95, 103, 106, 107, 108, 109, 110, 112, 113, 119], "11": [9, 15, 33, 46, 54, 58, 82, 95, 106, 112, 119], "bbp": [9, 120], "200": [9, 48], "110": 9, "31": [9, 26, 49, 57, 61, 72, 98, 103], "long": [9, 15, 33, 54, 61, 95, 112], "103": [9, 33], "038": 9, "33": [9, 33, 46, 54], "624": 9, "58": [9, 95], "123": 9, "109": [9, 33, 46], "42": [9, 33, 49, 61, 95, 103], "252": 9, "79": [9, 95], "95": [9, 33, 95], "960": 9, "101": [9, 15, 48, 119], "59": [9, 33, 72, 112], "cost_to_find_random_2dim_subcodes_with_support_w": [10, 120], "find": [10, 18, 21, 62, 109, 121], "dimension": [10, 62], "subcod": [10, 62, 121], "support": [10, 51, 62, 121], "maximum": [11, 17, 35, 46, 48, 56, 74, 97, 113, 117], "allow": [11, 17, 35, 46, 48, 56, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 97, 113, 117], "solv": [11, 12, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 35, 39, 40, 41, 42, 43, 44, 46, 48, 56, 69, 74, 97, 107, 108, 113, 117, 121], "fq": [11, 56, 57, 58, 59, 61, 63, 101, 105, 121], "addit": [11, 35, 56, 57, 58, 59, 61, 63, 97, 105], "mayoestim": [12, 13, 15, 17], "mayoalgorithm": [12, 13], "directattack": [12, 15, 107, 112, 120], "mayoproblem": [12, 13, 17, 120], "The": [12, 21, 22, 24, 26, 27, 29, 30, 57, 58, 76, 81, 107, 108, 119, 121], "most": [12, 30, 34, 107, 119], "straightforward": [12, 107], "against": [12, 106, 107, 109], "mayo": [12, 13, 121], "direct": [12, 21, 107], "aim": [12, 107], "mq": [12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 107], "public": [12, 107, 121], "map": 12, "p": [12, 66, 68, 72, 75, 76, 77, 78, 79, 80, 81, 82, 84, 95, 98, 100, 103, 119, 120, 121], "bcchk23": [12, 121], "algebra": [12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 40, 41, 42, 43, 44, 106, 107, 108, 109, 110, 112], "obtain": [12, 39, 40, 41, 42, 43, 44], "h": [12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 36, 56, 92, 106, 107, 109, 110, 112, 121], "extern": [12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 106, 107, 109, 110, 112], "hybrid": [12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 106, 107, 109, 110, 112, 121], "lokshtanov": [12, 33, 107, 120, 121], "determin": [12, 13, 15, 28, 101, 106, 107, 109, 110, 112, 114, 119], "81": [12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 95], "furu": [12, 13], "nakamura": [12, 13], "takagi": [12, 13, 121], "strategi": [12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31], "mayo_algorithm": [12, 120], "mayo_problem": [12, 13, 120], "66": [12, 13, 15, 112], "m": [12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 57, 58, 59, 61, 62, 63, 106, 107, 108, 109, 110, 112, 113, 121], "64": [12, 13, 15, 95, 112], "8": [12, 13, 15, 19, 27, 29, 33, 43, 46, 61, 68, 72, 76, 79, 81, 95, 112, 113], "16": [12, 13, 15, 30, 33, 34, 39, 40, 41, 42, 43, 46, 48, 95, 112, 119], "get_fastest_mq_algorithm": [12, 107, 120], "fastest": 12, "linear_algebra_const": [12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44, 106, 107, 108, 109, 110, 120], "variabl": [15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 43, 82, 106, 112, 113], "oil": [15, 17, 109, 121], "space": [15, 17, 106], "whip": [15, 17], "order": [15, 17, 26, 30, 33, 34, 35, 36, 38, 46, 48, 112, 113], "finit": [15, 17, 20, 26, 30, 33, 34, 35, 36, 38, 46, 48, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98, 99, 100, 112, 113, 121], "theta": [15, 17, 33, 34, 35, 39, 40, 41, 42, 43, 48, 112, 113, 120], "expon": [15, 17, 33, 34, 35, 39, 40, 41, 42, 43, 48, 112, 113, 121], "convers": [15, 17, 34, 35, 39, 40, 41, 42, 43, 48, 112, 113], "If": [15, 17, 30, 34, 35, 48, 112, 113], "everi": [15, 17, 21, 35, 48, 112, 113], "multipl": [15, 17, 34, 35, 48, 112, 113, 121], "gf": [15, 17, 18, 19, 22, 23, 28, 35, 48, 112, 113, 119, 121], "count": [15, 17, 35, 48, 112, 113, 121], "log2": [15, 17, 35, 48, 77, 112, 113], "binari": [15, 17, 35, 48, 82, 92, 112, 113, 121], "forgeri": [15, 112], "144": [15, 46], "99": 15, "78": [15, 39, 40, 41, 42, 43, 46], "18": [15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 46, 72, 76], "158": [15, 33], "15": [15, 30, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 72, 95, 119], "96": [15, 72, 112], "209": [15, 46], "6": [15, 33, 34, 37, 39, 40, 41, 42, 43, 46, 61, 72, 95, 112], "136": 15, "133": [15, 72], "128": 15, "274": [15, 46, 54], "175": 15, "24": [15, 57, 61, 72, 95, 103, 106, 108, 112], "90": 15, "56": [15, 34], "21": [15, 46, 72, 95, 103, 119], "60": [15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 46, 54, 72], "102": 15, "72": [15, 33, 54, 72, 112], "13": [15, 33, 46, 95, 103, 112], "cost_one_hash": [17, 113, 120], "one": [17, 24, 39, 40, 41, 42, 43, 44, 57, 58, 59, 61, 63, 106, 113, 119], "hash": [17, 106, 113], "17": [17, 33, 46, 54, 112, 113], "hashes_to_basic_oper": [17, 113, 120], "number_of_hash": [17, 113], "npolynomi": [17, 35, 36, 113, 120], "nvariabl": [17, 20, 27, 29, 35, 36, 113, 120], "order_of_the_field": [17, 35, 48, 113, 120], "order_oil_spac": [17, 120], "runtim": [17, 35, 92, 113], "whipping_paramet": [17, 120], "mqestim": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38], "mqalgorithm": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31], "mqproblem": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 35, 120], "et": [18, 28], "al": [18, 28], "probabilist": [18, 22, 23, 28], "bkw19": [18, 121], "It": [18, 20, 22, 23, 28], "qudract": 18, "system": [18, 21, 22, 26, 27, 28, 30, 35, 36, 38, 108, 121], "pariti": [18, 22, 121], "mq_problem": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 120], "bj\u00f6rklund": [18, 121], "get_reduced_paramet": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 120], "lambda_": [18, 22, 33, 120], "mq_algorithm": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 120], "5": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 58, 61, 72, 95, 98, 103, 106, 107, 108, 109, 110, 112], "npolynomials_reduc": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 120], "after": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 39, 40, 41, 42, 43, 44], "appli": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 78, 105], "thoma": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 121], "wolf": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31], "nvariables_reduc": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 120], "fix": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 69], "some": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 54], "booleansolvefxl": [19, 33, 120], "booleansolv": 19, "fxl": 19, "respect": [19, 30], "bfss11": [19, 121], "ckp": [19, 121], "thei": 19, "work": [19, 20, 106], "guess": [19, 39, 40, 41, 42, 43, 44], "consist": [19, 21, 28], "result": [19, 21], "subsystem": [19, 26], "note": [19, 20, 48], "For": [19, 79, 80], "las_vega": [19, 33], "variant": [19, 33, 43, 46, 47, 72, 120], "xl": 19, "block": 19, "wiedemann": 19, "thi": [19, 20, 21, 24, 79, 109, 120], "modul": [19, 20, 24, 120], "follow": [19, 30, 106, 120], "analysi": [19, 121], "bbc": 19, "22": [19, 46, 68, 95, 112], "section": 19, "There": 19, "ani": [19, 20, 21, 106, 116], "row": [19, 46, 48, 61, 63], "macaulai": [19, 21, 43], "matrix": [19, 21, 39, 40, 41, 42, 43, 44, 48, 61, 63], "can": [19, 105, 109], "build": 19, "fly": 19, "henc": 19, "demand": 19, "domin": 19, "two": [19, 21, 92, 119], "vector": [19, 39, 40, 41, 42, 43, 44, 46, 48, 77, 92, 106], "where": [19, 26, 62, 107, 119], "column": [19, 43, 46, 48, 61, 63, 119], "cgmt": 20, "when": [20, 29], "integ": [20, 30, 34, 36, 37, 38], "2k": 20, "leq": [20, 29], "cgmt02": [20, 121], "In": [20, 21, 82], "min": [20, 56, 96, 104], "floor": 20, "sqrt": 20, "41": [20, 33, 54, 72], "jv18": [21, 121], "step": 21, "preprocess": 21, "we": [21, 95], "degre": [21, 25, 26, 30, 34, 36, 37, 38, 43, 119, 120], "d": [21, 33, 34, 36, 37, 55, 58, 61, 62, 76, 77, 120, 121], "ideal": [21, 34], "gener": [21, 24, 34, 106, 108, 109], "initi": [21, 76, 77, 78, 79, 80, 81, 82, 84], "special": [21, 22, 105, 116], "final": [21, 60], "found": [21, 24], "our": 21, "formula": [21, 24, 25, 64, 65], "dua20": [21, 121], "max_d": [21, 120], "upper": [21, 77], "bound": [21, 55, 77], "dinurfirst": [22, 33, 120], "dinur": [22, 23, 121], "din21a": [22, 23, 121], "mani": 22, "quadrat": [22, 26, 27, 30, 38, 121], "These": 22, "come": 22, "origin": [22, 57, 58], "kappa": [22, 33, 120], "dinursecond": [23, 33, 120], "din21b": [23, 121], "idea": [23, 26, 108], "n1": [23, 33, 120], "n_1": 23, "exhaustivesearch": [24, 33, 120], "exhaust": [24, 26, 121], "evalu": [24, 106], "possibl": 24, "until": 24, "shown": 24, "bcccnsy10": [24, 121], "taken": [25, 64, 65], "proposit": 25, "bfp09": [25, 26, 121], "degree_of_polynomi": [25, 26, 120], "hybridf5": [26, 33, 120], "propos": [26, 57, 109], "bfp12": [26, 121], "tradeoff": [26, 79], "between": [26, 119], "groebner": 26, "sai": 26, "grobner": 26, "f5": [26, 33, 120], "mpkc": [26, 107], "256": [26, 112], "23": [26, 33, 46, 95, 103, 112], "equat": [27, 28, 30, 34, 121], "even": [27, 107], "characterist": [27, 119], "kpg99": [27, 121], "comp": [27, 29], "183": [27, 29], "lptwy17": [28, 121], "delta": [28, 33, 120], "mht13": [29, 121], "generic_system": [30, 120], "regular": [30, 38, 74, 121], "repres": [30, 36, 38, 119], "traceback": [30, 34, 119], "recent": [30, 34, 119], "call": [30, 34, 119], "last": [30, 34, 119], "valueerror": [30, 34, 119], "defin": [30, 35], "quadratic_system": [30, 38, 120], "regular_system": [30, 120], "equal": [30, 35], "semi_regular_system": [30, 38, 120], "semi": [30, 38], "f_1": 30, "ldot": 30, "f_m": 30, "d_1": 30, "d_m": 30, "index": [30, 120], "non": [30, 34, 36, 37], "posit": [30, 36], "coeffici": [30, 36, 96, 104], "dfrac": 30, "prod_": 30, "z": [30, 92, 121], "d_i": 30, "sequenc": 30, "cdot": 30, "bigg": 30, "max": [33, 35, 48, 96, 104], "relev": [33, 116], "45": [33, 34, 46, 112], "bjorklund": [33, 120], "40": [33, 61, 72], "46": 33, "crossbr": [33, 120, 121], "37": [33, 46], "57": [33, 72], "44": [33, 54, 112], "62": 33, "87": [33, 95, 112], "39": [33, 95], "823": 33, "316": [33, 46], "339": 33, "720": 33, "174": 33, "616": 33, "32": [33, 72, 95], "111": [33, 95], "19": [33, 46, 72, 103], "493": 33, "349": 33, "801": 33, "966": 33, "27": [33, 72], "065": 33, "906": 33, "854": 33, "105": [33, 61], "68": 33, "26": [33, 121], "61": 33, "67": [33, 72], "77": 33, "71": 33, "168": 33, "tilde_o_estim": [33, 95, 112], "107": 33, "determinist": 33, "98": 33, "70": 33, "89": 33, "88": 33, "167": [33, 46, 95], "164": 33, "119": 33, "94": 33, "620": 33, "147": [33, 46], "19677": 33, "43": 33, "28": [33, 72, 95], "3057": 33, "18665241123894338": 33, "592592592592592": 33, "85": 33, "80": 33, "8765": 33, "ngate": [34, 120], "gate": 34, "prime": [34, 119], "power": [34, 109, 119], "nmonomials_of_degre": [34, 37, 120], "monomi": [34, 37], "ring": [34, 37], "modulo": 34, "nmonomials_up_to_degre": [34, 37, 120], "up": [34, 37, 77], "sum_of_binomial_coeffici": [34, 120], "l": [34, 72, 75, 76, 79, 80, 81, 82, 84, 95, 100, 103, 120, 121], "sum_": 34, "j": [34, 47, 121], "binom": [34, 96, 104, 120], "neg": [34, 37], "get_problem_paramet": [35, 120], "is_defined_over_finite_field": [35, 120], "is_overdefined_system": [35, 120], "overdefin": [35, 121], "is_square_system": [35, 120], "is_underdefined_system": [35, 120], "underdefin": [35, 121], "seri": [36, 37], "hilbertseri": [36, 120], "f_2": [36, 121], "coefficient_of_degre": [36, 120], "th": 36, "self": [36, 56, 121], "_seri": 36, "coefficient_up_to_degre": [36, 120], "x": [36, 62, 73, 92, 106, 112, 119, 120, 121], "first_nonpositive_coeffici": [36, 120], "first_nonpositive_coefficient_up_to_degre": [36, 120], "nmonomialseri": [37, 120], "max_prec": 37, "nm": 37, "f_5": 37, "126": 37, "210": [37, 95], "wit": 38, "mrestim": [39, 40, 41, 42, 43, 44, 46, 47, 48], "mralgorithm": [39, 40, 41, 42, 43, 44], "bigk": [39, 46, 120], "mrproblem": [39, 40, 41, 42, 43, 44, 48, 120], "mr_problem": [39, 40, 41, 42, 43, 44, 120], "r": [39, 40, 41, 42, 43, 44, 46, 47, 48, 62, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 120, 121], "minrank": [39, 40, 41, 42, 43, 44], "mr": [39, 40, 41, 42, 43, 44], "mr_algorithm": [39, 40, 41, 42, 43, 120], "basemralgorithm": [39, 40, 41, 42, 43, 44], "kernel": [39, 40, 41, 42, 43, 44, 57, 58, 59, 61, 63, 121], "rank": [39, 40, 41, 42, 43, 44, 46, 48], "bk": 39, "cost_reduct": [39, 40, 41, 42, 43, 44, 120], "reduc": [39, 40, 41, 42, 43, 44], "get_problem_parameters_reduc": [39, 40, 41, 42, 43, 44, 120], "lv": [39, 40, 41, 42, 43, 44, 46, 120], "entri": [39, 40, 41, 42, 43, 44], "hybridization_factor": [39, 40, 41, 42, 43, 44, 120], "bfe": 40, "kernelsearch": [41, 46, 120], "me": 42, "supportminor": [43, 46, 120], "sm": 43, "b": [43, 46, 96, 104, 120, 121], "nprime": [43, 46, 120], "select": 43, "strassen": [43, 47, 120], "block_wiedemann": [43, 46, 47, 120], "matric": [46, 48], "target": [46, 48], "mre": 46, "38": [46, 61], "132": [46, 112], "minor": [46, 120], "bruteforc": [46, 120], "154": 46, "143": [46, 95], "142": [46, 95], "165": [46, 112], "159": 46, "230": 46, "162": 46, "169": [46, 112], "207": 46, "431": 46, "211": 46, "55": 46, "216": 46, "236": [46, 61], "231": 46, "351": 46, "237": 46, "242": 46, "189": [46, 112], "51": [46, 54], "269": 46, "452": 46, "278": 46, "254": 46, "301": [46, 112], "302": [46, 54], "425": 46, "307": 46, "enumer": [47, 60, 106], "deteterminant_of_a": [47, 120], "t": [47, 121], "entry_i_j_of_a": [47, 120], "matrix_a": [47, 120], "pr": 47, "minors_polynomi": [47, 120], "n_reduc": 47, "k_reduc": 47, "minors_seri": [47, 120], "length_solution_vector": [48, 120], "mrp": 48, "ncolumn": [48, 120], "nmatric": [48, 120], "nrow": [48, 120], "target_rank": [48, 120], "58496250072116": 48, "202": 48, "97842293847626": 48, "split": [51, 121], "sen06": [51, 121], "rough": 51, "accord": 51, "pe": 52, "list_comput": [53, 120], "norm_form": 53, "sdestim": [54, 61, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "718": 54, "631": 54, "901": 54, "ssa": [54, 120], "127": [54, 72, 119], "480": 54, "040": 54, "150": [54, 68, 95], "82": 54, "588": 54, "601": 54, "962": 54, "308": 54, "551": 54, "377": 54, "gv_distanc": [55, 120], "gilbert": 55, "varsharmov": 55, "hamming_bal": [55, 120], "median_size_of_random_orbit": [55, 120], "number_of_weight_d_codeword": [55, 120], "weight": [55, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 92, 95, 97, 98, 99, 100, 103, 105, 121], "random_sparse_vec_orbit": [55, 120], "hull": 56, "assum": 56, "weakli": 56, "dual": 56, "pkestim": [57, 58, 59, 60, 61, 62, 63], "pkalgorithm": [57, 58, 59], "pkproblem": [57, 58, 59, 63, 120], "kmp19": [57, 121], "accompani": [57, 58], "sbc22": [57, 58, 121], "secomm": [57, 58], "pkpattack": [57, 58], "ell": [57, 58, 61, 63, 64, 66, 68, 72, 120], "cost_for_list_oper": [57, 58, 59, 61], "sbc": [57, 59, 61, 120], "memory_for_list_el": [57, 58, 59, 61], "u": [57, 60, 61, 120, 121], "kmp": [58, 59, 61, 120], "w1": [58, 61, 77, 80, 95, 120], "kmp_final_list": [60, 120], "kmp_l1": [60, 120], "l1": [60, 77, 78, 79, 95, 120], "kmp_l2": [60, 120], "l2": [60, 77, 78], "sbc_isd": [60, 120], "sbc_u": [60, 120], "whose": [61, 63], "should": [61, 63, 95, 116], "lie": [61, 63], "option": 61, "argument": 61, "use_parity_row": [61, 63], "enabl": [61, 63], "trick": [61, 63], "append": [61, 63], "extra": [61, 63], "146": 61, "137": 61, "243": 61, "808": [61, 103], "722": 61, "241": 61, "319": [61, 103, 121], "beullens_lee_brickell_adapt": [62, 120], "run": 62, "leebrickel": [62, 103, 120], "cost_for_finding_subcod": [62, 120], "them": 62, "gauss_binomi": [62, 120], "lof": [62, 120], "regsdestim": [64, 65, 66, 67, 68, 69, 70, 72, 73, 74], "regsdalgorithm": [64, 65, 66, 67, 68, 69, 70], "regsdproblem": [64, 65, 66, 67, 68, 69, 70, 74, 120], "ccj23": [64, 65, 121], "concret": [64, 65], "es23": [64, 65, 66, 67, 68, 121], "regsd": [64, 65, 66, 67, 68, 69, 70], "ccjlin": [65, 72, 120], "ccj": [65, 72, 120], "regularisdenum": [66, 72, 120], "regularisd": [66, 67, 68], "todo": [66, 69, 95], "updat": 66, "regularisdperm": [67, 72, 120], "perm": 67, "regularisdrep": [68, 72, 120], "depth": [68, 72, 76, 77, 78, 79, 80, 82, 86, 87, 89, 95, 120], "rep": 68, "300": 68, "eps_x": [68, 72, 120], "eps_i": [68, 72, 120], "sdattack": [69, 72, 120], "perform": 69, "reason": 69, "now": 69, "bjmm": [69, 72, 77, 78, 79, 82, 95, 120], "error": [72, 74, 77, 95, 97, 103, 105, 121], "954": 72, "582": 72, "106": 72, "114": 72, "112": [72, 112], "129": [72, 103], "118": 72, "148": [72, 112], "155": 72, "p1": [72, 76, 77, 78, 79, 80, 82, 95, 120], "212": 72, "2320": 72, "1210": 72, "75": 72, "74": 72, "83": 72, "r_int": [73, 120], "syndrom": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 105, 121], "decod": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95, 97, 98, 99, 100, 101, 105, 121], "sdalgorithm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 95], "ballcollis": [75, 95, 120], "sdproblem": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 97, 98, 99, 100, 120], "ball": [75, 85, 121], "collis": [75, 85, 106, 121], "introduc": [75, 76, 81, 82], "blp11": [75, 121], "distribut": [75, 76, 77, 78, 79, 81, 82, 83, 84, 98, 99, 100], "2p": [75, 76, 79, 80, 81, 82, 84, 100], "2pl": 75, "pl": [75, 95, 120], "m4ri": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "gaussian": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "elimin": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "predefin": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "do": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "modifi": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "again": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "wa": [76, 81], "bjmm12": [76, 77, 78, 79, 121], "extens": 76, "mmt11": [76, 77, 78, 79, 121], "initialize_parameter_rang": [76, 77, 78, 79, 80, 81, 82, 84, 120], "p2": [76, 80, 82, 95, 120], "restart": [76, 82], "process": [76, 77, 78, 79, 80, 81, 82, 84], "bjmmd2": [76, 95, 120], "bjmm_depth_2": 76, "start": [76, 77, 78, 79, 80, 81, 82, 84], "optimis": [76, 77, 78, 79, 80, 81, 82, 84, 119], "bjmmd3": [76, 95, 120], "bjmm_depth_3": 76, "bjmmdw": [77, 78, 95, 120], "isjoint": 77, "eight": 77, "combin": [77, 108], "mitm": [77, 78, 80], "nearest": [77, 82, 87, 89, 92, 121], "neighbor": [77, 82, 87, 89, 121], "eb22": [77, 78, 121], "w2": [77, 78, 80, 95, 120], "ham": 77, "avail": 77, "unlimit": 77, "hmap": [77, 93], "indic": [77, 93, 101, 114], "hashmap": [77, 93, 101], "being": [77, 93], "p_rang": 77, "interv": 77, "help": 77, "speed": 77, "disjoint": [77, 78], "w11": [77, 120], "bjmmpdw": [78, 95, 120], "partial": 78, "explicit": 78, "nn": [78, 80], "level": 78, "bjmmplu": [79, 95, 120], "incorpor": 79, "improv": [79, 121], "ez23": [79, 121], "regard": 79, "term": 79, "further": [79, 80], "see": [79, 80], "bothmai": [80, 95, 120], "both": [80, 87, 121], "mai": [80, 82, 87, 89, 92, 121], "indyk": 80, "motwani": 80, "bm18": [80, 121], "dum91": [81, 121], "mayozerov": [82, 95, 120], "ozerov": [82, 87, 89, 92, 121], "mo15": [82, 92, 121], "secur": [82, 121], "asymptot": [82, 92, 121], "mayozerovd2": [82, 95, 120], "On": [82, 121], "applic": [82, 121], "annual": 82, "confer": 82, "theori": [82, 121], "cryptograph": 82, "techniqu": 82, "pp": 82, "203": 82, "228": 82, "springer": [82, 121], "2015": 82, "mayozerov_depth_2": 82, "mayozerovd3": [82, 95, 120], "mayozerov_depth_3": 82, "pra62": [83, 99, 121], "ste88": [84, 100, 121], "blp08": [84, 100, 121], "sdworkfactormodel": [85, 86, 87, 88, 89, 90, 91, 92], "ballcollisionscipymodel": [85, 120], "par_nam": [85, 86, 87, 88, 89, 90, 91], "iter": [85, 86, 87, 88, 89, 90, 91], "accuraci": [85, 86, 87, 88, 89, 90, 91], "scipymodel": [85, 86, 87, 88, 89, 90, 91], "workfactor": [85, 86, 87, 88, 89, 90, 91], "get_time_memory_and_paramet": [85, 86, 87, 88, 89, 90, 91, 120], "bjmmscipymodel": [86, 120], "bothmayscipymodel": [87, 120], "dumerscipymodel": [88, 120], "mayozerovscipymodel": [89, 120], "prangescipymodel": [90, 120], "sternscipymodel": [91, 120], "binary_entropi": [92, 120], "c": [92, 121], "entropi": 92, "binomial_approxim": [92, 120], "binomi": [92, 96, 104], "coefficietn": 92, "via": 92, "sterl": 92, "approxim": 92, "inverse_binary_entropi": [92, 120], "v": [92, 121], "invers": 92, "eg": 92, "uniqu": 92, "list_of_random_tupl": [92, 120], "y": [92, 106, 112, 120, 121], "may_ozerov_near_neighbor_tim": [92, 120], "vector_length": 92, "target_weight": 92, "neighbour": 92, "representations_asymptot": [92, 120], "weight_to_cancel": 92, "represent": [92, 94, 102, 120], "sum": [92, 121], "wrap": [92, 120], "f": [92, 121], "g": [92, 121], "helper": [92, 120], "scipi": 92, "framework": 92, "var_rang": 93, "sort": [93, 101], "constraint": [94, 102, 120], "gauss": [94, 102, 120], "tree": [94, 102, 120], "mayb": 95, "optional_paramet": 95, "may_ozerov": [95, 120], "dumer": [95, 120, 121], "prang": [95, 103, 120, 121], "stern": [95, 103, 120, 121], "workfactor_accuraci": 95, "3488": 95, "2720": 95, "151": [95, 103], "460": 95, "49": 95, "814": 95, "448": 95, "86": 95, "221": 95, "141": [95, 112], "886": 95, "104": 95, "057": 95, "197": 95, "97": 95, "541": 95, "711": 95, "995": 95, "380": 95, "019": 95, "47": [95, 112], "140": [95, 98, 103], "795": 95, "592": 95, "173": 95, "388": 95, "576": 95, "409": 95, "153": [95, 112], "405": 95, "587": 95, "217": [95, 112], "600": 95, "191": 95, "619": 95, "602": 95, "152": 95, "059": [95, 103], "172": 95, "385": 95, "608": 95, "092": 95, "447": 95, "015": 95, "min_max": [96, 104, 120], "bool": [96, 104, 119], "depend": [96, 104], "switch": [96, 104], "paramt": [97, 105], "sdfqalgorithm": [98, 99, 100, 101], "sdfqproblem": [98, 99, 100, 101, 105, 120], "lee": [98, 121], "brickel": [98, 121], "lb88": [98, 121], "961": [98, 103], "771": [98, 103], "48": [98, 103], "31928490910389": 98, "pet11": [100, 121], "hmp": 101, "match": 101, "310": 103, "794": 103, "016": 103, "basefield": 105, "is_syndrome_zero": 105, "uovestim": [106, 107, 108, 109, 110, 112, 113], "uovalgorithm": [106, 107, 108, 109, 110], "collisionattack": [106, 112, 120], "uovproblem": [106, 107, 108, 109, 110, 113, 120], "signatur": [106, 109, 121], "sign": 106, "paradigm": 106, "gray_code_eval_cost": 106, "grai": 106, "log": 106, "preimag": 106, "salt": 106, "uov": [106, 107, 109, 110], "uov_problem": [106, 107, 108, 109, 110, 120], "958": 106, "uov_algorithm": [106, 107, 108, 109, 120], "cryptosystem": [107, 121], "kei": [107, 109, 112, 121], "tw12": 107, "intersectionattack": [108, 112, 120], "intersect": 108, "behind": 108, "kipni": [108, 109, 121], "shamir": [108, 109, 121], "approach": [108, 121], "reconcili": 108, "kipnisshamir": [109, 112, 120], "_": 109, "balanc": 109, "vinegar": [109, 121], "2v": 109, "privat": 109, "arbitrari": 109, "messag": 109, "recoveri": 112, "54": 112, "968": 112, "507": 112, "145": 112, "218": 112, "181": 112, "180": 112, "389": 112, "976": 112, "76": 112, "160": 112, "53": 112, "131": 112, "618": 112, "121": 112, "747": 112, "176": 112, "184": 112, "348": 112, "293": 112, "292": 112, "034": 112, "282": 112, "331": 112, "249": 112, "117": 112, "244": 112, "277": 112, "108": 112, "445": 112, "397": 112, "387": 112, "826": 112, "378": 112, "539": 112, "311": 112, "func": 114, "decor": 114, "method": [114, 121], "basealgoritm": 114, "subclass": [114, 116], "alg": 116, "prob": 116, "include_tildeo": 116, "tildeo": [116, 119, 120], "esim": 116, "include_quantum": 116, "quyantum": 116, "estimationrender": [118, 120], "creat": 118, "render": 118, "as_tabl": [118, 120], "estimation_result": 118, "complexitytyp": [119, 120], "distinguish": 119, "normal": 119, "concat_all_t": [119, 120], "concaten": 119, "singl": 119, "prettyt": 119, "concat_pretty_t": [119, 120], "t1": 119, "t2": 119, "merg": 119, "gf_order_to_characterist": [119, 120], "galoi": 119, "gf_order_to_degre": [119, 120], "is_power_of_two": [119, 120], "check": 119, "is_prime_pow": [119, 120], "return_pair": 119, "1121": 119, "1087": 119, "1091": 119, "round_or_trunc": [119, 120], "eiter": 119, "els": 119, "decimi": 119, "sampl": 120, "manual": 120, "To": 120, "you": 120, "minim": 120, "document": [120, 121], "sagemath": 120, "guidelin": 120, "base_estim": 120, "base_algorithm": 120, "estimation_render": 120, "base_const": 120, "base_problem": 120, "pk_helper": 120, "pk_problem": 120, "pk_constant": 120, "pk_estim": 120, "pk_algorithm": 120, "uov_const": 120, "uov_estim": 120, "collision_attack": 120, "intersection_attack": 120, "kipnis_shamir": 120, "direct_attack": 120, "sd_estim": 120, "sd_algorithm": 120, "sd_constant": 120, "sd_helper": 120, "sd_problem": 120, "bjmm_pdw": 120, "bjmm_dw": 120, "ball_collis": 120, "both_mai": 120, "bjmm_plu": 120, "workfactor_help": 120, "mayo_help": 120, "mayo_const": 120, "mayo_estim": 120, "pe_estim": 120, "pe_algorithm": 120, "pe_help": 120, "pe_problem": 120, "pe_const": 120, "mr_estim": 120, "mr_constant": 120, "mr_helper": 120, "kernel_search": 120, "support_minor": 120, "big_k": 120, "dummy_algorithm": 120, "dummy_estim": 120, "dummy_algorithm1": 120, "le_const": 120, "le_algorithm": 120, "le_help": 120, "le_estim": 120, "le_problem": 120, "sdfq_estim": 120, "sdfq_problem": 120, "sdfq_algorithm": 120, "sdfq_helper": 120, "sdfq_constant": 120, "regsd_algorithm": 120, "regsd_help": 120, "regsd_const": 120, "regsd_problem": 120, "regsd_estim": 120, "ccj_lin": 120, "regisd_perm": 120, "regisd_enum": 120, "regisd_rep": 120, "sd_attack": 120, "degree_of_regular": 120, "witness_degre": 120, "mq_constant": 120, "mq_estim": 120, "mq_helper": 120, "hilbert": 120, "nmonomi": 120, "booleansolve_fxl": 120, "cgmta": 120, "kpg": 120, "exhaustive_search": 120, "dinur1": 120, "hybrid_f5": 120, "dinur2": 120, "mht": 120, "bibliograph": 120, "page": 120, "andrea": 121, "petteri": 121, "kaski": 121, "ryan": 121, "william": 121, "reduct": 121, "drop": 121, "dagstuhl": 121, "de": 121, "opu": 121, "volltext": 121, "2019": 121, "10602": 121, "pdf": 121, "lipic": 121, "icalp": 121, "antoin": 121, "joux": 121, "vanessa": 121, "vits": 121, "boolean": 121, "link": 121, "chapter": 121, "1007": 121, "978": 121, "76620": 121, "1_1": 121, "andr": 121, "esser": 121, "Not": 121, "just": 121, "eprint": 121, "iacr": 121, "org": 121, "2023": 121, "1568": 121, "aviad": 121, "jacqu": 121, "patarin": 121, "loui": 121, "goubin": 121, "unbalanc": 121, "540": 121, "48910": 121, "x_15": 121, "alessandro": 121, "barenghi": 121, "jean": 121, "francoi": 121, "biass": 121, "edoardo": 121, "persichetti": 121, "less": 121, "fm": 121, "fine": 121, "tune": 121, "doi": 121, "030": 121, "81293": 121, "5_2": 121, "floyd": 121, "zweyding": 121, "new": 121, "trade": 121, "off": 121, "practic": 121, "2022": 121, "1329": 121, "emanuel": 121, "bellini": 121, "2021": 121, "1243": 121, "alexand": 121, "ilya": 121, "662": 121, "46800": 121, "5_9": 121, "meurer": 121, "enrico": 121, "random": 121, "054n": 121, "642": 121, "25385": 121, "0_6": 121, "anja": 121, "becker": 121, "how": 121, "inform": 121, "2012": 121, "026": 121, "christian": 121, "peter": 121, "12929": 121, "2_7": 121, "charl": 121, "bouillaguet": 121, "hsieh": 121, "chung": 121, "chen": 121, "mou": 121, "cheng": 121, "tung": 121, "chou": 121, "ruben": 121, "niederhagen": 121, "adi": 121, "bo": 121, "yin": 121, "yang": 121, "fast": 121, "www": 121, "archiv": 121, "ches2010": 121, "62250195": 121, "daniel": 121, "bernstein": 121, "tanja": 121, "lang": 121, "defend": 121, "mceliec": 121, "88403": 121, "3_3": 121, "smaller": 121, "22792": 121, "9_42": 121, "ramamohan": 121, "paturi": 121, "suguru": 121, "tamaki": 121, "huacheng": 121, "yu": 121, "beat": 121, "brute": 121, "forc": 121, "peopl": 121, "csail": 121, "mit": 121, "edu": 121, "rrw": 121, "polyeqsoda2017submit": 121, "eliana": 121, "carozza": 121, "geoffroi": 121, "couteau": 121, "short": 121, "head": 121, "eurocrypt": 121, "1035": 121, "elian": 121, "koussa": 121, "gill": 121, "macario": 121, "rat": 121, "412": 121, "eugen": 121, "cyclic": 121, "1109": 121, "tit": 121, "1962": 121, "1057777": 121, "hiroyuki": 121, "miura": 121, "yasufumi": 121, "hashimoto": 121, "tsuyoshi": 121, "extend": 121, "multivari": 121, "38616": 121, "9_8": 121, "minimum": 121, "distanc": 121, "itai": 121, "arxiv": 121, "2005": 121, "04800": 121, "cryptanalyt": 121, "578": 121, "small": 121, "bfb0019850": 121, "jo\u00e3o": 121, "diogo": 121, "duart": 121, "jeffrei": 121, "automorph": 121, "group": 121, "correct": 121, "1982": 121, "1056498": 121, "luk": 121, "bettal": 121, "faug\u00e8r": 121, "ludov": 121, "perret": 121, "1515": 121, "jmc": 121, "2009": 121, "009": 121, "1145": 121, "2442829": 121, "2442843": 121, "leif": 121, "high": 121, "rate": 121, "impact": 121, "lpn": 121, "2017": 121, "1139": 121, "magali": 121, "bardet": 121, "bruno": 121, "salvi": 121, "pierr": 121, "spaenlehau": 121, "sciencedirect": 121, "scienc": 121, "articl": 121, "pii": 121, "s0885064x12000611": 121, "nicola": 121, "courtoi": 121, "klimov": 121, "effici": 121, "eurocrypt2000": 121, "1807": 121, "18070398": 121, "willi": 121, "meier": 121, "tacier": 121, "45664": 121, "3_15": 121, "sendrier": 121, "hal": 121, "inria": 121, "fr": 121, "00073037": 121, "pil": 121, "joong": 121, "ernest": 121, "observ": 121, "45961": 121, "8_25": 121, "marco": 121, "baldi": 121, "franco": 121, "chiaraluc": 121, "hard": 121, "1749": 121, "ward": 121, "enough": 121, "81652": 121, "0_15": 121, "fabio": 121, "campo": 121, "sof\u0131": 121, "celi": 121, "basil": 121, "hess": 121, "matthia": 121, "kannwisch": 121, "pqmayo": 121, "asset": 121, "spec": 121}, "objects": {"cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[0, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[0, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[0, 2, 1, "", "attack_type"], [0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_access_cost"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "optimization_parameter_1"], [0, 3, 1, "", "optimization_parameter_2"], [0, 3, 1, "", "optimization_parameter_3"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator": [[1, 0, 0, "-", "dummy_algorithm"], [2, 0, 0, "-", "dummy_estimator"], [3, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[1, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[1, 2, 1, "", "attack_type"], [1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_access_cost"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[2, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[2, 3, 1, "", "algorithm_names"], [2, 3, 1, "", "algorithms"], [2, 2, 1, "", "bit_complexities"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "estimate"], [2, 2, 1, "", "estimator_type"], [2, 4, 1, "", "excluded_algorithms_by_default"], [2, 3, 1, "", "fastest_algorithm"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "nalgorithms"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[3, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[3, 3, 1, "", "expected_number_solutions"], [3, 3, 1, "", "get_parameters"], [3, 3, 1, "", "to_bitcomplexity_memory"], [3, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.LEEstimator.LEAlgorithms": [[4, 0, 0, "-", "bbps"], [5, 0, 0, "-", "beullens"], [6, 0, 0, "-", "leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps": [[4, 1, 1, "", "BBPS"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS": [[4, 2, 1, "", "attack_type"], [4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "get_optimal_parameters_dict"], [4, 3, 1, "", "has_optimal_parameter"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "memory_access_cost"], [4, 3, 1, "", "memory_complexity"], [4, 3, 1, "", "optimal_parameters"], [4, 3, 1, "", "parameter_names"], [4, 2, 1, "", "parameter_ranges"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "set_parameter_ranges"], [4, 3, 1, "", "set_parameters"], [4, 3, 1, "", "time_complexity"], [4, 3, 1, "", "w"], [4, 3, 1, "", "w_prime"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens": [[5, 1, 1, "", "Beullens"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens": [[5, 2, 1, "", "attack_type"], [5, 2, 1, "", "complexity_type"], [5, 3, 1, "", "get_optimal_parameters_dict"], [5, 3, 1, "", "has_optimal_parameter"], [5, 2, 1, "", "memory_access"], [5, 3, 1, "", "memory_access_cost"], [5, 3, 1, "", "memory_complexity"], [5, 3, 1, "", "optimal_parameters"], [5, 3, 1, "", "parameter_names"], [5, 2, 1, "", "parameter_ranges"], [5, 3, 1, "", "reset"], [5, 3, 1, "", "set_parameter_ranges"], [5, 3, 1, "", "set_parameters"], [5, 3, 1, "", "time_complexity"], [5, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon": [[6, 1, 1, "", "Leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon": [[6, 2, 1, "", "attack_type"], [6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "get_optimal_parameters_dict"], [6, 3, 1, "", "has_optimal_parameter"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "memory_access_cost"], [6, 3, 1, "", "memory_complexity"], [6, 3, 1, "", "optimal_parameters"], [6, 3, 1, "", "parameter_names"], [6, 2, 1, "", "parameter_ranges"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "set_parameter_ranges"], [6, 3, 1, "", "set_parameters"], [6, 3, 1, "", "time_complexity"], [6, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator": [[7, 0, 0, "-", "le_algorithm"], [8, 0, 0, "-", "le_constants"], [9, 0, 0, "-", "le_estimator"], [10, 0, 0, "-", "le_helper"], [11, 0, 0, "-", "le_problem"]], "cryptographic_estimators.LEEstimator.le_algorithm": [[7, 1, 1, "", "LEAlgorithm"]], "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm": [[7, 2, 1, "", "attack_type"], [7, 2, 1, "", "complexity_type"], [7, 3, 1, "", "get_optimal_parameters_dict"], [7, 3, 1, "", "has_optimal_parameter"], [7, 2, 1, "", "memory_access"], [7, 3, 1, "", "memory_access_cost"], [7, 3, 1, "", "memory_complexity"], [7, 3, 1, "", "optimal_parameters"], [7, 3, 1, "", "parameter_names"], [7, 2, 1, "", "parameter_ranges"], [7, 3, 1, "", "reset"], [7, 3, 1, "", "set_parameter_ranges"], [7, 3, 1, "", "set_parameters"], [7, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator.le_constants": [[8, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation": [[8, 4, 1, "", "ISD"], [8, 4, 1, "", "LISTS"], [8, 4, 1, "", "LISTS_SIZE"], [8, 4, 1, "", "NORMAL_FORM"], [8, 4, 1, "", "NW"]], "cryptographic_estimators.LEEstimator.le_estimator": [[9, 1, 1, "", "LEEstimator"]], "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator": [[9, 3, 1, "", "algorithm_names"], [9, 3, 1, "", "algorithms"], [9, 2, 1, "", "bit_complexities"], [9, 2, 1, "", "complexity_type"], [9, 3, 1, "", "estimate"], [9, 2, 1, "", "estimator_type"], [9, 4, 1, "", "excluded_algorithms_by_default"], [9, 3, 1, "", "fastest_algorithm"], [9, 2, 1, "", "memory_access"], [9, 3, 1, "", "nalgorithms"], [9, 3, 1, "", "reset"], [9, 3, 1, "", "table"]], "cryptographic_estimators.LEEstimator.le_helper": [[10, 5, 1, "", "cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.LEEstimator.le_problem": [[11, 1, 1, "", "LEProblem"]], "cryptographic_estimators.LEEstimator.le_problem.LEProblem": [[11, 3, 1, "", "expected_number_solutions"], [11, 3, 1, "", "get_parameters"], [11, 3, 1, "", "to_bitcomplexity_memory"], [11, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms": [[12, 0, 0, "-", "direct_attack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack": [[12, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack": [[12, 3, 1, "", "K"], [12, 2, 1, "", "attack_type"], [12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "get_fastest_mq_algorithm"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "has_optimal_parameter"], [12, 3, 1, "", "linear_algebra_constant"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_access_cost"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator": [[13, 0, 0, "-", "mayo_algorithm"], [14, 0, 0, "-", "mayo_constants"], [15, 0, 0, "-", "mayo_estimator"], [16, 0, 0, "-", "mayo_helper"], [17, 0, 0, "-", "mayo_problem"]], "cryptographic_estimators.MAYOEstimator.mayo_algorithm": [[13, 1, 1, "", "MAYOAlgorithm"]], "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm": [[13, 3, 1, "", "K"], [13, 2, 1, "", "attack_type"], [13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "has_optimal_parameter"], [13, 3, 1, "", "linear_algebra_constant"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_access_cost"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.mayo_estimator": [[15, 1, 1, "", "MAYOEstimator"]], "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator": [[15, 3, 1, "", "algorithm_names"], [15, 3, 1, "", "algorithms"], [15, 2, 1, "", "bit_complexities"], [15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "estimate"], [15, 2, 1, "", "estimator_type"], [15, 4, 1, "", "excluded_algorithms_by_default"], [15, 3, 1, "", "fastest_algorithm"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "nalgorithms"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "table"]], "cryptographic_estimators.MAYOEstimator.mayo_problem": [[17, 1, 1, "", "MAYOProblem"]], "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem": [[17, 2, 1, "", "cost_one_hash"], [17, 3, 1, "", "expected_number_solutions"], [17, 3, 1, "", "get_parameters"], [17, 3, 1, "", "hashes_to_basic_operations"], [17, 3, 1, "", "npolynomials"], [17, 3, 1, "", "nvariables"], [17, 3, 1, "", "order_of_the_field"], [17, 3, 1, "", "order_oil_space"], [17, 2, 1, "", "theta"], [17, 3, 1, "", "to_bitcomplexity_memory"], [17, 3, 1, "", "to_bitcomplexity_time"], [17, 3, 1, "", "whipping_parameter"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[18, 0, 0, "-", "bjorklund"], [19, 0, 0, "-", "booleansolve_fxl"], [20, 0, 0, "-", "cgmta"], [21, 0, 0, "-", "crossbred"], [22, 0, 0, "-", "dinur1"], [23, 0, 0, "-", "dinur2"], [24, 0, 0, "-", "exhaustive_search"], [25, 0, 0, "-", "f5"], [26, 0, 0, "-", "hybrid_f5"], [27, 0, 0, "-", "kpg"], [28, 0, 0, "-", "lokshtanov"], [29, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[18, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[18, 2, 1, "", "attack_type"], [18, 2, 1, "", "complexity_type"], [18, 3, 1, "", "get_optimal_parameters_dict"], [18, 3, 1, "", "get_reduced_parameters"], [18, 3, 1, "", "has_optimal_parameter"], [18, 3, 1, "", "lambda_"], [18, 3, 1, "", "linear_algebra_constant"], [18, 2, 1, "", "memory_access"], [18, 3, 1, "", "memory_access_cost"], [18, 3, 1, "", "memory_complexity"], [18, 3, 1, "", "npolynomials_reduced"], [18, 3, 1, "", "nvariables_reduced"], [18, 3, 1, "", "optimal_parameters"], [18, 3, 1, "", "parameter_names"], [18, 2, 1, "", "parameter_ranges"], [18, 3, 1, "", "reset"], [18, 3, 1, "", "set_parameter_ranges"], [18, 3, 1, "", "set_parameters"], [18, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl": [[19, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL": [[19, 2, 1, "", "attack_type"], [19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "get_optimal_parameters_dict"], [19, 3, 1, "", "get_reduced_parameters"], [19, 3, 1, "", "has_optimal_parameter"], [19, 3, 1, "", "k"], [19, 3, 1, "", "linear_algebra_constant"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "memory_access_cost"], [19, 3, 1, "", "memory_complexity"], [19, 3, 1, "", "npolynomials_reduced"], [19, 3, 1, "", "nvariables_reduced"], [19, 3, 1, "", "optimal_parameters"], [19, 3, 1, "", "parameter_names"], [19, 2, 1, "", "parameter_ranges"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "set_parameter_ranges"], [19, 3, 1, "", "set_parameters"], [19, 3, 1, "", "time_complexity"], [19, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[20, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[20, 2, 1, "", "attack_type"], [20, 2, 1, "", "complexity_type"], [20, 3, 1, "", "get_optimal_parameters_dict"], [20, 3, 1, "", "get_reduced_parameters"], [20, 3, 1, "", "has_optimal_parameter"], [20, 3, 1, "", "linear_algebra_constant"], [20, 2, 1, "", "memory_access"], [20, 3, 1, "", "memory_access_cost"], [20, 3, 1, "", "memory_complexity"], [20, 3, 1, "", "npolynomials_reduced"], [20, 3, 1, "", "nvariables_reduced"], [20, 3, 1, "", "optimal_parameters"], [20, 3, 1, "", "parameter_names"], [20, 2, 1, "", "parameter_ranges"], [20, 3, 1, "", "reset"], [20, 3, 1, "", "set_parameter_ranges"], [20, 3, 1, "", "set_parameters"], [20, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[21, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[21, 3, 1, "", "D"], [21, 2, 1, "", "attack_type"], [21, 2, 1, "", "complexity_type"], [21, 3, 1, "", "d"], [21, 3, 1, "", "get_optimal_parameters_dict"], [21, 3, 1, "", "get_reduced_parameters"], [21, 3, 1, "", "has_optimal_parameter"], [21, 3, 1, "", "k"], [21, 3, 1, "", "linear_algebra_constant"], [21, 2, 1, "", "max_D"], [21, 2, 1, "", "memory_access"], [21, 3, 1, "", "memory_access_cost"], [21, 3, 1, "", "memory_complexity"], [21, 3, 1, "", "npolynomials_reduced"], [21, 3, 1, "", "nvariables_reduced"], [21, 3, 1, "", "optimal_parameters"], [21, 3, 1, "", "parameter_names"], [21, 2, 1, "", "parameter_ranges"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "set_parameter_ranges"], [21, 3, 1, "", "set_parameters"], [21, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[22, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[22, 2, 1, "", "attack_type"], [22, 2, 1, "", "complexity_type"], [22, 3, 1, "", "get_optimal_parameters_dict"], [22, 3, 1, "", "get_reduced_parameters"], [22, 3, 1, "", "has_optimal_parameter"], [22, 3, 1, "", "kappa"], [22, 3, 1, "", "lambda_"], [22, 3, 1, "", "linear_algebra_constant"], [22, 2, 1, "", "memory_access"], [22, 3, 1, "", "memory_access_cost"], [22, 3, 1, "", "memory_complexity"], [22, 3, 1, "", "npolynomials_reduced"], [22, 3, 1, "", "nvariables_reduced"], [22, 3, 1, "", "optimal_parameters"], [22, 3, 1, "", "parameter_names"], [22, 2, 1, "", "parameter_ranges"], [22, 3, 1, "", "reset"], [22, 3, 1, "", "set_parameter_ranges"], [22, 3, 1, "", "set_parameters"], [22, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[23, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[23, 2, 1, "", "attack_type"], [23, 2, 1, "", "complexity_type"], [23, 3, 1, "", "get_optimal_parameters_dict"], [23, 3, 1, "", "get_reduced_parameters"], [23, 3, 1, "", "has_optimal_parameter"], [23, 3, 1, "", "linear_algebra_constant"], [23, 2, 1, "", "memory_access"], [23, 3, 1, "", "memory_access_cost"], [23, 3, 1, "", "memory_complexity"], [23, 3, 1, "", "n1"], [23, 3, 1, "", "npolynomials_reduced"], [23, 3, 1, "", "nvariables_reduced"], [23, 3, 1, "", "optimal_parameters"], [23, 3, 1, "", "parameter_names"], [23, 2, 1, "", "parameter_ranges"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "set_parameter_ranges"], [23, 3, 1, "", "set_parameters"], [23, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[24, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[24, 2, 1, "", "attack_type"], [24, 2, 1, "", "complexity_type"], [24, 3, 1, "", "get_optimal_parameters_dict"], [24, 3, 1, "", "get_reduced_parameters"], [24, 3, 1, "", "has_optimal_parameter"], [24, 3, 1, "", "linear_algebra_constant"], [24, 2, 1, "", "memory_access"], [24, 3, 1, "", "memory_access_cost"], [24, 3, 1, "", "memory_complexity"], [24, 3, 1, "", "npolynomials_reduced"], [24, 3, 1, "", "nvariables_reduced"], [24, 3, 1, "", "optimal_parameters"], [24, 3, 1, "", "parameter_names"], [24, 2, 1, "", "parameter_ranges"], [24, 3, 1, "", "reset"], [24, 3, 1, "", "set_parameter_ranges"], [24, 3, 1, "", "set_parameters"], [24, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[25, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[25, 2, 1, "", "attack_type"], [25, 2, 1, "", "complexity_type"], [25, 3, 1, "", "degree_of_polynomials"], [25, 3, 1, "", "get_optimal_parameters_dict"], [25, 3, 1, "", "get_reduced_parameters"], [25, 3, 1, "", "has_optimal_parameter"], [25, 3, 1, "", "linear_algebra_constant"], [25, 2, 1, "", "memory_access"], [25, 3, 1, "", "memory_access_cost"], [25, 3, 1, "", "memory_complexity"], [25, 3, 1, "", "npolynomials_reduced"], [25, 3, 1, "", "nvariables_reduced"], [25, 3, 1, "", "optimal_parameters"], [25, 3, 1, "", "parameter_names"], [25, 2, 1, "", "parameter_ranges"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "set_parameter_ranges"], [25, 3, 1, "", "set_parameters"], [25, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[26, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[26, 2, 1, "", "attack_type"], [26, 2, 1, "", "complexity_type"], [26, 3, 1, "", "degree_of_polynomials"], [26, 3, 1, "", "get_optimal_parameters_dict"], [26, 3, 1, "", "get_reduced_parameters"], [26, 3, 1, "", "has_optimal_parameter"], [26, 3, 1, "", "k"], [26, 3, 1, "", "linear_algebra_constant"], [26, 2, 1, "", "memory_access"], [26, 3, 1, "", "memory_access_cost"], [26, 3, 1, "", "memory_complexity"], [26, 3, 1, "", "npolynomials_reduced"], [26, 3, 1, "", "nvariables_reduced"], [26, 3, 1, "", "optimal_parameters"], [26, 3, 1, "", "parameter_names"], [26, 2, 1, "", "parameter_ranges"], [26, 3, 1, "", "reset"], [26, 3, 1, "", "set_parameter_ranges"], [26, 3, 1, "", "set_parameters"], [26, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[27, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[27, 2, 1, "", "attack_type"], [27, 2, 1, "", "complexity_type"], [27, 3, 1, "", "get_optimal_parameters_dict"], [27, 3, 1, "", "get_reduced_parameters"], [27, 3, 1, "", "has_optimal_parameter"], [27, 3, 1, "", "linear_algebra_constant"], [27, 2, 1, "", "memory_access"], [27, 3, 1, "", "memory_access_cost"], [27, 3, 1, "", "memory_complexity"], [27, 3, 1, "", "npolynomials_reduced"], [27, 3, 1, "", "nvariables_reduced"], [27, 3, 1, "", "optimal_parameters"], [27, 3, 1, "", "parameter_names"], [27, 2, 1, "", "parameter_ranges"], [27, 3, 1, "", "reset"], [27, 3, 1, "", "set_parameter_ranges"], [27, 3, 1, "", "set_parameters"], [27, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[28, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[28, 2, 1, "", "attack_type"], [28, 2, 1, "", "complexity_type"], [28, 3, 1, "", "delta"], [28, 3, 1, "", "get_optimal_parameters_dict"], [28, 3, 1, "", "get_reduced_parameters"], [28, 3, 1, "", "has_optimal_parameter"], [28, 3, 1, "", "linear_algebra_constant"], [28, 2, 1, "", "memory_access"], [28, 3, 1, "", "memory_access_cost"], [28, 3, 1, "", "memory_complexity"], [28, 3, 1, "", "npolynomials_reduced"], [28, 3, 1, "", "nvariables_reduced"], [28, 3, 1, "", "optimal_parameters"], [28, 3, 1, "", "parameter_names"], [28, 2, 1, "", "parameter_ranges"], [28, 3, 1, "", "reset"], [28, 3, 1, "", "set_parameter_ranges"], [28, 3, 1, "", "set_parameters"], [28, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[29, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[29, 2, 1, "", "attack_type"], [29, 2, 1, "", "complexity_type"], [29, 3, 1, "", "get_optimal_parameters_dict"], [29, 3, 1, "", "get_reduced_parameters"], [29, 3, 1, "", "has_optimal_parameter"], [29, 3, 1, "", "linear_algebra_constant"], [29, 2, 1, "", "memory_access"], [29, 3, 1, "", "memory_access_cost"], [29, 3, 1, "", "memory_complexity"], [29, 3, 1, "", "npolynomials_reduced"], [29, 3, 1, "", "nvariables_reduced"], [29, 3, 1, "", "optimal_parameters"], [29, 3, 1, "", "parameter_names"], [29, 2, 1, "", "parameter_ranges"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "set_parameter_ranges"], [29, 3, 1, "", "set_parameters"], [29, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator": [[30, 0, 0, "-", "degree_of_regularity"], [31, 0, 0, "-", "mq_algorithm"], [32, 0, 0, "-", "mq_constants"], [33, 0, 0, "-", "mq_estimator"], [34, 0, 0, "-", "mq_helper"], [35, 0, 0, "-", "mq_problem"], [38, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[30, 5, 1, "", "generic_system"], [30, 5, 1, "", "quadratic_system"], [30, 5, 1, "", "regular_system"], [30, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[31, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[31, 2, 1, "", "attack_type"], [31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "get_optimal_parameters_dict"], [31, 3, 1, "", "get_reduced_parameters"], [31, 3, 1, "", "has_optimal_parameter"], [31, 3, 1, "", "linear_algebra_constant"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "memory_access_cost"], [31, 3, 1, "", "memory_complexity"], [31, 3, 1, "", "npolynomials_reduced"], [31, 3, 1, "", "nvariables_reduced"], [31, 3, 1, "", "optimal_parameters"], [31, 3, 1, "", "parameter_names"], [31, 2, 1, "", "parameter_ranges"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_parameter_ranges"], [31, 3, 1, "", "set_parameters"], [31, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[33, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[33, 3, 1, "", "algorithm_names"], [33, 3, 1, "", "algorithms"], [33, 2, 1, "", "bit_complexities"], [33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "estimate"], [33, 2, 1, "", "estimator_type"], [33, 4, 1, "", "excluded_algorithms_by_default"], [33, 3, 1, "", "fastest_algorithm"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "nalgorithms"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[34, 5, 1, "", "ngates"], [34, 5, 1, "", "nmonomials_of_degree"], [34, 5, 1, "", "nmonomials_up_to_degree"], [34, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[35, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[35, 3, 1, "", "expected_number_solutions"], [35, 3, 1, "", "get_parameters"], [35, 3, 1, "", "get_problem_parameters"], [35, 3, 1, "", "is_defined_over_finite_field"], [35, 3, 1, "", "is_overdefined_system"], [35, 3, 1, "", "is_square_system"], [35, 3, 1, "", "is_underdefined_system"], [35, 3, 1, "", "npolynomials"], [35, 3, 1, "", "nvariables"], [35, 3, 1, "", "order_of_the_field"], [35, 2, 1, "", "theta"], [35, 3, 1, "", "to_bitcomplexity_memory"], [35, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[36, 0, 0, "-", "hilbert"], [37, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[36, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[36, 3, 1, "", "coefficient_of_degree"], [36, 3, 1, "", "coefficient_up_to_degree"], [36, 2, 1, "", "degrees"], [36, 3, 1, "", "first_nonpositive_coefficient"], [36, 3, 1, "", "first_nonpositive_coefficient_up_to_degree"], [36, 2, 1, "", "npolynomials"], [36, 2, 1, "", "nvariables"], [36, 2, 1, "", "precision"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[37, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[37, 3, 1, "", "nmonomials_of_degree"], [37, 3, 1, "", "nmonomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[38, 5, 1, "", "quadratic_system"], [38, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MREstimator.MRAlgorithms": [[39, 0, 0, "-", "big_k"], [40, 0, 0, "-", "bruteforce"], [41, 0, 0, "-", "kernel_search"], [42, 0, 0, "-", "minors"], [43, 0, 0, "-", "support_minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k": [[39, 1, 1, "", "BigK"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK": [[39, 3, 1, "", "a"], [39, 2, 1, "", "attack_type"], [39, 2, 1, "", "complexity_type"], [39, 3, 1, "", "cost_reduction"], [39, 3, 1, "", "get_optimal_parameters_dict"], [39, 3, 1, "", "get_problem_parameters_reduced"], [39, 3, 1, "", "has_optimal_parameter"], [39, 3, 1, "", "hybridization_factor"], [39, 3, 1, "", "linear_algebra_constant"], [39, 3, 1, "", "lv"], [39, 2, 1, "", "memory_access"], [39, 3, 1, "", "memory_access_cost"], [39, 3, 1, "", "memory_complexity"], [39, 3, 1, "", "optimal_parameters"], [39, 3, 1, "", "parameter_names"], [39, 2, 1, "", "parameter_ranges"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "set_parameter_ranges"], [39, 3, 1, "", "set_parameters"], [39, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce": [[40, 1, 1, "", "BruteForce"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce": [[40, 3, 1, "", "a"], [40, 2, 1, "", "attack_type"], [40, 2, 1, "", "complexity_type"], [40, 3, 1, "", "cost_reduction"], [40, 3, 1, "", "get_optimal_parameters_dict"], [40, 3, 1, "", "get_problem_parameters_reduced"], [40, 3, 1, "", "has_optimal_parameter"], [40, 3, 1, "", "hybridization_factor"], [40, 3, 1, "", "linear_algebra_constant"], [40, 3, 1, "", "lv"], [40, 2, 1, "", "memory_access"], [40, 3, 1, "", "memory_access_cost"], [40, 3, 1, "", "memory_complexity"], [40, 3, 1, "", "optimal_parameters"], [40, 3, 1, "", "parameter_names"], [40, 2, 1, "", "parameter_ranges"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "set_parameter_ranges"], [40, 3, 1, "", "set_parameters"], [40, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search": [[41, 1, 1, "", "KernelSearch"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch": [[41, 3, 1, "", "a"], [41, 2, 1, "", "attack_type"], [41, 2, 1, "", "complexity_type"], [41, 3, 1, "", "cost_reduction"], [41, 3, 1, "", "get_optimal_parameters_dict"], [41, 3, 1, "", "get_problem_parameters_reduced"], [41, 3, 1, "", "has_optimal_parameter"], [41, 3, 1, "", "hybridization_factor"], [41, 3, 1, "", "linear_algebra_constant"], [41, 3, 1, "", "lv"], [41, 2, 1, "", "memory_access"], [41, 3, 1, "", "memory_access_cost"], [41, 3, 1, "", "memory_complexity"], [41, 3, 1, "", "optimal_parameters"], [41, 3, 1, "", "parameter_names"], [41, 2, 1, "", "parameter_ranges"], [41, 3, 1, "", "reset"], [41, 3, 1, "", "set_parameter_ranges"], [41, 3, 1, "", "set_parameters"], [41, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors": [[42, 1, 1, "", "Minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors": [[42, 3, 1, "", "a"], [42, 2, 1, "", "attack_type"], [42, 2, 1, "", "complexity_type"], [42, 3, 1, "", "cost_reduction"], [42, 3, 1, "", "get_optimal_parameters_dict"], [42, 3, 1, "", "get_problem_parameters_reduced"], [42, 3, 1, "", "has_optimal_parameter"], [42, 3, 1, "", "hybridization_factor"], [42, 3, 1, "", "linear_algebra_constant"], [42, 3, 1, "", "lv"], [42, 2, 1, "", "memory_access"], [42, 3, 1, "", "memory_access_cost"], [42, 3, 1, "", "memory_complexity"], [42, 3, 1, "", "optimal_parameters"], [42, 3, 1, "", "parameter_names"], [42, 2, 1, "", "parameter_ranges"], [42, 3, 1, "", "reset"], [42, 3, 1, "", "set_parameter_ranges"], [42, 3, 1, "", "set_parameters"], [42, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors": [[43, 1, 1, "", "SupportMinors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors": [[43, 3, 1, "", "a"], [43, 2, 1, "", "attack_type"], [43, 3, 1, "", "b"], [43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "cost_reduction"], [43, 3, 1, "", "get_optimal_parameters_dict"], [43, 3, 1, "", "get_problem_parameters_reduced"], [43, 3, 1, "", "has_optimal_parameter"], [43, 3, 1, "", "hybridization_factor"], [43, 3, 1, "", "linear_algebra_constant"], [43, 3, 1, "", "lv"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "memory_access_cost"], [43, 3, 1, "", "memory_complexity"], [43, 3, 1, "", "nprime"], [43, 3, 1, "", "optimal_parameters"], [43, 3, 1, "", "parameter_names"], [43, 2, 1, "", "parameter_ranges"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_parameter_ranges"], [43, 3, 1, "", "set_parameters"], [43, 3, 1, "", "time_complexity"], [43, 3, 1, "", "variant"]], "cryptographic_estimators.MREstimator": [[44, 0, 0, "-", "mr_algorithm"], [45, 0, 0, "-", "mr_constants"], [46, 0, 0, "-", "mr_estimator"], [47, 0, 0, "-", "mr_helper"], [48, 0, 0, "-", "mr_problem"]], "cryptographic_estimators.MREstimator.mr_algorithm": [[44, 1, 1, "", "MRAlgorithm"]], "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm": [[44, 2, 1, "", "attack_type"], [44, 2, 1, "", "complexity_type"], [44, 3, 1, "", "cost_reduction"], [44, 3, 1, "", "get_optimal_parameters_dict"], [44, 3, 1, "", "get_problem_parameters_reduced"], [44, 3, 1, "", "has_optimal_parameter"], [44, 3, 1, "", "hybridization_factor"], [44, 3, 1, "", "linear_algebra_constant"], [44, 2, 1, "", "memory_access"], [44, 3, 1, "", "memory_access_cost"], [44, 3, 1, "", "memory_complexity"], [44, 3, 1, "", "optimal_parameters"], [44, 3, 1, "", "parameter_names"], [44, 2, 1, "", "parameter_ranges"], [44, 3, 1, "", "reset"], [44, 3, 1, "", "set_parameter_ranges"], [44, 3, 1, "", "set_parameters"], [44, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.mr_estimator": [[46, 1, 1, "", "MREstimator"]], "cryptographic_estimators.MREstimator.mr_estimator.MREstimator": [[46, 3, 1, "", "algorithm_names"], [46, 3, 1, "", "algorithms"], [46, 2, 1, "", "bit_complexities"], [46, 2, 1, "", "complexity_type"], [46, 3, 1, "", "estimate"], [46, 2, 1, "", "estimator_type"], [46, 4, 1, "", "excluded_algorithms_by_default"], [46, 3, 1, "", "fastest_algorithm"], [46, 2, 1, "", "memory_access"], [46, 3, 1, "", "nalgorithms"], [46, 3, 1, "", "reset"], [46, 3, 1, "", "table"]], "cryptographic_estimators.MREstimator.mr_helper": [[47, 1, 1, "", "Variant"], [47, 5, 1, "", "deteterminant_of_A"], [47, 5, 1, "", "entry_i_j_of_A"], [47, 5, 1, "", "matrix_A"], [47, 5, 1, "", "minors_polynomial"], [47, 5, 1, "", "minors_series"]], "cryptographic_estimators.MREstimator.mr_helper.Variant": [[47, 4, 1, "", "block_wiedemann"], [47, 4, 1, "", "strassen"]], "cryptographic_estimators.MREstimator.mr_problem": [[48, 1, 1, "", "MRProblem"]], "cryptographic_estimators.MREstimator.mr_problem.MRProblem": [[48, 3, 1, "", "expected_number_solutions"], [48, 3, 1, "", "get_parameters"], [48, 3, 1, "", "length_solution_vector"], [48, 3, 1, "", "ncolumns"], [48, 3, 1, "", "nmatrices"], [48, 3, 1, "", "nrows"], [48, 3, 1, "", "order_of_the_field"], [48, 3, 1, "", "target_rank"], [48, 2, 1, "", "theta"], [48, 3, 1, "", "to_bitcomplexity_memory"], [48, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PEEstimator.PEAlgorithms": [[49, 0, 0, "-", "beullens"], [50, 0, 0, "-", "leon"], [51, 0, 0, "-", "ssa"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens": [[49, 1, 1, "", "Beullens"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens": [[49, 2, 1, "", "attack_type"], [49, 2, 1, "", "complexity_type"], [49, 3, 1, "", "get_optimal_parameters_dict"], [49, 3, 1, "", "has_optimal_parameter"], [49, 2, 1, "", "memory_access"], [49, 3, 1, "", "memory_access_cost"], [49, 3, 1, "", "memory_complexity"], [49, 3, 1, "", "optimal_parameters"], [49, 3, 1, "", "parameter_names"], [49, 2, 1, "", "parameter_ranges"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "set_parameter_ranges"], [49, 3, 1, "", "set_parameters"], [49, 3, 1, "", "time_complexity"], [49, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon": [[50, 1, 1, "", "Leon"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon": [[50, 2, 1, "", "attack_type"], [50, 2, 1, "", "complexity_type"], [50, 3, 1, "", "get_optimal_parameters_dict"], [50, 3, 1, "", "has_optimal_parameter"], [50, 2, 1, "", "memory_access"], [50, 3, 1, "", "memory_access_cost"], [50, 3, 1, "", "memory_complexity"], [50, 3, 1, "", "optimal_parameters"], [50, 3, 1, "", "parameter_names"], [50, 2, 1, "", "parameter_ranges"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "set_parameter_ranges"], [50, 3, 1, "", "set_parameters"], [50, 3, 1, "", "time_complexity"], [50, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa": [[51, 1, 1, "", "SSA"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA": [[51, 2, 1, "", "attack_type"], [51, 2, 1, "", "complexity_type"], [51, 3, 1, "", "get_optimal_parameters_dict"], [51, 3, 1, "", "has_optimal_parameter"], [51, 2, 1, "", "memory_access"], [51, 3, 1, "", "memory_access_cost"], [51, 3, 1, "", "memory_complexity"], [51, 3, 1, "", "optimal_parameters"], [51, 3, 1, "", "parameter_names"], [51, 2, 1, "", "parameter_ranges"], [51, 3, 1, "", "reset"], [51, 3, 1, "", "set_parameter_ranges"], [51, 3, 1, "", "set_parameters"], [51, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator": [[52, 0, 0, "-", "pe_algorithm"], [53, 0, 0, "-", "pe_constants"], [54, 0, 0, "-", "pe_estimator"], [55, 0, 0, "-", "pe_helper"], [56, 0, 0, "-", "pe_problem"]], "cryptographic_estimators.PEEstimator.pe_algorithm": [[52, 1, 1, "", "PEAlgorithm"]], "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm": [[52, 2, 1, "", "attack_type"], [52, 2, 1, "", "complexity_type"], [52, 3, 1, "", "get_optimal_parameters_dict"], [52, 3, 1, "", "has_optimal_parameter"], [52, 2, 1, "", "memory_access"], [52, 3, 1, "", "memory_access_cost"], [52, 3, 1, "", "memory_complexity"], [52, 3, 1, "", "optimal_parameters"], [52, 3, 1, "", "parameter_names"], [52, 2, 1, "", "parameter_ranges"], [52, 3, 1, "", "reset"], [52, 3, 1, "", "set_parameter_ranges"], [52, 3, 1, "", "set_parameters"], [52, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_constants": [[53, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation": [[53, 4, 1, "", "LISTS_SIZE"], [53, 4, 1, "", "LIST_COMPUTATION"], [53, 4, 1, "", "NORMAL_FORM"]], "cryptographic_estimators.PEEstimator.pe_estimator": [[54, 1, 1, "", "PEEstimator"]], "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator": [[54, 3, 1, "", "algorithm_names"], [54, 3, 1, "", "algorithms"], [54, 2, 1, "", "bit_complexities"], [54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "estimate"], [54, 2, 1, "", "estimator_type"], [54, 4, 1, "", "excluded_algorithms_by_default"], [54, 3, 1, "", "fastest_algorithm"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "nalgorithms"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "table"]], "cryptographic_estimators.PEEstimator.pe_helper": [[55, 5, 1, "", "gv_distance"], [55, 5, 1, "", "hamming_ball"], [55, 5, 1, "", "median_size_of_random_orbit"], [55, 5, 1, "", "number_of_weight_d_codewords"], [55, 5, 1, "", "random_sparse_vec_orbit"]], "cryptographic_estimators.PEEstimator.pe_problem": [[56, 1, 1, "", "PEProblem"]], "cryptographic_estimators.PEEstimator.pe_problem.PEProblem": [[56, 3, 1, "", "expected_number_solutions"], [56, 3, 1, "", "get_parameters"], [56, 3, 1, "", "to_bitcomplexity_memory"], [56, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PKEstimator.PKAlgorithms": [[57, 0, 0, "-", "kmp"], [58, 0, 0, "-", "sbc"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp": [[57, 1, 1, "", "KMP"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP": [[57, 2, 1, "", "attack_type"], [57, 2, 1, "", "complexity_type"], [57, 3, 1, "", "get_optimal_parameters_dict"], [57, 3, 1, "", "has_optimal_parameter"], [57, 2, 1, "", "memory_access"], [57, 3, 1, "", "memory_access_cost"], [57, 3, 1, "", "memory_complexity"], [57, 3, 1, "", "optimal_parameters"], [57, 3, 1, "", "parameter_names"], [57, 2, 1, "", "parameter_ranges"], [57, 3, 1, "", "reset"], [57, 3, 1, "", "set_parameter_ranges"], [57, 3, 1, "", "set_parameters"], [57, 3, 1, "", "time_complexity"], [57, 3, 1, "", "u"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc": [[58, 1, 1, "", "SBC"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC": [[58, 2, 1, "", "attack_type"], [58, 2, 1, "", "complexity_type"], [58, 3, 1, "", "d"], [58, 3, 1, "", "get_optimal_parameters_dict"], [58, 3, 1, "", "has_optimal_parameter"], [58, 2, 1, "", "memory_access"], [58, 3, 1, "", "memory_access_cost"], [58, 3, 1, "", "memory_complexity"], [58, 3, 1, "", "optimal_parameters"], [58, 3, 1, "", "parameter_names"], [58, 2, 1, "", "parameter_ranges"], [58, 3, 1, "", "reset"], [58, 3, 1, "", "set_parameter_ranges"], [58, 3, 1, "", "set_parameters"], [58, 3, 1, "", "time_complexity"], [58, 3, 1, "", "w"], [58, 3, 1, "", "w1"]], "cryptographic_estimators.PKEstimator": [[59, 0, 0, "-", "pk_algorithm"], [60, 0, 0, "-", "pk_constants"], [61, 0, 0, "-", "pk_estimator"], [62, 0, 0, "-", "pk_helper"], [63, 0, 0, "-", "pk_problem"]], "cryptographic_estimators.PKEstimator.pk_algorithm": [[59, 1, 1, "", "PKAlgorithm"]], "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm": [[59, 2, 1, "", "attack_type"], [59, 2, 1, "", "complexity_type"], [59, 3, 1, "", "get_optimal_parameters_dict"], [59, 3, 1, "", "has_optimal_parameter"], [59, 2, 1, "", "memory_access"], [59, 3, 1, "", "memory_access_cost"], [59, 3, 1, "", "memory_complexity"], [59, 3, 1, "", "optimal_parameters"], [59, 3, 1, "", "parameter_names"], [59, 2, 1, "", "parameter_ranges"], [59, 3, 1, "", "reset"], [59, 3, 1, "", "set_parameter_ranges"], [59, 3, 1, "", "set_parameters"], [59, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator.pk_constants": [[60, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation": [[60, 4, 1, "", "KMP_FINAL_LIST"], [60, 4, 1, "", "KMP_L1"], [60, 4, 1, "", "KMP_L2"], [60, 4, 1, "", "SBC_ISD"], [60, 4, 1, "", "SBC_U"]], "cryptographic_estimators.PKEstimator.pk_estimator": [[61, 1, 1, "", "PKEstimator"]], "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator": [[61, 3, 1, "", "algorithm_names"], [61, 3, 1, "", "algorithms"], [61, 2, 1, "", "bit_complexities"], [61, 2, 1, "", "complexity_type"], [61, 3, 1, "", "estimate"], [61, 2, 1, "", "estimator_type"], [61, 4, 1, "", "excluded_algorithms_by_default"], [61, 3, 1, "", "fastest_algorithm"], [61, 2, 1, "", "memory_access"], [61, 3, 1, "", "nalgorithms"], [61, 3, 1, "", "reset"], [61, 3, 1, "", "table"]], "cryptographic_estimators.PKEstimator.pk_helper": [[62, 5, 1, "", "beullens_lee_brickell_adaptation"], [62, 5, 1, "", "cost_for_finding_subcode"], [62, 5, 1, "", "gauss_binomial"], [62, 5, 1, "", "lof"]], "cryptographic_estimators.PKEstimator.pk_problem": [[63, 1, 1, "", "PKProblem"]], "cryptographic_estimators.PKEstimator.pk_problem.PKProblem": [[63, 3, 1, "", "expected_number_solutions"], [63, 3, 1, "", "get_parameters"], [63, 3, 1, "", "to_bitcomplexity_memory"], [63, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms": [[64, 0, 0, "-", "ccj"], [65, 0, 0, "-", "ccj_lin"], [66, 0, 0, "-", "regisd_enum"], [67, 0, 0, "-", "regisd_perm"], [68, 0, 0, "-", "regisd_rep"], [69, 0, 0, "-", "sd_attack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj": [[64, 1, 1, "", "CCJ"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ": [[64, 2, 1, "", "attack_type"], [64, 2, 1, "", "complexity_type"], [64, 3, 1, "", "ell"], [64, 3, 1, "", "get_optimal_parameters_dict"], [64, 3, 1, "", "has_optimal_parameter"], [64, 2, 1, "", "memory_access"], [64, 3, 1, "", "memory_access_cost"], [64, 3, 1, "", "memory_complexity"], [64, 3, 1, "", "optimal_parameters"], [64, 3, 1, "", "parameter_names"], [64, 2, 1, "", "parameter_ranges"], [64, 3, 1, "", "reset"], [64, 3, 1, "", "set_parameter_ranges"], [64, 3, 1, "", "set_parameters"], [64, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin": [[65, 1, 1, "", "CCJLin"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin": [[65, 2, 1, "", "attack_type"], [65, 2, 1, "", "complexity_type"], [65, 3, 1, "", "get_optimal_parameters_dict"], [65, 3, 1, "", "has_optimal_parameter"], [65, 2, 1, "", "memory_access"], [65, 3, 1, "", "memory_access_cost"], [65, 3, 1, "", "memory_complexity"], [65, 3, 1, "", "optimal_parameters"], [65, 3, 1, "", "parameter_names"], [65, 2, 1, "", "parameter_ranges"], [65, 3, 1, "", "reset"], [65, 3, 1, "", "set_parameter_ranges"], [65, 3, 1, "", "set_parameters"], [65, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum": [[66, 1, 1, "", "RegularISDEnum"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum": [[66, 2, 1, "", "attack_type"], [66, 2, 1, "", "complexity_type"], [66, 3, 1, "", "ell"], [66, 3, 1, "", "get_optimal_parameters_dict"], [66, 3, 1, "", "has_optimal_parameter"], [66, 2, 1, "", "memory_access"], [66, 3, 1, "", "memory_access_cost"], [66, 3, 1, "", "memory_complexity"], [66, 3, 1, "", "optimal_parameters"], [66, 3, 1, "", "p"], [66, 3, 1, "", "parameter_names"], [66, 2, 1, "", "parameter_ranges"], [66, 3, 1, "", "reset"], [66, 3, 1, "", "set_parameter_ranges"], [66, 3, 1, "", "set_parameters"], [66, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm": [[67, 1, 1, "", "RegularISDPerm"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm": [[67, 2, 1, "", "attack_type"], [67, 2, 1, "", "complexity_type"], [67, 3, 1, "", "get_optimal_parameters_dict"], [67, 3, 1, "", "has_optimal_parameter"], [67, 2, 1, "", "memory_access"], [67, 3, 1, "", "memory_access_cost"], [67, 3, 1, "", "memory_complexity"], [67, 3, 1, "", "optimal_parameters"], [67, 3, 1, "", "parameter_names"], [67, 2, 1, "", "parameter_ranges"], [67, 3, 1, "", "reset"], [67, 3, 1, "", "set_parameter_ranges"], [67, 3, 1, "", "set_parameters"], [67, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep": [[68, 1, 1, "", "RegularISDRep"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep": [[68, 2, 1, "", "attack_type"], [68, 2, 1, "", "complexity_type"], [68, 3, 1, "", "ell"], [68, 3, 1, "", "eps_x"], [68, 3, 1, "", "eps_y"], [68, 3, 1, "", "get_optimal_parameters_dict"], [68, 3, 1, "", "has_optimal_parameter"], [68, 2, 1, "", "memory_access"], [68, 3, 1, "", "memory_access_cost"], [68, 3, 1, "", "memory_complexity"], [68, 3, 1, "", "optimal_parameters"], [68, 3, 1, "", "p"], [68, 3, 1, "", "parameter_names"], [68, 2, 1, "", "parameter_ranges"], [68, 3, 1, "", "reset"], [68, 3, 1, "", "set_parameter_ranges"], [68, 3, 1, "", "set_parameters"], [68, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack": [[69, 1, 1, "", "SDAttack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack": [[69, 2, 1, "", "attack_type"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "get_optimal_parameters_dict"], [69, 3, 1, "", "has_optimal_parameter"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "memory_access_cost"], [69, 3, 1, "", "memory_complexity"], [69, 3, 1, "", "optimal_parameters"], [69, 3, 1, "", "parameter_names"], [69, 2, 1, "", "parameter_ranges"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "set_parameter_ranges"], [69, 3, 1, "", "set_parameters"], [69, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator": [[70, 0, 0, "-", "regsd_algorithm"], [71, 0, 0, "-", "regsd_constants"], [72, 0, 0, "-", "regsd_estimator"], [73, 0, 0, "-", "regsd_helper"], [74, 0, 0, "-", "regsd_problem"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm": [[70, 1, 1, "", "RegSDAlgorithm"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm": [[70, 2, 1, "", "attack_type"], [70, 2, 1, "", "complexity_type"], [70, 3, 1, "", "get_optimal_parameters_dict"], [70, 3, 1, "", "has_optimal_parameter"], [70, 2, 1, "", "memory_access"], [70, 3, 1, "", "memory_access_cost"], [70, 3, 1, "", "memory_complexity"], [70, 3, 1, "", "optimal_parameters"], [70, 3, 1, "", "parameter_names"], [70, 2, 1, "", "parameter_ranges"], [70, 3, 1, "", "reset"], [70, 3, 1, "", "set_parameter_ranges"], [70, 3, 1, "", "set_parameters"], [70, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator": [[72, 1, 1, "", "RegSDEstimator"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator": [[72, 3, 1, "", "algorithm_names"], [72, 3, 1, "", "algorithms"], [72, 2, 1, "", "bit_complexities"], [72, 2, 1, "", "complexity_type"], [72, 3, 1, "", "estimate"], [72, 2, 1, "", "estimator_type"], [72, 4, 1, "", "excluded_algorithms_by_default"], [72, 3, 1, "", "fastest_algorithm"], [72, 2, 1, "", "memory_access"], [72, 3, 1, "", "nalgorithms"], [72, 3, 1, "", "reset"], [72, 3, 1, "", "table"]], "cryptographic_estimators.RegSDEstimator.regsd_helper": [[73, 5, 1, "", "r_int"]], "cryptographic_estimators.RegSDEstimator.regsd_problem": [[74, 1, 1, "", "RegSDProblem"]], "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem": [[74, 3, 1, "", "expected_number_solutions"], [74, 3, 1, "", "get_parameters"], [74, 3, 1, "", "to_bitcomplexity_memory"], [74, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[75, 0, 0, "-", "ball_collision"], [76, 0, 0, "-", "bjmm"], [77, 0, 0, "-", "bjmm_dw"], [78, 0, 0, "-", "bjmm_pdw"], [79, 0, 0, "-", "bjmm_plus"], [80, 0, 0, "-", "both_may"], [81, 0, 0, "-", "dumer"], [82, 0, 0, "-", "may_ozerov"], [83, 0, 0, "-", "prange"], [84, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[75, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[75, 2, 1, "", "attack_type"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "get_optimal_parameters_dict"], [75, 3, 1, "", "has_optimal_parameter"], [75, 3, 1, "", "l"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "memory_access_cost"], [75, 3, 1, "", "memory_complexity"], [75, 3, 1, "", "optimal_parameters"], [75, 3, 1, "", "p"], [75, 3, 1, "", "parameter_names"], [75, 2, 1, "", "parameter_ranges"], [75, 3, 1, "", "pl"], [75, 3, 1, "", "r"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "set_parameter_ranges"], [75, 3, 1, "", "set_parameters"], [75, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[76, 1, 1, "", "BJMM"], [76, 1, 1, "", "BJMMd2"], [76, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[76, 2, 1, "", "attack_type"], [76, 2, 1, "", "complexity_type"], [76, 3, 1, "", "depth"], [76, 3, 1, "", "get_optimal_parameters_dict"], [76, 3, 1, "", "has_optimal_parameter"], [76, 3, 1, "", "initialize_parameter_ranges"], [76, 2, 1, "", "memory_access"], [76, 3, 1, "", "memory_access_cost"], [76, 3, 1, "", "memory_complexity"], [76, 3, 1, "", "optimal_parameters"], [76, 3, 1, "", "parameter_names"], [76, 2, 1, "", "parameter_ranges"], [76, 3, 1, "", "r"], [76, 3, 1, "", "reset"], [76, 3, 1, "", "set_parameter_ranges"], [76, 3, 1, "", "set_parameters"], [76, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[76, 2, 1, "", "attack_type"], [76, 2, 1, "", "complexity_type"], [76, 3, 1, "", "get_optimal_parameters_dict"], [76, 3, 1, "", "has_optimal_parameter"], [76, 3, 1, "", "initialize_parameter_ranges"], [76, 3, 1, "", "l"], [76, 2, 1, "", "memory_access"], [76, 3, 1, "", "memory_access_cost"], [76, 3, 1, "", "memory_complexity"], [76, 3, 1, "", "optimal_parameters"], [76, 3, 1, "", "p"], [76, 3, 1, "", "p1"], [76, 3, 1, "", "parameter_names"], [76, 2, 1, "", "parameter_ranges"], [76, 3, 1, "", "r"], [76, 3, 1, "", "reset"], [76, 3, 1, "", "set_parameter_ranges"], [76, 3, 1, "", "set_parameters"], [76, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[76, 2, 1, "", "attack_type"], [76, 2, 1, "", "complexity_type"], [76, 3, 1, "", "get_optimal_parameters_dict"], [76, 3, 1, "", "has_optimal_parameter"], [76, 3, 1, "", "initialize_parameter_ranges"], [76, 3, 1, "", "l"], [76, 2, 1, "", "memory_access"], [76, 3, 1, "", "memory_access_cost"], [76, 3, 1, "", "memory_complexity"], [76, 3, 1, "", "optimal_parameters"], [76, 3, 1, "", "p"], [76, 3, 1, "", "p1"], [76, 3, 1, "", "p2"], [76, 3, 1, "", "parameter_names"], [76, 2, 1, "", "parameter_ranges"], [76, 3, 1, "", "r"], [76, 3, 1, "", "reset"], [76, 3, 1, "", "set_parameter_ranges"], [76, 3, 1, "", "set_parameters"], [76, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[77, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[77, 2, 1, "", "attack_type"], [77, 2, 1, "", "complexity_type"], [77, 3, 1, "", "get_optimal_parameters_dict"], [77, 3, 1, "", "has_optimal_parameter"], [77, 3, 1, "", "initialize_parameter_ranges"], [77, 2, 1, "", "memory_access"], [77, 3, 1, "", "memory_access_cost"], [77, 3, 1, "", "memory_complexity"], [77, 3, 1, "", "optimal_parameters"], [77, 3, 1, "", "p"], [77, 3, 1, "", "p1"], [77, 3, 1, "", "parameter_names"], [77, 2, 1, "", "parameter_ranges"], [77, 3, 1, "", "r"], [77, 3, 1, "", "reset"], [77, 3, 1, "", "set_parameter_ranges"], [77, 3, 1, "", "set_parameters"], [77, 3, 1, "", "time_complexity"], [77, 3, 1, "", "w1"], [77, 3, 1, "", "w11"], [77, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[78, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[78, 2, 1, "", "attack_type"], [78, 2, 1, "", "complexity_type"], [78, 3, 1, "", "get_optimal_parameters_dict"], [78, 3, 1, "", "has_optimal_parameter"], [78, 3, 1, "", "initialize_parameter_ranges"], [78, 2, 1, "", "memory_access"], [78, 3, 1, "", "memory_access_cost"], [78, 3, 1, "", "memory_complexity"], [78, 3, 1, "", "optimal_parameters"], [78, 3, 1, "", "p"], [78, 3, 1, "", "p1"], [78, 3, 1, "", "parameter_names"], [78, 2, 1, "", "parameter_ranges"], [78, 3, 1, "", "r"], [78, 3, 1, "", "reset"], [78, 3, 1, "", "set_parameter_ranges"], [78, 3, 1, "", "set_parameters"], [78, 3, 1, "", "time_complexity"], [78, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus": [[79, 1, 1, "", "BJMMplus"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus": [[79, 2, 1, "", "attack_type"], [79, 2, 1, "", "complexity_type"], [79, 3, 1, "", "get_optimal_parameters_dict"], [79, 3, 1, "", "has_optimal_parameter"], [79, 3, 1, "", "initialize_parameter_ranges"], [79, 3, 1, "", "l"], [79, 3, 1, "", "l1"], [79, 2, 1, "", "memory_access"], [79, 3, 1, "", "memory_access_cost"], [79, 3, 1, "", "memory_complexity"], [79, 3, 1, "", "optimal_parameters"], [79, 3, 1, "", "p"], [79, 3, 1, "", "p1"], [79, 3, 1, "", "parameter_names"], [79, 2, 1, "", "parameter_ranges"], [79, 3, 1, "", "r"], [79, 3, 1, "", "reset"], [79, 3, 1, "", "set_parameter_ranges"], [79, 3, 1, "", "set_parameters"], [79, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[80, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[80, 2, 1, "", "attack_type"], [80, 2, 1, "", "complexity_type"], [80, 3, 1, "", "get_optimal_parameters_dict"], [80, 3, 1, "", "has_optimal_parameter"], [80, 3, 1, "", "initialize_parameter_ranges"], [80, 3, 1, "", "l"], [80, 2, 1, "", "memory_access"], [80, 3, 1, "", "memory_access_cost"], [80, 3, 1, "", "memory_complexity"], [80, 3, 1, "", "optimal_parameters"], [80, 3, 1, "", "p"], [80, 3, 1, "", "p1"], [80, 3, 1, "", "parameter_names"], [80, 2, 1, "", "parameter_ranges"], [80, 3, 1, "", "r"], [80, 3, 1, "", "reset"], [80, 3, 1, "", "set_parameter_ranges"], [80, 3, 1, "", "set_parameters"], [80, 3, 1, "", "time_complexity"], [80, 3, 1, "", "w1"], [80, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[81, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[81, 2, 1, "", "attack_type"], [81, 2, 1, "", "complexity_type"], [81, 3, 1, "", "get_optimal_parameters_dict"], [81, 3, 1, "", "has_optimal_parameter"], [81, 3, 1, "", "initialize_parameter_ranges"], [81, 3, 1, "", "l"], [81, 2, 1, "", "memory_access"], [81, 3, 1, "", "memory_access_cost"], [81, 3, 1, "", "memory_complexity"], [81, 3, 1, "", "optimal_parameters"], [81, 3, 1, "", "p"], [81, 3, 1, "", "parameter_names"], [81, 2, 1, "", "parameter_ranges"], [81, 3, 1, "", "r"], [81, 3, 1, "", "reset"], [81, 3, 1, "", "set_parameter_ranges"], [81, 3, 1, "", "set_parameters"], [81, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[82, 1, 1, "", "MayOzerov"], [82, 1, 1, "", "MayOzerovD2"], [82, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[82, 2, 1, "", "attack_type"], [82, 2, 1, "", "complexity_type"], [82, 3, 1, "", "depth"], [82, 3, 1, "", "get_optimal_parameters_dict"], [82, 3, 1, "", "has_optimal_parameter"], [82, 3, 1, "", "initialize_parameter_ranges"], [82, 2, 1, "", "memory_access"], [82, 3, 1, "", "memory_access_cost"], [82, 3, 1, "", "memory_complexity"], [82, 3, 1, "", "optimal_parameters"], [82, 3, 1, "", "parameter_names"], [82, 2, 1, "", "parameter_ranges"], [82, 3, 1, "", "r"], [82, 3, 1, "", "reset"], [82, 3, 1, "", "set_parameter_ranges"], [82, 3, 1, "", "set_parameters"], [82, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[82, 2, 1, "", "attack_type"], [82, 2, 1, "", "complexity_type"], [82, 3, 1, "", "get_optimal_parameters_dict"], [82, 3, 1, "", "has_optimal_parameter"], [82, 3, 1, "", "initialize_parameter_ranges"], [82, 3, 1, "", "l"], [82, 2, 1, "", "memory_access"], [82, 3, 1, "", "memory_access_cost"], [82, 3, 1, "", "memory_complexity"], [82, 3, 1, "", "optimal_parameters"], [82, 3, 1, "", "p"], [82, 3, 1, "", "p1"], [82, 3, 1, "", "parameter_names"], [82, 2, 1, "", "parameter_ranges"], [82, 3, 1, "", "r"], [82, 3, 1, "", "reset"], [82, 3, 1, "", "set_parameter_ranges"], [82, 3, 1, "", "set_parameters"], [82, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[82, 2, 1, "", "attack_type"], [82, 2, 1, "", "complexity_type"], [82, 3, 1, "", "get_optimal_parameters_dict"], [82, 3, 1, "", "has_optimal_parameter"], [82, 3, 1, "", "initialize_parameter_ranges"], [82, 3, 1, "", "l"], [82, 2, 1, "", "memory_access"], [82, 3, 1, "", "memory_access_cost"], [82, 3, 1, "", "memory_complexity"], [82, 3, 1, "", "optimal_parameters"], [82, 3, 1, "", "p"], [82, 3, 1, "", "p1"], [82, 3, 1, "", "p2"], [82, 3, 1, "", "parameter_names"], [82, 2, 1, "", "parameter_ranges"], [82, 3, 1, "", "r"], [82, 3, 1, "", "reset"], [82, 3, 1, "", "set_parameter_ranges"], [82, 3, 1, "", "set_parameters"], [82, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[83, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[83, 2, 1, "", "attack_type"], [83, 2, 1, "", "complexity_type"], [83, 3, 1, "", "get_optimal_parameters_dict"], [83, 3, 1, "", "has_optimal_parameter"], [83, 2, 1, "", "memory_access"], [83, 3, 1, "", "memory_access_cost"], [83, 3, 1, "", "memory_complexity"], [83, 3, 1, "", "optimal_parameters"], [83, 3, 1, "", "parameter_names"], [83, 2, 1, "", "parameter_ranges"], [83, 3, 1, "", "r"], [83, 3, 1, "", "reset"], [83, 3, 1, "", "set_parameter_ranges"], [83, 3, 1, "", "set_parameters"], [83, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[84, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[84, 2, 1, "", "attack_type"], [84, 2, 1, "", "complexity_type"], [84, 3, 1, "", "get_optimal_parameters_dict"], [84, 3, 1, "", "has_optimal_parameter"], [84, 3, 1, "", "initialize_parameter_ranges"], [84, 3, 1, "", "l"], [84, 2, 1, "", "memory_access"], [84, 3, 1, "", "memory_access_cost"], [84, 3, 1, "", "memory_complexity"], [84, 3, 1, "", "optimal_parameters"], [84, 3, 1, "", "p"], [84, 3, 1, "", "parameter_names"], [84, 2, 1, "", "parameter_ranges"], [84, 3, 1, "", "r"], [84, 3, 1, "", "reset"], [84, 3, 1, "", "set_parameter_ranges"], [84, 3, 1, "", "set_parameters"], [84, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[85, 0, 0, "-", "ball_collision"], [86, 0, 0, "-", "bjmm"], [87, 0, 0, "-", "both_may"], [88, 0, 0, "-", "dumer"], [89, 0, 0, "-", "may_ozerov"], [90, 0, 0, "-", "prange"], [91, 0, 0, "-", "stern"], [92, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[85, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[85, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[86, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[86, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[87, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[87, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[88, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[88, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[89, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[89, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[90, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[90, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[91, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[91, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[92, 5, 1, "", "binary_entropy"], [92, 5, 1, "", "binomial_approximation"], [92, 5, 1, "", "inverse_binary_entropy"], [92, 5, 1, "", "list_of_random_tuples"], [92, 5, 1, "", "may_ozerov_near_neighbor_time"], [92, 5, 1, "", "representations_asymptotic"], [92, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator": [[93, 0, 0, "-", "sd_algorithm"], [94, 0, 0, "-", "sd_constants"], [95, 0, 0, "-", "sd_estimator"], [96, 0, 0, "-", "sd_helper"], [97, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[93, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[93, 2, 1, "", "attack_type"], [93, 2, 1, "", "complexity_type"], [93, 3, 1, "", "get_optimal_parameters_dict"], [93, 3, 1, "", "has_optimal_parameter"], [93, 2, 1, "", "memory_access"], [93, 3, 1, "", "memory_access_cost"], [93, 3, 1, "", "memory_complexity"], [93, 3, 1, "", "optimal_parameters"], [93, 3, 1, "", "parameter_names"], [93, 2, 1, "", "parameter_ranges"], [93, 3, 1, "", "r"], [93, 3, 1, "", "reset"], [93, 3, 1, "", "set_parameter_ranges"], [93, 3, 1, "", "set_parameters"], [93, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[94, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[94, 4, 1, "", "CONSTRAINTS"], [94, 4, 1, "", "GAUSS"], [94, 4, 1, "", "LISTS"], [94, 4, 1, "", "PERMUTATIONS"], [94, 4, 1, "", "REPRESENTATIONS"], [94, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[95, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[95, 3, 1, "", "algorithm_names"], [95, 3, 1, "", "algorithms"], [95, 2, 1, "", "bit_complexities"], [95, 2, 1, "", "complexity_type"], [95, 3, 1, "", "estimate"], [95, 2, 1, "", "estimator_type"], [95, 4, 1, "", "excluded_algorithms_by_default"], [95, 3, 1, "", "fastest_algorithm"], [95, 2, 1, "", "memory_access"], [95, 3, 1, "", "nalgorithms"], [95, 3, 1, "", "reset"], [95, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[96, 5, 1, "", "binom"], [96, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[97, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[97, 3, 1, "", "expected_number_solutions"], [97, 3, 1, "", "get_parameters"], [97, 3, 1, "", "to_bitcomplexity_memory"], [97, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms": [[98, 0, 0, "-", "leebrickell"], [99, 0, 0, "-", "prange"], [100, 0, 0, "-", "stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell": [[98, 1, 1, "", "LeeBrickell"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell": [[98, 2, 1, "", "attack_type"], [98, 2, 1, "", "complexity_type"], [98, 3, 1, "", "get_optimal_parameters_dict"], [98, 3, 1, "", "has_optimal_parameter"], [98, 2, 1, "", "memory_access"], [98, 3, 1, "", "memory_access_cost"], [98, 3, 1, "", "memory_complexity"], [98, 3, 1, "", "optimal_parameters"], [98, 3, 1, "", "p"], [98, 3, 1, "", "parameter_names"], [98, 2, 1, "", "parameter_ranges"], [98, 3, 1, "", "reset"], [98, 3, 1, "", "set_parameter_ranges"], [98, 3, 1, "", "set_parameters"], [98, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange": [[99, 1, 1, "", "Prange"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange": [[99, 2, 1, "", "attack_type"], [99, 2, 1, "", "complexity_type"], [99, 3, 1, "", "get_optimal_parameters_dict"], [99, 3, 1, "", "has_optimal_parameter"], [99, 2, 1, "", "memory_access"], [99, 3, 1, "", "memory_access_cost"], [99, 3, 1, "", "memory_complexity"], [99, 3, 1, "", "optimal_parameters"], [99, 3, 1, "", "parameter_names"], [99, 2, 1, "", "parameter_ranges"], [99, 3, 1, "", "reset"], [99, 3, 1, "", "set_parameter_ranges"], [99, 3, 1, "", "set_parameters"], [99, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern": [[100, 1, 1, "", "Stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern": [[100, 2, 1, "", "attack_type"], [100, 2, 1, "", "complexity_type"], [100, 3, 1, "", "get_optimal_parameters_dict"], [100, 3, 1, "", "has_optimal_parameter"], [100, 3, 1, "", "l"], [100, 2, 1, "", "memory_access"], [100, 3, 1, "", "memory_access_cost"], [100, 3, 1, "", "memory_complexity"], [100, 3, 1, "", "optimal_parameters"], [100, 3, 1, "", "p"], [100, 3, 1, "", "parameter_names"], [100, 2, 1, "", "parameter_ranges"], [100, 3, 1, "", "reset"], [100, 3, 1, "", "set_parameter_ranges"], [100, 3, 1, "", "set_parameters"], [100, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator": [[101, 0, 0, "-", "sdfq_algorithm"], [102, 0, 0, "-", "sdfq_constants"], [103, 0, 0, "-", "sdfq_estimator"], [104, 0, 0, "-", "sdfq_helper"], [105, 0, 0, "-", "sdfq_problem"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm": [[101, 1, 1, "", "SDFqAlgorithm"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm": [[101, 2, 1, "", "attack_type"], [101, 2, 1, "", "complexity_type"], [101, 3, 1, "", "get_optimal_parameters_dict"], [101, 3, 1, "", "has_optimal_parameter"], [101, 2, 1, "", "memory_access"], [101, 3, 1, "", "memory_access_cost"], [101, 3, 1, "", "memory_complexity"], [101, 3, 1, "", "optimal_parameters"], [101, 3, 1, "", "parameter_names"], [101, 2, 1, "", "parameter_ranges"], [101, 3, 1, "", "reset"], [101, 3, 1, "", "set_parameter_ranges"], [101, 3, 1, "", "set_parameters"], [101, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants": [[102, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation": [[102, 4, 1, "", "CONSTRAINTS"], [102, 4, 1, "", "GAUSS"], [102, 4, 1, "", "LISTS"], [102, 4, 1, "", "PERMUTATIONS"], [102, 4, 1, "", "REPRESENTATIONS"], [102, 4, 1, "", "TREE"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator": [[103, 1, 1, "", "SDFqEstimator"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator": [[103, 3, 1, "", "algorithm_names"], [103, 3, 1, "", "algorithms"], [103, 2, 1, "", "bit_complexities"], [103, 2, 1, "", "complexity_type"], [103, 3, 1, "", "estimate"], [103, 2, 1, "", "estimator_type"], [103, 4, 1, "", "excluded_algorithms_by_default"], [103, 3, 1, "", "fastest_algorithm"], [103, 2, 1, "", "memory_access"], [103, 3, 1, "", "nalgorithms"], [103, 3, 1, "", "reset"], [103, 3, 1, "", "table"]], "cryptographic_estimators.SDFqEstimator.sdfq_helper": [[104, 5, 1, "", "binom"], [104, 5, 1, "", "min_max"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem": [[105, 1, 1, "", "SDFqProblem"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem": [[105, 3, 1, "", "expected_number_solutions"], [105, 3, 1, "", "get_parameters"], [105, 3, 1, "", "to_bitcomplexity_memory"], [105, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms": [[106, 0, 0, "-", "collision_attack"], [107, 0, 0, "-", "direct_attack"], [108, 0, 0, "-", "intersection_attack"], [109, 0, 0, "-", "kipnis_shamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack": [[106, 1, 1, "", "CollisionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack": [[106, 3, 1, "", "X"], [106, 3, 1, "", "Y"], [106, 2, 1, "", "attack_type"], [106, 2, 1, "", "complexity_type"], [106, 3, 1, "", "get_optimal_parameters_dict"], [106, 3, 1, "", "has_optimal_parameter"], [106, 3, 1, "", "linear_algebra_constant"], [106, 2, 1, "", "memory_access"], [106, 3, 1, "", "memory_access_cost"], [106, 3, 1, "", "memory_complexity"], [106, 3, 1, "", "optimal_parameters"], [106, 3, 1, "", "parameter_names"], [106, 2, 1, "", "parameter_ranges"], [106, 3, 1, "", "reset"], [106, 3, 1, "", "set_parameter_ranges"], [106, 3, 1, "", "set_parameters"], [106, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack": [[107, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack": [[107, 2, 1, "", "attack_type"], [107, 2, 1, "", "complexity_type"], [107, 3, 1, "", "expected_number_solutions"], [107, 3, 1, "", "get_fastest_mq_algorithm"], [107, 3, 1, "", "get_optimal_parameters_dict"], [107, 3, 1, "", "has_optimal_parameter"], [107, 3, 1, "", "linear_algebra_constant"], [107, 2, 1, "", "memory_access"], [107, 3, 1, "", "memory_access_cost"], [107, 3, 1, "", "memory_complexity"], [107, 3, 1, "", "optimal_parameters"], [107, 3, 1, "", "parameter_names"], [107, 2, 1, "", "parameter_ranges"], [107, 3, 1, "", "reset"], [107, 3, 1, "", "set_parameter_ranges"], [107, 3, 1, "", "set_parameters"], [107, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack": [[108, 1, 1, "", "IntersectionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack": [[108, 2, 1, "", "attack_type"], [108, 2, 1, "", "complexity_type"], [108, 3, 1, "", "get_optimal_parameters_dict"], [108, 3, 1, "", "has_optimal_parameter"], [108, 3, 1, "", "k"], [108, 3, 1, "", "linear_algebra_constant"], [108, 2, 1, "", "memory_access"], [108, 3, 1, "", "memory_access_cost"], [108, 3, 1, "", "memory_complexity"], [108, 3, 1, "", "optimal_parameters"], [108, 3, 1, "", "parameter_names"], [108, 2, 1, "", "parameter_ranges"], [108, 3, 1, "", "reset"], [108, 3, 1, "", "set_parameter_ranges"], [108, 3, 1, "", "set_parameters"], [108, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir": [[109, 1, 1, "", "KipnisShamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir": [[109, 2, 1, "", "attack_type"], [109, 2, 1, "", "complexity_type"], [109, 3, 1, "", "get_optimal_parameters_dict"], [109, 3, 1, "", "has_optimal_parameter"], [109, 3, 1, "", "linear_algebra_constant"], [109, 2, 1, "", "memory_access"], [109, 3, 1, "", "memory_access_cost"], [109, 3, 1, "", "memory_complexity"], [109, 3, 1, "", "optimal_parameters"], [109, 3, 1, "", "parameter_names"], [109, 2, 1, "", "parameter_ranges"], [109, 3, 1, "", "reset"], [109, 3, 1, "", "set_parameter_ranges"], [109, 3, 1, "", "set_parameters"], [109, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator": [[110, 0, 0, "-", "uov_algorithm"], [111, 0, 0, "-", "uov_constants"], [112, 0, 0, "-", "uov_estimator"], [113, 0, 0, "-", "uov_problem"]], "cryptographic_estimators.UOVEstimator.uov_algorithm": [[110, 1, 1, "", "UOVAlgorithm"]], "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm": [[110, 2, 1, "", "attack_type"], [110, 2, 1, "", "complexity_type"], [110, 3, 1, "", "get_optimal_parameters_dict"], [110, 3, 1, "", "has_optimal_parameter"], [110, 3, 1, "", "linear_algebra_constant"], [110, 2, 1, "", "memory_access"], [110, 3, 1, "", "memory_access_cost"], [110, 3, 1, "", "memory_complexity"], [110, 3, 1, "", "optimal_parameters"], [110, 3, 1, "", "parameter_names"], [110, 2, 1, "", "parameter_ranges"], [110, 3, 1, "", "reset"], [110, 3, 1, "", "set_parameter_ranges"], [110, 3, 1, "", "set_parameters"], [110, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.uov_estimator": [[112, 1, 1, "", "UOVEstimator"]], "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator": [[112, 3, 1, "", "algorithm_names"], [112, 3, 1, "", "algorithms"], [112, 2, 1, "", "bit_complexities"], [112, 2, 1, "", "complexity_type"], [112, 3, 1, "", "estimate"], [112, 2, 1, "", "estimator_type"], [112, 4, 1, "", "excluded_algorithms_by_default"], [112, 3, 1, "", "fastest_algorithm"], [112, 2, 1, "", "memory_access"], [112, 3, 1, "", "nalgorithms"], [112, 3, 1, "", "reset"], [112, 3, 1, "", "table"]], "cryptographic_estimators.UOVEstimator.uov_problem": [[113, 1, 1, "", "UOVProblem"]], "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem": [[113, 2, 1, "", "cost_one_hash"], [113, 3, 1, "", "expected_number_solutions"], [113, 3, 1, "", "get_parameters"], [113, 3, 1, "", "hashes_to_basic_operations"], [113, 3, 1, "", "npolynomials"], [113, 3, 1, "", "nvariables"], [113, 3, 1, "", "order_of_the_field"], [113, 2, 1, "", "theta"], [113, 3, 1, "", "to_bitcomplexity_memory"], [113, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators": [[114, 0, 0, "-", "base_algorithm"], [115, 0, 0, "-", "base_constants"], [116, 0, 0, "-", "base_estimator"], [117, 0, 0, "-", "base_problem"], [118, 0, 0, "-", "estimation_renderer"], [119, 0, 0, "-", "helper"]], "cryptographic_estimators.base_algorithm": [[114, 1, 1, "", "BaseAlgorithm"], [114, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[114, 2, 1, "", "attack_type"], [114, 2, 1, "", "complexity_type"], [114, 3, 1, "", "get_optimal_parameters_dict"], [114, 3, 1, "", "has_optimal_parameter"], [114, 2, 1, "", "memory_access"], [114, 3, 1, "", "memory_access_cost"], [114, 3, 1, "", "memory_complexity"], [114, 3, 1, "", "optimal_parameters"], [114, 3, 1, "", "parameter_names"], [114, 2, 1, "", "parameter_ranges"], [114, 3, 1, "", "reset"], [114, 3, 1, "", "set_parameter_ranges"], [114, 3, 1, "", "set_parameters"], [114, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[116, 1, 1, "", "BaseEstimator"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[116, 3, 1, "", "algorithm_names"], [116, 3, 1, "", "algorithms"], [116, 2, 1, "", "bit_complexities"], [116, 2, 1, "", "complexity_type"], [116, 3, 1, "", "estimate"], [116, 2, 1, "", "estimator_type"], [116, 4, 1, "", "excluded_algorithms_by_default"], [116, 3, 1, "", "fastest_algorithm"], [116, 2, 1, "", "memory_access"], [116, 3, 1, "", "nalgorithms"], [116, 3, 1, "", "reset"], [116, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[117, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[117, 3, 1, "", "expected_number_solutions"], [117, 3, 1, "", "get_parameters"], [117, 3, 1, "", "to_bitcomplexity_memory"], [117, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.estimation_renderer": [[118, 1, 1, "", "EstimationRenderer"]], "cryptographic_estimators.estimation_renderer.EstimationRenderer": [[118, 3, 1, "", "as_table"]], "cryptographic_estimators.helper": [[119, 1, 1, "", "ComplexityType"], [119, 5, 1, "", "concat_all_tables"], [119, 5, 1, "", "concat_pretty_tables"], [119, 5, 1, "", "gf_order_to_characteristic"], [119, 5, 1, "", "gf_order_to_degree"], [119, 5, 1, "", "is_power_of_two"], [119, 5, 1, "", "is_prime_power"], [119, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[119, 4, 1, "", "ESTIMATE"], [119, 4, 1, "", "TILDEO"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"dummy_algorithm1": 0, "dummy_algorithm": 1, "dummy_estim": 2, "dummy_problem": 3, "bbp": 4, "beullen": [5, 49], "leon": [6, 50], "le_algorithm": 7, "le_const": 8, "le_estim": 9, "le_help": 10, "le_problem": 11, "direct_attack": [12, 107], "mayo_algorithm": 13, "mayo_const": 14, "mayo_estim": 15, "mayo_help": 16, "mayo_problem": 17, "bjorklund": 18, "booleansolve_fxl": 19, "cgmta": 20, "crossbr": 21, "dinur1": 22, "dinur2": 23, "exhaustive_search": 24, "f5": 25, "hybrid_f5": 26, "kpg": 27, "lokshtanov": 28, "mht": 29, "degree_of_regular": 30, "mq_algorithm": 31, "mq_constant": 32, "mq_estim": 33, "mq_helper": 34, "mq_problem": 35, "hilbert": 36, "nmonomi": 37, "witness_degre": 38, "big_k": 39, "bruteforc": 40, "kernel_search": 41, "minor": 42, "support_minor": 43, "mr_algorithm": 44, "mr_constant": 45, "mr_estim": 46, "mr_helper": 47, "mr_problem": 48, "ssa": 51, "pe_algorithm": 52, "pe_const": 53, "pe_estim": 54, "pe_help": 55, "pe_problem": 56, "kmp": 57, "sbc": 58, "pk_algorithm": 59, "pk_constant": 60, "pk_estim": 61, "pk_helper": 62, "pk_problem": 63, "ccj": 64, "ccj_lin": 65, "regisd_enum": 66, "regisd_perm": 67, "regisd_rep": 68, "sd_attack": 69, "regsd_algorithm": 70, "regsd_const": 71, "regsd_estim": 72, "regsd_help": 73, "regsd_problem": 74, "ball_collis": [75, 85], "bjmm": [76, 86], "bjmm_dw": 77, "bjmm_pdw": 78, "bjmm_plu": 79, "both_mai": [80, 87], "dumer": [81, 88], "may_ozerov": [82, 89], "prang": [83, 90, 99], "stern": [84, 91, 100], "workfactor_help": 92, "sd_algorithm": 93, "sd_constant": 94, "sd_estim": 95, "sd_helper": 96, "sd_problem": 97, "leebrickel": 98, "sdfq_algorithm": 101, "sdfq_constant": 102, "sdfq_estim": 103, "sdfq_helper": 104, "sdfq_problem": 105, "collision_attack": 106, "intersection_attack": 108, "kipnis_shamir": 109, "uov_algorithm": 110, "uov_const": 111, "uov_estim": 112, "uov_problem": 113, "base_algorithm": 114, "base_const": 115, "base_estim": 116, "base_problem": 117, "estimation_render": 118, "helper": 119, "cryptographicestim": 120, "librari": 120, "pkestim": 120, "pkalgorithm": 120, "uovestim": 120, "uovalgorithm": 120, "sdestim": 120, "sdalgorithm": 120, "sdworkfactormodel": 120, "mayoestim": 120, "mayoalgorithm": 120, "peestim": 120, "pealgorithm": 120, "mrestim": 120, "mralgorithm": 120, "dummyestim": 120, "dummyalgorithm": 120, "leestim": 120, "lealgorithm": 120, "sdfqestim": 120, "sdfqalgorithm": 120, "regsdestim": 120, "regsdalgorithm": 120, "mqestim": 120, "seri": 120, "mqalgorithm": 120, "gener": 120, "inform": 120, "indic": 120, "tabl": 120, "refer": 121}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "bbps": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "beullens": [[5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [49, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "leon": [[6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [50, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "le_algorithm": [[7, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "le_constants": [[8, "module-cryptographic_estimators.LEEstimator.le_constants"]], "le_estimator": [[9, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "le_helper": [[10, "module-cryptographic_estimators.LEEstimator.le_helper"]], "le_problem": [[11, "module-cryptographic_estimators.LEEstimator.le_problem"]], "direct_attack": [[12, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack"], [107, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"]], "mayo_algorithm": [[13, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm"]], "mayo_constants": [[14, "module-cryptographic_estimators.MAYOEstimator.mayo_constants"]], "mayo_estimator": [[15, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator"]], "mayo_helper": [[16, "module-cryptographic_estimators.MAYOEstimator.mayo_helper"]], "mayo_problem": [[17, "module-cryptographic_estimators.MAYOEstimator.mayo_problem"]], "bjorklund": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "booleansolve_fxl": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"]], "cgmta": [[20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "crossbred": [[21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "dinur1": [[22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "dinur2": [[23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "exhaustive_search": [[24, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "f5": [[25, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "hybrid_f5": [[26, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "kpg": [[27, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "lokshtanov": [[28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "mht": [[29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "degree_of_regularity": [[30, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "mq_algorithm": [[31, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "mq_constants": [[32, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mq_estimator": [[33, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "mq_helper": [[34, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "mq_problem": [[35, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "hilbert": [[36, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "nmonomial": [[37, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "witness_degree": [[38, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "big_k": [[39, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"]], "bruteforce": [[40, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"]], "kernel_search": [[41, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"]], "minors": [[42, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"]], "support_minors": [[43, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"]], "mr_algorithm": [[44, "module-cryptographic_estimators.MREstimator.mr_algorithm"]], "mr_constants": [[45, "module-cryptographic_estimators.MREstimator.mr_constants"]], "mr_estimator": [[46, "module-cryptographic_estimators.MREstimator.mr_estimator"]], "mr_helper": [[47, "module-cryptographic_estimators.MREstimator.mr_helper"]], "mr_problem": [[48, "module-cryptographic_estimators.MREstimator.mr_problem"]], "ssa": [[51, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "pe_algorithm": [[52, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "pe_constants": [[53, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "pe_estimator": [[54, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "pe_helper": [[55, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "pe_problem": [[56, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "kmp": [[57, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "sbc": [[58, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "pk_algorithm": [[59, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "pk_constants": [[60, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pk_estimator": [[61, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "pk_helper": [[62, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "pk_problem": [[63, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "ccj": [[64, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"]], "ccj_lin": [[65, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin"]], "regisd_enum": [[66, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"]], "regisd_perm": [[67, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"]], "regisd_rep": [[68, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"]], "sd_attack": [[69, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"]], "regsd_algorithm": [[70, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"]], "regsd_constants": [[71, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"]], "regsd_estimator": [[72, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"]], "regsd_helper": [[73, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"]], "regsd_problem": [[74, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"]], "ball_collision": [[75, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [85, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "bjmm": [[76, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [86, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "bjmm_dw": [[77, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "bjmm_pdw": [[78, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "bjmm_plus": [[79, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"]], "both_may": [[80, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [87, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "dumer": [[81, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [88, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "may_ozerov": [[82, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [89, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "prange": [[83, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [90, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [99, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "stern": [[84, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [91, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [100, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "workfactor_helper": [[92, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "sd_algorithm": [[93, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "sd_constants": [[94, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sd_estimator": [[95, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "sd_helper": [[96, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "sd_problem": [[97, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "leebrickell": [[98, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "sdfq_algorithm": [[101, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "sdfq_constants": [[102, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfq_estimator": [[103, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "sdfq_helper": [[104, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "sdfq_problem": [[105, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "collision_attack": [[106, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"]], "intersection_attack": [[108, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"]], "kipnis_shamir": [[109, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"]], "uov_algorithm": [[110, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"]], "uov_constants": [[111, "module-cryptographic_estimators.UOVEstimator.uov_constants"]], "uov_estimator": [[112, "module-cryptographic_estimators.UOVEstimator.uov_estimator"]], "uov_problem": [[113, "module-cryptographic_estimators.UOVEstimator.uov_problem"]], "base_algorithm": [[114, "module-cryptographic_estimators.base_algorithm"]], "base_constants": [[115, "module-cryptographic_estimators.base_constants"]], "base_estimator": [[116, "module-cryptographic_estimators.base_estimator"]], "base_problem": [[117, "module-cryptographic_estimators.base_problem"]], "estimation_renderer": [[118, "module-cryptographic_estimators.estimation_renderer"]], "helper": [[119, "module-cryptographic_estimators.helper"]], "CryptographicEstimators Library": [[120, "cryptographicestimators-library"]], "PKEstimator": [[120, "pkestimator"]], "PKAlgorithms": [[120, "pkalgorithms"]], "UOVEstimator": [[120, "uovestimator"]], "UOVAlgorithms": [[120, "uovalgorithms"]], "SDEstimator": [[120, "sdestimator"]], "SDAlgorithms": [[120, "sdalgorithms"]], "SDWorkfactorModels": [[120, "sdworkfactormodels"]], "MAYOEstimator": [[120, "mayoestimator"]], "MAYOAlgorithms": [[120, "mayoalgorithms"]], "PEEstimator": [[120, "peestimator"]], "PEAlgorithms": [[120, "pealgorithms"]], "MREstimator": [[120, "mrestimator"]], "MRAlgorithms": [[120, "mralgorithms"]], "DummyEstimator": [[120, "dummyestimator"]], "DummyAlgorithms": [[120, "dummyalgorithms"]], "LEEstimator": [[120, "leestimator"]], "LEAlgorithms": [[120, "lealgorithms"]], "SDFqEstimator": [[120, "sdfqestimator"]], "SDFqAlgorithms": [[120, "sdfqalgorithms"]], "RegSDEstimator": [[120, "regsdestimator"]], "RegSDAlgorithms": [[120, "regsdalgorithms"]], "MQEstimator": [[120, "mqestimator"]], "series": [[120, "series"]], "MQAlgorithms": [[120, "mqalgorithms"]], "General Information": [[120, "general-information"]], "Indices and Tables": [[120, "indices-and-tables"]], "References": [[121, "references"]]}, "indexentries": {"dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1"]], "attack_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.attack_type"]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type"]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity"]], "module": [[0, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"], [1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"], [2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"], [3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"], [4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"], [5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [7, "module-cryptographic_estimators.LEEstimator.le_algorithm"], [8, "module-cryptographic_estimators.LEEstimator.le_constants"], [9, "module-cryptographic_estimators.LEEstimator.le_estimator"], [10, "module-cryptographic_estimators.LEEstimator.le_helper"], [11, "module-cryptographic_estimators.LEEstimator.le_problem"], [12, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack"], [13, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm"], [14, "module-cryptographic_estimators.MAYOEstimator.mayo_constants"], [15, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator"], [16, "module-cryptographic_estimators.MAYOEstimator.mayo_helper"], [17, "module-cryptographic_estimators.MAYOEstimator.mayo_problem"], [18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"], [19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"], [20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"], [21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"], [22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"], [23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"], [24, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"], [25, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"], [26, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"], [27, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"], [28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"], [29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"], [30, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"], [31, "module-cryptographic_estimators.MQEstimator.mq_algorithm"], [32, "module-cryptographic_estimators.MQEstimator.mq_constants"], [33, "module-cryptographic_estimators.MQEstimator.mq_estimator"], [34, "module-cryptographic_estimators.MQEstimator.mq_helper"], [35, "module-cryptographic_estimators.MQEstimator.mq_problem"], [36, "module-cryptographic_estimators.MQEstimator.series.hilbert"], [37, "module-cryptographic_estimators.MQEstimator.series.nmonomial"], [38, "module-cryptographic_estimators.MQEstimator.witness_degree"], [39, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"], [40, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"], [41, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"], [42, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"], [43, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"], [44, "module-cryptographic_estimators.MREstimator.mr_algorithm"], [45, "module-cryptographic_estimators.MREstimator.mr_constants"], [46, "module-cryptographic_estimators.MREstimator.mr_estimator"], [47, "module-cryptographic_estimators.MREstimator.mr_helper"], [48, "module-cryptographic_estimators.MREstimator.mr_problem"], [49, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"], [50, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"], [51, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"], [52, "module-cryptographic_estimators.PEEstimator.pe_algorithm"], [53, "module-cryptographic_estimators.PEEstimator.pe_constants"], [54, "module-cryptographic_estimators.PEEstimator.pe_estimator"], [55, "module-cryptographic_estimators.PEEstimator.pe_helper"], [56, "module-cryptographic_estimators.PEEstimator.pe_problem"], [57, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"], [58, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"], [59, "module-cryptographic_estimators.PKEstimator.pk_algorithm"], [60, "module-cryptographic_estimators.PKEstimator.pk_constants"], [61, "module-cryptographic_estimators.PKEstimator.pk_estimator"], [62, "module-cryptographic_estimators.PKEstimator.pk_helper"], [63, "module-cryptographic_estimators.PKEstimator.pk_problem"], [64, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"], [65, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin"], [66, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"], [67, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"], [68, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"], [69, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"], [70, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"], [71, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"], [72, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"], [73, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"], [74, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"], [75, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [76, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [77, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"], [78, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"], [79, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"], [80, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [81, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [82, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [83, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [84, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [85, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"], [86, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"], [87, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"], [88, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"], [89, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"], [90, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [91, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [92, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"], [93, "module-cryptographic_estimators.SDEstimator.sd_algorithm"], [94, "module-cryptographic_estimators.SDEstimator.sd_constants"], [95, "module-cryptographic_estimators.SDEstimator.sd_estimator"], [96, "module-cryptographic_estimators.SDEstimator.sd_helper"], [97, "module-cryptographic_estimators.SDEstimator.sd_problem"], [98, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"], [99, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"], [100, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"], [101, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"], [102, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"], [103, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"], [104, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"], [105, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"], [106, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"], [107, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"], [108, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"], [109, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"], [110, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"], [111, "module-cryptographic_estimators.UOVEstimator.uov_constants"], [112, "module-cryptographic_estimators.UOVEstimator.uov_estimator"], [113, "module-cryptographic_estimators.UOVEstimator.uov_problem"], [114, "module-cryptographic_estimators.base_algorithm"], [115, "module-cryptographic_estimators.base_constants"], [116, "module-cryptographic_estimators.base_estimator"], [117, "module-cryptographic_estimators.base_problem"], [118, "module-cryptographic_estimators.estimation_renderer"], [119, "module-cryptographic_estimators.helper"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters"]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1"]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2"]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[0, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity"]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm"]], "attack_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[1, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[1, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity"]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator"]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[2, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate"]], "estimator_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms"]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset"]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[2, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table"]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem"]], "cryptographic_estimators.dummyestimator.dummy_problem": [[3, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[3, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time"]], "bbps (class in cryptographic_estimators.leestimator.lealgorithms.bbps)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.bbps": [[4, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w"]], "w_prime() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[4, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w_prime"]], "beullens (class in cryptographic_estimators.leestimator.lealgorithms.beullens)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.beullens": [[5, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[5, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.leestimator.lealgorithms.leon)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.leon": [[6, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[6, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.w"]], "lealgorithm (class in cryptographic_estimators.leestimator.le_algorithm)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm"]], "attack_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.complexity_type"]], "cryptographic_estimators.leestimator.le_algorithm": [[7, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[7, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.time_complexity"]], "isd (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.ISD"]], "lists (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS"]], "lists_size (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS_SIZE"]], "normal_form (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NORMAL_FORM"]], "nw (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NW"]], "verboseinformation (class in cryptographic_estimators.leestimator.le_constants)": [[8, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation"]], "cryptographic_estimators.leestimator.le_constants": [[8, "module-cryptographic_estimators.LEEstimator.le_constants"]], "leestimator (class in cryptographic_estimators.leestimator.le_estimator)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator"]], "algorithm_names() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.complexity_type"]], "cryptographic_estimators.leestimator.le_estimator": [[9, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "estimate() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimate"]], "estimator_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.leestimator.le_estimator.leestimator attribute)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.reset"]], "table() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[9, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.table"]], "cost_to_find_random_2dim_subcodes_with_support_w() (in module cryptographic_estimators.leestimator.le_helper)": [[10, "cryptographic_estimators.LEEstimator.le_helper.cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.leestimator.le_helper": [[10, "module-cryptographic_estimators.LEEstimator.le_helper"]], "leproblem (class in cryptographic_estimators.leestimator.le_problem)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem"]], "cryptographic_estimators.leestimator.le_problem": [[11, "module-cryptographic_estimators.LEEstimator.le_problem"]], "expected_number_solutions() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[11, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_time"]], "directattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack"]], "k() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.K"]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.complexity_type"]], "cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack": [[12, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack"]], "get_fastest_mq_algorithm() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.get_fastest_mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[12, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.time_complexity"]], "k() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.K"]], "mayoalgorithm (class in cryptographic_estimators.mayoestimator.mayo_algorithm)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm"]], "attack_type (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.complexity_type"]], "cryptographic_estimators.mayoestimator.mayo_algorithm": [[13, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[13, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.time_complexity"]], "cryptographic_estimators.mayoestimator.mayo_constants": [[14, "module-cryptographic_estimators.MAYOEstimator.mayo_constants"]], "mayoestimator (class in cryptographic_estimators.mayoestimator.mayo_estimator)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator"]], "algorithm_names() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.complexity_type"]], "cryptographic_estimators.mayoestimator.mayo_estimator": [[15, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator"]], "estimate() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.estimate"]], "estimator_type (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator attribute)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.reset"]], "table() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[15, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.table"]], "cryptographic_estimators.mayoestimator.mayo_helper": [[16, "module-cryptographic_estimators.MAYOEstimator.mayo_helper"]], "mayoproblem (class in cryptographic_estimators.mayoestimator.mayo_problem)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem"]], "cost_one_hash (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem property)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.cost_one_hash"]], "cryptographic_estimators.mayoestimator.mayo_problem": [[17, "module-cryptographic_estimators.MAYOEstimator.mayo_problem"]], "expected_number_solutions() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.get_parameters"]], "hashes_to_basic_operations() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.hashes_to_basic_operations"]], "npolynomials() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.order_of_the_field"]], "order_oil_space() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.order_oil_space"]], "theta (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem property)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.to_bitcomplexity_time"]], "whipping_parameter() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[17, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.whipping_parameter"]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[18, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[18, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity"]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl": [[19, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.time_complexity"]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[19, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.variant"]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[20, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[20, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity"]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred"]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D"], [21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[21, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant"]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[21, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity"]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[22, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter"]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[22, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity"]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[23, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity"]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[23, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity"]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[24, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[24, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity"]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[25, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[25, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity"]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[26, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[26, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity"]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[27, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[27, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity"]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity"]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity"]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[30, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[30, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[30, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system"]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[30, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[30, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system"]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm"]], "attack_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type"]], "cryptographic_estimators.mqestimator.mq_algorithm": [[31, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[31, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity"]], "cryptographic_estimators.mqestimator.mq_constants": [[32, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator"]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type"]], "cryptographic_estimators.mqestimator.mq_estimator": [[33, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate"]], "estimator_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset"]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[33, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table"]], "cryptographic_estimators.mqestimator.mq_helper": [[34, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "ngates() (in module cryptographic_estimators.mqestimator.mq_helper)": [[34, "cryptographic_estimators.MQEstimator.mq_helper.ngates"]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[34, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree"]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[34, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree"]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[34, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients"]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem"]], "cryptographic_estimators.mqestimator.mq_problem": [[35, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_parameters"]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters"]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field"]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system"]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system"]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system"]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field"]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[35, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time"]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries"]], "coefficient_of_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.coefficient_of_degree"]], "coefficient_up_to_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.coefficient_up_to_degree"]], "cryptographic_estimators.mqestimator.series.hilbert": [[36, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees"]], "first_nonpositive_coefficient() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_coefficient"]], "first_nonpositive_coefficient_up_to_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_coefficient_up_to_degree"]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials"]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables"]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[36, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision"]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[37, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries"]], "cryptographic_estimators.mqestimator.series.nmonomial": [[37, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[37, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree"]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[37, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree"]], "cryptographic_estimators.mqestimator.witness_degree": [[38, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[38, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[38, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system"]], "bigk (class in cryptographic_estimators.mrestimator.mralgorithms.big_k)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.big_k": [[39, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[39, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.time_complexity"]], "bruteforce (class in cryptographic_estimators.mrestimator.mralgorithms.bruteforce)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.bruteforce": [[40, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[40, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.time_complexity"]], "kernelsearch (class in cryptographic_estimators.mrestimator.mralgorithms.kernel_search)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.kernel_search": [[41, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[41, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.time_complexity"]], "minors (class in cryptographic_estimators.mrestimator.mralgorithms.minors)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.minors": [[42, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[42, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.time_complexity"]], "supportminors (class in cryptographic_estimators.mrestimator.mralgorithms.support_minors)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.attack_type"]], "b() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.b"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.support_minors": [[43, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_complexity"]], "nprime() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.nprime"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.time_complexity"]], "variant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[43, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.variant"]], "mralgorithm (class in cryptographic_estimators.mrestimator.mr_algorithm)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm"]], "attack_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.cost_reduction"]], "cryptographic_estimators.mrestimator.mr_algorithm": [[44, "module-cryptographic_estimators.MREstimator.mr_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[44, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.time_complexity"]], "cryptographic_estimators.mrestimator.mr_constants": [[45, "module-cryptographic_estimators.MREstimator.mr_constants"]], "mrestimator (class in cryptographic_estimators.mrestimator.mr_estimator)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator"]], "algorithm_names() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.complexity_type"]], "cryptographic_estimators.mrestimator.mr_estimator": [[46, "module-cryptographic_estimators.MREstimator.mr_estimator"]], "estimate() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimate"]], "estimator_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mrestimator.mr_estimator.mrestimator attribute)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.nalgorithms"]], "reset() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.reset"]], "table() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[46, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.table"]], "variant (class in cryptographic_estimators.mrestimator.mr_helper)": [[47, "cryptographic_estimators.MREstimator.mr_helper.Variant"]], "block_wiedemann (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[47, "cryptographic_estimators.MREstimator.mr_helper.Variant.block_wiedemann"]], "cryptographic_estimators.mrestimator.mr_helper": [[47, "module-cryptographic_estimators.MREstimator.mr_helper"]], "deteterminant_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[47, "cryptographic_estimators.MREstimator.mr_helper.deteterminant_of_A"]], "entry_i_j_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[47, "cryptographic_estimators.MREstimator.mr_helper.entry_i_j_of_A"]], "matrix_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[47, "cryptographic_estimators.MREstimator.mr_helper.matrix_A"]], "minors_polynomial() (in module cryptographic_estimators.mrestimator.mr_helper)": [[47, "cryptographic_estimators.MREstimator.mr_helper.minors_polynomial"]], "minors_series() (in module cryptographic_estimators.mrestimator.mr_helper)": [[47, "cryptographic_estimators.MREstimator.mr_helper.minors_series"]], "strassen (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[47, "cryptographic_estimators.MREstimator.mr_helper.Variant.strassen"]], "mrproblem (class in cryptographic_estimators.mrestimator.mr_problem)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem"]], "cryptographic_estimators.mrestimator.mr_problem": [[48, "module-cryptographic_estimators.MREstimator.mr_problem"]], "expected_number_solutions() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.get_parameters"]], "length_solution_vector() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.length_solution_vector"]], "ncolumns() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.ncolumns"]], "nmatrices() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nmatrices"]], "nrows() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nrows"]], "order_of_the_field() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.order_of_the_field"]], "target_rank() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.target_rank"]], "theta (cryptographic_estimators.mrestimator.mr_problem.mrproblem property)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[48, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_time"]], "beullens (class in cryptographic_estimators.peestimator.pealgorithms.beullens)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.beullens": [[49, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[49, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.peestimator.pealgorithms.leon)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.leon": [[50, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[50, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.w"]], "ssa (class in cryptographic_estimators.peestimator.pealgorithms.ssa)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.ssa": [[51, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[51, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.time_complexity"]], "pealgorithm (class in cryptographic_estimators.peestimator.pe_algorithm)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm"]], "attack_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.complexity_type"]], "cryptographic_estimators.peestimator.pe_algorithm": [[52, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[52, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.time_complexity"]], "lists_size (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[53, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LISTS_SIZE"]], "list_computation (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[53, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LIST_COMPUTATION"]], "normal_form (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[53, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.NORMAL_FORM"]], "verboseinformation (class in cryptographic_estimators.peestimator.pe_constants)": [[53, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation"]], "cryptographic_estimators.peestimator.pe_constants": [[53, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "peestimator (class in cryptographic_estimators.peestimator.pe_estimator)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator"]], "algorithm_names() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.complexity_type"]], "cryptographic_estimators.peestimator.pe_estimator": [[54, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "estimate() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimate"]], "estimator_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.peestimator.pe_estimator.peestimator attribute)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.reset"]], "table() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[54, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.table"]], "cryptographic_estimators.peestimator.pe_helper": [[55, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "gv_distance() (in module cryptographic_estimators.peestimator.pe_helper)": [[55, "cryptographic_estimators.PEEstimator.pe_helper.gv_distance"]], "hamming_ball() (in module cryptographic_estimators.peestimator.pe_helper)": [[55, "cryptographic_estimators.PEEstimator.pe_helper.hamming_ball"]], "median_size_of_random_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[55, "cryptographic_estimators.PEEstimator.pe_helper.median_size_of_random_orbit"]], "number_of_weight_d_codewords() (in module cryptographic_estimators.peestimator.pe_helper)": [[55, "cryptographic_estimators.PEEstimator.pe_helper.number_of_weight_d_codewords"]], "random_sparse_vec_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[55, "cryptographic_estimators.PEEstimator.pe_helper.random_sparse_vec_orbit"]], "peproblem (class in cryptographic_estimators.peestimator.pe_problem)": [[56, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem"]], "cryptographic_estimators.peestimator.pe_problem": [[56, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "expected_number_solutions() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[56, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[56, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[56, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[56, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_time"]], "kmp (class in cryptographic_estimators.pkestimator.pkalgorithms.kmp)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP"]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.kmp": [[57, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.time_complexity"]], "u() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[57, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.u"]], "sbc (class in cryptographic_estimators.pkestimator.pkalgorithms.sbc)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC"]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.sbc": [[58, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "d() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.d"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.time_complexity"]], "w() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w"]], "w1() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[58, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w1"]], "pkalgorithm (class in cryptographic_estimators.pkestimator.pk_algorithm)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm"]], "attack_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.complexity_type"]], "cryptographic_estimators.pkestimator.pk_algorithm": [[59, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[59, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.time_complexity"]], "kmp_final_list (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[60, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_FINAL_LIST"]], "kmp_l1 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[60, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L1"]], "kmp_l2 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[60, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L2"]], "sbc_isd (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[60, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_ISD"]], "sbc_u (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[60, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_U"]], "verboseinformation (class in cryptographic_estimators.pkestimator.pk_constants)": [[60, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation"]], "cryptographic_estimators.pkestimator.pk_constants": [[60, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pkestimator (class in cryptographic_estimators.pkestimator.pk_estimator)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator"]], "algorithm_names() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.complexity_type"]], "cryptographic_estimators.pkestimator.pk_estimator": [[61, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "estimate() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimate"]], "estimator_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.pkestimator.pk_estimator.pkestimator attribute)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.nalgorithms"]], "reset() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.reset"]], "table() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[61, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.table"]], "beullens_lee_brickell_adaptation() (in module cryptographic_estimators.pkestimator.pk_helper)": [[62, "cryptographic_estimators.PKEstimator.pk_helper.beullens_lee_brickell_adaptation"]], "cost_for_finding_subcode() (in module cryptographic_estimators.pkestimator.pk_helper)": [[62, "cryptographic_estimators.PKEstimator.pk_helper.cost_for_finding_subcode"]], "cryptographic_estimators.pkestimator.pk_helper": [[62, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "gauss_binomial() (in module cryptographic_estimators.pkestimator.pk_helper)": [[62, "cryptographic_estimators.PKEstimator.pk_helper.gauss_binomial"]], "lof() (in module cryptographic_estimators.pkestimator.pk_helper)": [[62, "cryptographic_estimators.PKEstimator.pk_helper.lof"]], "pkproblem (class in cryptographic_estimators.pkestimator.pk_problem)": [[63, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem"]], "cryptographic_estimators.pkestimator.pk_problem": [[63, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "expected_number_solutions() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[63, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[63, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[63, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[63, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_time"]], "ccj (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj": [[64, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.ell"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[64, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.time_complexity"]], "ccjlin (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin": [[65, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[65, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.time_complexity"]], "regularisdenum (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum": [[66, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.ell"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.optimal_parameters"]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.p"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[66, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.time_complexity"]], "regularisdperm (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm": [[67, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[67, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.time_complexity"]], "regularisdrep (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep": [[68, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.ell"]], "eps_x() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_x"]], "eps_y() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_y"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.optimal_parameters"]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.p"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[68, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.time_complexity"]], "sdattack (class in cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack": [[69, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[69, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.time_complexity"]], "regsdalgorithm (class in cryptographic_estimators.regsdestimator.regsd_algorithm)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm"]], "attack_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.complexity_type"]], "cryptographic_estimators.regsdestimator.regsd_algorithm": [[70, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[70, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.time_complexity"]], "cryptographic_estimators.regsdestimator.regsd_constants": [[71, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"]], "regsdestimator (class in cryptographic_estimators.regsdestimator.regsd_estimator)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator"]], "algorithm_names() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.complexity_type"]], "cryptographic_estimators.regsdestimator.regsd_estimator": [[72, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"]], "estimate() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimate"]], "estimator_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator attribute)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.reset"]], "table() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[72, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.table"]], "cryptographic_estimators.regsdestimator.regsd_helper": [[73, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"]], "r_int() (in module cryptographic_estimators.regsdestimator.regsd_helper)": [[73, "cryptographic_estimators.RegSDEstimator.regsd_helper.r_int"]], "regsdproblem (class in cryptographic_estimators.regsdestimator.regsd_problem)": [[74, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem"]], "cryptographic_estimators.regsdestimator.regsd_problem": [[74, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"]], "expected_number_solutions() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[74, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[74, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[74, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[74, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_time"]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[75, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges"]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[75, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity"]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM"]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2"]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[76, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[76, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity"]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[77, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1"]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[77, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2"]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[78, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[78, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2"]], "bjmmplus (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus": [[79, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l"]], "l1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l1"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[79, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.time_complexity"]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[80, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[80, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2"]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[81, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[81, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity"]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov"]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2"]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[82, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[82, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity"]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[83, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[83, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[84, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[84, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity"]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[85, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[85, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters"]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[86, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[86, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[86, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters"]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[87, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[87, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[87, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters"]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[88, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[88, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[88, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters"]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[89, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[89, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[89, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters"]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[90, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[90, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[90, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters"]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[91, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[91, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[91, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters"]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy"]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[92, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy"]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples"]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time"]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic"]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[92, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap"]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm"]], "attack_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type"]], "cryptographic_estimators.sdestimator.sd_algorithm": [[93, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r"]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[93, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[94, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation"]], "cryptographic_estimators.sdestimator.sd_constants": [[94, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator"]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type"]], "cryptographic_estimators.sdestimator.sd_estimator": [[95, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate"]], "estimator_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset"]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[95, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table"]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[96, "cryptographic_estimators.SDEstimator.sd_helper.binom"]], "cryptographic_estimators.sdestimator.sd_helper": [[96, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[96, "cryptographic_estimators.SDEstimator.sd_helper.min_max"]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[97, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem"]], "cryptographic_estimators.sdestimator.sd_problem": [[97, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[97, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[97, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[97, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[97, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time"]], "leebrickell (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell": [[98, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[98, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.time_complexity"]], "prange (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange": [[99, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[99, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern": [[100, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.has_optimal_parameter"]], "l() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[100, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.time_complexity"]], "sdfqalgorithm (class in cryptographic_estimators.sdfqestimator.sdfq_algorithm)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_algorithm": [[101, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[101, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdfqestimator.sdfq_constants)": [[102, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation"]], "cryptographic_estimators.sdfqestimator.sdfq_constants": [[102, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfqestimator (class in cryptographic_estimators.sdfqestimator.sdfq_estimator)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator"]], "algorithm_names() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_estimator": [[103, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "estimate() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimate"]], "estimator_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator attribute)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.reset"]], "table() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[103, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.table"]], "binom() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[104, "cryptographic_estimators.SDFqEstimator.sdfq_helper.binom"]], "cryptographic_estimators.sdfqestimator.sdfq_helper": [[104, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "min_max() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[104, "cryptographic_estimators.SDFqEstimator.sdfq_helper.min_max"]], "sdfqproblem (class in cryptographic_estimators.sdfqestimator.sdfq_problem)": [[105, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem"]], "cryptographic_estimators.sdfqestimator.sdfq_problem": [[105, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "expected_number_solutions() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[105, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[105, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[105, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[105, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_time"]], "collisionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.collision_attack)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack"]], "x() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.X"]], "y() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.Y"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.collision_attack": [[106, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[106, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.time_complexity"]], "directattack (class in cryptographic_estimators.uovestimator.uovalgorithms.direct_attack)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.direct_attack": [[107, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"]], "expected_number_solutions() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.expected_number_solutions"]], "get_fastest_mq_algorithm() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_fastest_mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[107, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.time_complexity"]], "intersectionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack": [[108, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.has_optimal_parameter"]], "k() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.k"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[108, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.time_complexity"]], "kipnisshamir (class in cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir": [[109, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[109, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.time_complexity"]], "uovalgorithm (class in cryptographic_estimators.uovestimator.uov_algorithm)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm"]], "attack_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.complexity_type"]], "cryptographic_estimators.uovestimator.uov_algorithm": [[110, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[110, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.time_complexity"]], "cryptographic_estimators.uovestimator.uov_constants": [[111, "module-cryptographic_estimators.UOVEstimator.uov_constants"]], "uovestimator (class in cryptographic_estimators.uovestimator.uov_estimator)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator"]], "algorithm_names() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.complexity_type"]], "cryptographic_estimators.uovestimator.uov_estimator": [[112, "module-cryptographic_estimators.UOVEstimator.uov_estimator"]], "estimate() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimate"]], "estimator_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.uovestimator.uov_estimator.uovestimator attribute)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.nalgorithms"]], "reset() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.reset"]], "table() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[112, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.table"]], "uovproblem (class in cryptographic_estimators.uovestimator.uov_problem)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem"]], "cost_one_hash (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.cost_one_hash"]], "cryptographic_estimators.uovestimator.uov_problem": [[113, "module-cryptographic_estimators.UOVEstimator.uov_problem"]], "expected_number_solutions() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.get_parameters"]], "hashes_to_basic_operations() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.hashes_to_basic_operations"]], "npolynomials() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.npolynomials"]], "nvariables() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.order_of_the_field"]], "theta (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[113, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_time"]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm"]], "attack_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type"]], "cryptographic_estimators.base_algorithm": [[114, "module-cryptographic_estimators.base_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity"]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[114, "cryptographic_estimators.base_algorithm.optimal_parameter"]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[114, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity"]], "cryptographic_estimators.base_constants": [[115, "module-cryptographic_estimators.base_constants"]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator"]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type"]], "cryptographic_estimators.base_estimator": [[116, "module-cryptographic_estimators.base_estimator"]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.estimate"]], "estimator_type (cryptographic_estimators.base_estimator.baseestimator property)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms"]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.reset"]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[116, "cryptographic_estimators.base_estimator.BaseEstimator.table"]], "baseproblem (class in cryptographic_estimators.base_problem)": [[117, "cryptographic_estimators.base_problem.BaseProblem"]], "cryptographic_estimators.base_problem": [[117, "module-cryptographic_estimators.base_problem"]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[117, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.base_problem.baseproblem method)": [[117, "cryptographic_estimators.base_problem.BaseProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[117, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[117, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time"]], "estimationrenderer (class in cryptographic_estimators.estimation_renderer)": [[118, "cryptographic_estimators.estimation_renderer.EstimationRenderer"]], "as_table() (cryptographic_estimators.estimation_renderer.estimationrenderer method)": [[118, "cryptographic_estimators.estimation_renderer.EstimationRenderer.as_table"]], "cryptographic_estimators.estimation_renderer": [[118, "module-cryptographic_estimators.estimation_renderer"]], "complexitytype (class in cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.ComplexityType"]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[119, "cryptographic_estimators.helper.ComplexityType.ESTIMATE"]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[119, "cryptographic_estimators.helper.ComplexityType.TILDEO"]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.concat_all_tables"]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.concat_pretty_tables"]], "cryptographic_estimators.helper": [[119, "module-cryptographic_estimators.helper"]], "gf_order_to_characteristic() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.gf_order_to_characteristic"]], "gf_order_to_degree() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.gf_order_to_degree"]], "is_power_of_two() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.is_power_of_two"]], "is_prime_power() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.is_prime_power"]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[119, "cryptographic_estimators.helper.round_or_truncate"]]}})