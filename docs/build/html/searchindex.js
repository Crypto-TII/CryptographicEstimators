Search.setIndex({"docnames": ["BIKEEstimator/BIKEAlgorithms/sd_key_attack", "BIKEEstimator/BIKEAlgorithms/sd_msg_attack", "BIKEEstimator/bike_algorithm", "BIKEEstimator/bike_constants", "BIKEEstimator/bike_estimator", "BIKEEstimator/bike_problem", "DummyEstimator/DummyAlgorithms/dummy_algorithm1", "DummyEstimator/dummy_algorithm", "DummyEstimator/dummy_estimator", "DummyEstimator/dummy_problem", "LEEstimator/LEAlgorithms/bbps", "LEEstimator/LEAlgorithms/beullens", "LEEstimator/LEAlgorithms/leon", "LEEstimator/le_algorithm", "LEEstimator/le_constants", "LEEstimator/le_estimator", "LEEstimator/le_helper", "LEEstimator/le_problem", "MAYOEstimator/MAYOAlgorithms/claw_finding", "MAYOEstimator/MAYOAlgorithms/direct_attack", "MAYOEstimator/MAYOAlgorithms/intersection_attack", "MAYOEstimator/MAYOAlgorithms/kipnis_shamir", "MAYOEstimator/MAYOAlgorithms/reconciliation_attack", "MAYOEstimator/mayo_algorithm", "MAYOEstimator/mayo_constants", "MAYOEstimator/mayo_estimator", "MAYOEstimator/mayo_helper", "MAYOEstimator/mayo_problem", "MQEstimator/MQAlgorithms/bjorklund", "MQEstimator/MQAlgorithms/booleansolve_fxl", "MQEstimator/MQAlgorithms/cgmta", "MQEstimator/MQAlgorithms/crossbred", "MQEstimator/MQAlgorithms/dinur1", "MQEstimator/MQAlgorithms/dinur2", "MQEstimator/MQAlgorithms/exhaustive_search", "MQEstimator/MQAlgorithms/f5", "MQEstimator/MQAlgorithms/hybrid_f5", "MQEstimator/MQAlgorithms/kpg", "MQEstimator/MQAlgorithms/lokshtanov", "MQEstimator/MQAlgorithms/mht", "MQEstimator/degree_of_regularity", "MQEstimator/mq_algorithm", "MQEstimator/mq_constants", "MQEstimator/mq_estimator", "MQEstimator/mq_helper", "MQEstimator/mq_problem", "MQEstimator/series/hilbert", "MQEstimator/series/nmonomial", "MQEstimator/witness_degree", "MREstimator/MRAlgorithms/big_k", "MREstimator/MRAlgorithms/bruteforce", "MREstimator/MRAlgorithms/kernel_search", "MREstimator/MRAlgorithms/minors", "MREstimator/MRAlgorithms/support_minors", "MREstimator/mr_algorithm", "MREstimator/mr_constants", "MREstimator/mr_estimator", "MREstimator/mr_helper", "MREstimator/mr_problem", "PEEstimator/PEAlgorithms/beullens", "PEEstimator/PEAlgorithms/leon", "PEEstimator/PEAlgorithms/ssa", "PEEstimator/pe_algorithm", "PEEstimator/pe_constants", "PEEstimator/pe_estimator", "PEEstimator/pe_helper", "PEEstimator/pe_problem", "PKEstimator/PKAlgorithms/kmp", "PKEstimator/PKAlgorithms/sbc", "PKEstimator/pk_algorithm", "PKEstimator/pk_constants", "PKEstimator/pk_estimator", "PKEstimator/pk_helper", "PKEstimator/pk_problem", "RegSDEstimator/RegSDAlgorithms/ccj", "RegSDEstimator/RegSDAlgorithms/ccj_lin", "RegSDEstimator/RegSDAlgorithms/regisd_enum", "RegSDEstimator/RegSDAlgorithms/regisd_perm", "RegSDEstimator/RegSDAlgorithms/regisd_rep", "RegSDEstimator/RegSDAlgorithms/sd_attack", "RegSDEstimator/regsd_algorithm", "RegSDEstimator/regsd_constants", "RegSDEstimator/regsd_estimator", "RegSDEstimator/regsd_helper", "RegSDEstimator/regsd_problem", "SDEstimator/SDAlgorithms/ball_collision", "SDEstimator/SDAlgorithms/bjmm", "SDEstimator/SDAlgorithms/bjmm_dw", "SDEstimator/SDAlgorithms/bjmm_pdw", "SDEstimator/SDAlgorithms/bjmm_plus", "SDEstimator/SDAlgorithms/both_may", "SDEstimator/SDAlgorithms/dumer", "SDEstimator/SDAlgorithms/may_ozerov", "SDEstimator/SDAlgorithms/prange", "SDEstimator/SDAlgorithms/stern", "SDEstimator/SDWorkfactorModels/ball_collision", "SDEstimator/SDWorkfactorModels/bjmm", "SDEstimator/SDWorkfactorModels/both_may", "SDEstimator/SDWorkfactorModels/dumer", "SDEstimator/SDWorkfactorModels/may_ozerov", "SDEstimator/SDWorkfactorModels/prange", "SDEstimator/SDWorkfactorModels/stern", "SDEstimator/SDWorkfactorModels/workfactor_helper", "SDEstimator/sd_algorithm", "SDEstimator/sd_constants", "SDEstimator/sd_estimator", "SDEstimator/sd_helper", "SDEstimator/sd_problem", "SDFqEstimator/SDFqAlgorithms/leebrickell", "SDFqEstimator/SDFqAlgorithms/prange", "SDFqEstimator/SDFqAlgorithms/stern", "SDFqEstimator/sdfq_algorithm", "SDFqEstimator/sdfq_constants", "SDFqEstimator/sdfq_estimator", "SDFqEstimator/sdfq_helper", "SDFqEstimator/sdfq_problem", "UOVEstimator/UOVAlgorithms/collision_attack", "UOVEstimator/UOVAlgorithms/direct_attack", "UOVEstimator/UOVAlgorithms/intersection_attack", "UOVEstimator/UOVAlgorithms/kipnis_shamir", "UOVEstimator/uov_algorithm", "UOVEstimator/uov_constants", "UOVEstimator/uov_estimator", "UOVEstimator/uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "index", "references"], "filenames": ["BIKEEstimator/BIKEAlgorithms/sd_key_attack.rst", "BIKEEstimator/BIKEAlgorithms/sd_msg_attack.rst", "BIKEEstimator/bike_algorithm.rst", "BIKEEstimator/bike_constants.rst", "BIKEEstimator/bike_estimator.rst", "BIKEEstimator/bike_problem.rst", "DummyEstimator/DummyAlgorithms/dummy_algorithm1.rst", "DummyEstimator/dummy_algorithm.rst", "DummyEstimator/dummy_estimator.rst", "DummyEstimator/dummy_problem.rst", "LEEstimator/LEAlgorithms/bbps.rst", "LEEstimator/LEAlgorithms/beullens.rst", "LEEstimator/LEAlgorithms/leon.rst", "LEEstimator/le_algorithm.rst", "LEEstimator/le_constants.rst", "LEEstimator/le_estimator.rst", "LEEstimator/le_helper.rst", "LEEstimator/le_problem.rst", "MAYOEstimator/MAYOAlgorithms/claw_finding.rst", "MAYOEstimator/MAYOAlgorithms/direct_attack.rst", "MAYOEstimator/MAYOAlgorithms/intersection_attack.rst", "MAYOEstimator/MAYOAlgorithms/kipnis_shamir.rst", "MAYOEstimator/MAYOAlgorithms/reconciliation_attack.rst", "MAYOEstimator/mayo_algorithm.rst", "MAYOEstimator/mayo_constants.rst", "MAYOEstimator/mayo_estimator.rst", "MAYOEstimator/mayo_helper.rst", "MAYOEstimator/mayo_problem.rst", "MQEstimator/MQAlgorithms/bjorklund.rst", "MQEstimator/MQAlgorithms/booleansolve_fxl.rst", "MQEstimator/MQAlgorithms/cgmta.rst", "MQEstimator/MQAlgorithms/crossbred.rst", "MQEstimator/MQAlgorithms/dinur1.rst", "MQEstimator/MQAlgorithms/dinur2.rst", "MQEstimator/MQAlgorithms/exhaustive_search.rst", "MQEstimator/MQAlgorithms/f5.rst", "MQEstimator/MQAlgorithms/hybrid_f5.rst", "MQEstimator/MQAlgorithms/kpg.rst", "MQEstimator/MQAlgorithms/lokshtanov.rst", "MQEstimator/MQAlgorithms/mht.rst", "MQEstimator/degree_of_regularity.rst", "MQEstimator/mq_algorithm.rst", "MQEstimator/mq_constants.rst", "MQEstimator/mq_estimator.rst", "MQEstimator/mq_helper.rst", "MQEstimator/mq_problem.rst", "MQEstimator/series/hilbert.rst", "MQEstimator/series/nmonomial.rst", "MQEstimator/witness_degree.rst", "MREstimator/MRAlgorithms/big_k.rst", "MREstimator/MRAlgorithms/bruteforce.rst", "MREstimator/MRAlgorithms/kernel_search.rst", "MREstimator/MRAlgorithms/minors.rst", "MREstimator/MRAlgorithms/support_minors.rst", "MREstimator/mr_algorithm.rst", "MREstimator/mr_constants.rst", "MREstimator/mr_estimator.rst", "MREstimator/mr_helper.rst", "MREstimator/mr_problem.rst", "PEEstimator/PEAlgorithms/beullens.rst", "PEEstimator/PEAlgorithms/leon.rst", "PEEstimator/PEAlgorithms/ssa.rst", "PEEstimator/pe_algorithm.rst", "PEEstimator/pe_constants.rst", "PEEstimator/pe_estimator.rst", "PEEstimator/pe_helper.rst", "PEEstimator/pe_problem.rst", "PKEstimator/PKAlgorithms/kmp.rst", "PKEstimator/PKAlgorithms/sbc.rst", "PKEstimator/pk_algorithm.rst", "PKEstimator/pk_constants.rst", "PKEstimator/pk_estimator.rst", "PKEstimator/pk_helper.rst", "PKEstimator/pk_problem.rst", "RegSDEstimator/RegSDAlgorithms/ccj.rst", "RegSDEstimator/RegSDAlgorithms/ccj_lin.rst", "RegSDEstimator/RegSDAlgorithms/regisd_enum.rst", "RegSDEstimator/RegSDAlgorithms/regisd_perm.rst", "RegSDEstimator/RegSDAlgorithms/regisd_rep.rst", "RegSDEstimator/RegSDAlgorithms/sd_attack.rst", "RegSDEstimator/regsd_algorithm.rst", "RegSDEstimator/regsd_constants.rst", "RegSDEstimator/regsd_estimator.rst", "RegSDEstimator/regsd_helper.rst", "RegSDEstimator/regsd_problem.rst", "SDEstimator/SDAlgorithms/ball_collision.rst", "SDEstimator/SDAlgorithms/bjmm.rst", "SDEstimator/SDAlgorithms/bjmm_dw.rst", "SDEstimator/SDAlgorithms/bjmm_pdw.rst", "SDEstimator/SDAlgorithms/bjmm_plus.rst", "SDEstimator/SDAlgorithms/both_may.rst", "SDEstimator/SDAlgorithms/dumer.rst", "SDEstimator/SDAlgorithms/may_ozerov.rst", "SDEstimator/SDAlgorithms/prange.rst", "SDEstimator/SDAlgorithms/stern.rst", "SDEstimator/SDWorkfactorModels/ball_collision.rst", "SDEstimator/SDWorkfactorModels/bjmm.rst", "SDEstimator/SDWorkfactorModels/both_may.rst", "SDEstimator/SDWorkfactorModels/dumer.rst", "SDEstimator/SDWorkfactorModels/may_ozerov.rst", "SDEstimator/SDWorkfactorModels/prange.rst", "SDEstimator/SDWorkfactorModels/stern.rst", "SDEstimator/SDWorkfactorModels/workfactor_helper.rst", "SDEstimator/sd_algorithm.rst", "SDEstimator/sd_constants.rst", "SDEstimator/sd_estimator.rst", "SDEstimator/sd_helper.rst", "SDEstimator/sd_problem.rst", "SDFqEstimator/SDFqAlgorithms/leebrickell.rst", "SDFqEstimator/SDFqAlgorithms/prange.rst", "SDFqEstimator/SDFqAlgorithms/stern.rst", "SDFqEstimator/sdfq_algorithm.rst", "SDFqEstimator/sdfq_constants.rst", "SDFqEstimator/sdfq_estimator.rst", "SDFqEstimator/sdfq_helper.rst", "SDFqEstimator/sdfq_problem.rst", "UOVEstimator/UOVAlgorithms/collision_attack.rst", "UOVEstimator/UOVAlgorithms/direct_attack.rst", "UOVEstimator/UOVAlgorithms/intersection_attack.rst", "UOVEstimator/UOVAlgorithms/kipnis_shamir.rst", "UOVEstimator/uov_algorithm.rst", "UOVEstimator/uov_constants.rst", "UOVEstimator/uov_estimator.rst", "UOVEstimator/uov_problem.rst", "base_algorithm.rst", "base_constants.rst", "base_estimator.rst", "base_problem.rst", "estimation_renderer.rst", "helper.rst", "index.rst", "references.rst"], "titles": ["sd_key_attack", "sd_msg_attack", "bike_algorithm", "bike_constants", "bike_estimator", "bike_problem", "dummy_algorithm1", "dummy_algorithm", "dummy_estimator", "dummy_problem", "bbps", "beullens", "leon", "le_algorithm", "le_constants", "le_estimator", "le_helper", "le_problem", "claw_finding", "direct_attack", "intersection_attack", "kipnis_shamir", "reconciliation_attack", "mayo_algorithm", "mayo_constants", "mayo_estimator", "mayo_helper", "mayo_problem", "bjorklund", "booleansolve_fxl", "cgmta", "crossbred", "dinur1", "dinur2", "exhaustive_search", "f5", "hybrid_f5", "kpg", "lokshtanov", "mht", "degree_of_regularity", "mq_algorithm", "mq_constants", "mq_estimator", "mq_helper", "mq_problem", "hilbert", "nmonomial", "witness_degree", "big_k", "bruteforce", "kernel_search", "minors", "support_minors", "mr_algorithm", "mr_constants", "mr_estimator", "mr_helper", "mr_problem", "beullens", "leon", "ssa", "pe_algorithm", "pe_constants", "pe_estimator", "pe_helper", "pe_problem", "kmp", "sbc", "pk_algorithm", "pk_constants", "pk_estimator", "pk_helper", "pk_problem", "ccj", "ccj_lin", "regisd_enum", "regisd_perm", "regisd_rep", "sd_attack", "regsd_algorithm", "regsd_constants", "regsd_estimator", "regsd_helper", "regsd_problem", "ball_collision", "bjmm", "bjmm_dw", "bjmm_pdw", "bjmm_plus", "both_may", "dumer", "may_ozerov", "prange", "stern", "ball_collision", "bjmm", "both_may", "dumer", "may_ozerov", "prange", "stern", "workfactor_helper", "sd_algorithm", "sd_constants", "sd_estimator", "sd_helper", "sd_problem", "leebrickell", "prange", "stern", "sdfq_algorithm", "sdfq_constants", "sdfq_estimator", "sdfq_helper", "sdfq_problem", "collision_attack", "direct_attack", "intersection_attack", "kipnis_shamir", "uov_algorithm", "uov_constants", "uov_estimator", "uov_problem", "base_algorithm", "base_constants", "base_estimator", "base_problem", "estimation_renderer", "helper", "CryptographicEstimators Library", "References"], "terms": {"class": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129], "cryptographic_estim": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130], "bikeestim": [0, 1, 2, 4, 5], "bikealgorithm": [0, 1, 2], "sdkeyattack": [0, 4, 130], "problem": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 131], "bikeproblem": [0, 1, 2, 5, 130], "kwarg": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127], "base": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129], "construct": [0, 1, 4, 5, 6, 8, 9, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 49, 50, 51, 52, 53, 56, 58, 64, 66, 71, 73, 74, 75, 76, 77, 78, 79, 82, 84, 87, 88, 93, 94, 102, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 122, 123, 126, 127], "an": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 104, 105, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 131], "instanc": [0, 1, 4, 5, 6, 8, 9, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 58, 64, 66, 71, 73, 74, 75, 76, 77, 78, 79, 82, 84, 87, 88, 93, 94, 99, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 122, 123, 126, 127], "estim": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 128, 129, 130, 131], "complex": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 131], "solv": [0, 1, 5, 17, 19, 20, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 45, 49, 50, 51, 52, 53, 54, 56, 58, 66, 79, 84, 107, 117, 118, 123, 127, 131], "syndrom": [0, 1, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 107, 108, 109, 110, 111, 115, 131], "decod": [0, 1, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 107, 108, 109, 110, 111, 115, 131], "correspond": [0, 1, 5, 9, 17, 27, 45, 58, 66, 73, 84, 107, 115, 123], "recov": [0, 1], "bike": [0, 1, 2], "secret": [0, 5], "kei": [0, 4, 5, 25, 117, 119, 122, 131], "from": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 106, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 129, 130, 131], "its": [0, 4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 131], "public": [0, 19, 117, 131], "input": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129], "algorithm": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 130, 131], "object": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 80, 85, 86, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 119, 120, 124, 126, 127, 128, 129], "includ": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "all": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 80, 82, 85, 86, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 119, 120, 122, 124, 126, 128, 129], "necessari": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 80, 85, 86, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 119, 120, 124], "paramet": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128], "properti": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 126], "attack_typ": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 130], "return": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 129], "attack": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 131], "type": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126], "complexity_typ": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 130], "attribut": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "_complexity_typ": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "get_fastest_sd_algorithm": [0, 1, 130], "fastest": [0, 19], "sdestim": [0, 64, 71, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "get_optimal_parameters_dict": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "optim": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128], "intern": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "us": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 103, 105, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131], "sd": [0, 1, 4, 13], "has_optimal_paramet": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "true": [0, 1, 2, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 106, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 124, 129], "ha": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "test": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 129], "sage": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 123, 124, 129], "import": [0, 1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 129, 130], "basealgorithm": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 126, 130], "baseproblem": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 130], "fals": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 106, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 124, 126, 128, 129], "memory_access": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 130], "_memory_access": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "memory_access_cost": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "mem": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "float": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 123, 124, 127, 129], "memori": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 131], "access": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "cost": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "logarithm": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127], "scale": [0, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 124], "per": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "basic": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 123, 124, 127], "oper": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127], "consumpt": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "specifi": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "model": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "default": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128], "0": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 131], "choic": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "constant": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "1": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 128, 129, 131], "2": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 102, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 124, 126, 129, 131], "squar": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "root": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "3": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 99, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 129, 131], "cube": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "deploi": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "custom": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "function": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "which": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "take": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "total": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 106, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 122, 124, 126], "usag": [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 122, 124, 126], "memory_complex": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "optimal_paramet": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "each": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "valu": [0, 1, 2, 6, 7, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 123, 124, 129], "i": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 126, 129, 130, 131], "provid": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "comput": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 123, 124, 131], "done": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "those": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "dictionari": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 128], "parameter_nam": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "list": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 122, 124, 126, 129, 130], "name": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 103, 106, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 124, 131], "parameter_rang": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "set": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 106, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 124, 131], "rang": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "ar": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "search": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130, 131], "onli": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 126], "reset": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 130], "initi": [0, 1, 31, 86, 87, 88, 89, 90, 91, 92, 94, 113], "state": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "set_parameter_rang": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "str": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 129], "min_valu": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "max_valu": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "specif": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 131], "alreadi": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "must": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 129], "fall": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "lowerbound": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "inclus": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "upperbound": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "set_paramet": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "dict": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 127, 128], "predifin": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124], "subset": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 131], "time_complex": [0, 1, 2, 6, 7, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 108, 109, 110, 111, 116, 117, 118, 119, 120, 124, 130], "time": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126, 128, 131], "sdmsgattack": [1, 4, 130], "messag": [1, 4, 5, 119], "ciphertext": 1, "r": [4, 5, 49, 50, 51, 52, 53, 54, 56, 57, 58, 72, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 130, 131], "int": [4, 5, 15, 16, 17, 25, 27, 40, 43, 45, 46, 47, 48, 56, 58, 64, 65, 66, 71, 72, 73, 82, 84, 87, 96, 99, 102, 105, 106, 107, 113, 114, 115, 122, 123, 129], "w": [4, 5, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 59, 60, 64, 65, 68, 71, 72, 74, 75, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 107, 108, 109, 110, 113, 115, 116, 117, 118, 119, 120, 122, 130, 131], "t": [4, 5, 57, 131], "memory_bound": [4, 5, 8, 15, 17, 25, 27, 43, 45, 56, 58, 64, 66, 71, 82, 84, 105, 107, 113, 122, 123, 127], "inf": [4, 8, 15, 25, 27, 43, 45, 56, 58, 64, 71, 82, 105, 113, 122, 123, 127], "baseestim": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 130], "excluded_algorithm": [4, 15, 18, 19, 20, 21, 22, 25, 43, 56, 64, 71, 82, 105, 113, 117, 122, 126], "A": [4, 10, 11, 12, 15, 30, 56, 59, 60, 64, 67, 68, 71, 74, 75, 76, 77, 78, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 108, 110, 113, 115, 122, 129, 131], "tupl": [4, 15, 18, 19, 20, 21, 22, 25, 35, 36, 43, 56, 64, 71, 82, 105, 113, 115, 117, 122, 126], "exclud": [4, 15, 18, 19, 20, 21, 22, 25, 43, 56, 64, 71, 82, 105, 113, 117, 122, 126], "none": [4, 15, 25, 27, 40, 43, 45, 46, 47, 48, 56, 58, 64, 71, 82, 95, 96, 97, 98, 99, 100, 101, 105, 113, 122, 123, 126, 128], "algorithm_nam": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 130], "consid": [4, 6, 7, 8, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 56, 64, 71, 82, 105, 111, 113, 116, 117, 118, 119, 120, 122, 124, 126], "bit_complex": [4, 8, 15, 18, 19, 20, 21, 22, 23, 25, 43, 56, 64, 71, 82, 105, 111, 113, 116, 117, 119, 120, 122, 124, 126, 130], "describ": [4, 8, 15, 25, 38, 43, 56, 64, 71, 82, 105, 113, 122, 126], "estimator_typ": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 130], "either": [4, 8, 15, 25, 31, 43, 53, 56, 64, 71, 82, 92, 105, 113, 122, 126, 129], "scheme": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 119, 122, 126, 131], "excluded_algorithms_by_default": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 130], "fastest_algorithm": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 130], "use_tilde_o_tim": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126], "smallest": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126], "\u014d": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "e": [4, 6, 8, 15, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 49, 50, 51, 52, 53, 54, 56, 64, 66, 71, 73, 82, 105, 113, 116, 118, 122, 123, 126, 131], "ignor": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126], "polynomi": [4, 5, 8, 15, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 56, 64, 71, 82, 105, 113, 116, 119, 122, 123, 126, 131], "factor": [4, 8, 15, 25, 27, 43, 44, 45, 49, 50, 51, 52, 53, 56, 58, 64, 71, 82, 105, 113, 122, 123, 126], "nalgorithm": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 130], "number": [4, 5, 8, 9, 12, 15, 17, 25, 27, 28, 29, 32, 40, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 56, 58, 60, 64, 65, 66, 71, 73, 82, 84, 99, 102, 105, 106, 107, 113, 114, 115, 116, 122, 123, 126, 127, 128, 129], "tabl": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128, 129], "show_quantum_complex": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "show_tilde_o_tim": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "show_all_paramet": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "precis": [4, 8, 15, 25, 43, 46, 56, 64, 71, 82, 105, 113, 122, 126, 128, 129, 130], "truncat": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128, 129], "print": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "show": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128, 130], "quantum": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "decim": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "digit": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128, 129], "output": [4, 8, 15, 18, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "rather": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "than": [4, 8, 15, 25, 40, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128], "round": [4, 8, 15, 25, 43, 56, 64, 71, 82, 105, 113, 122, 126, 128, 129], "exampl": [4, 6, 10, 11, 12, 15, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 64, 67, 68, 71, 74, 75, 76, 77, 78, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 108, 109, 110, 113, 116, 118, 119, 122, 129, 130], "100": [4, 6, 11, 12, 58, 59, 60, 61, 64, 67, 71, 74, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 108, 109, 110, 113], "10": [4, 6, 10, 15, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 58, 68, 71, 74, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 108, 109, 110, 113, 116, 117, 118, 119, 120, 122, 129, 131], "recoveri": [4, 25, 122], "20": [4, 10, 12, 15, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 53, 56, 60, 64, 68, 82, 105, 131], "15": [4, 19, 25, 40, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 58, 82, 105, 129], "5": [4, 18, 21, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 56, 68, 71, 82, 105, 108, 113, 116, 117, 118, 119, 120, 122], "21": [4, 25, 56, 82, 105, 113, 129], "17": [4, 18, 25, 27, 43, 56, 64, 122, 123], "4": [4, 15, 18, 21, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 71, 76, 82, 105, 113, 116, 117, 118, 119, 120, 122, 123, 129], "150": [4, 25, 64, 78, 105], "12": [4, 10, 15, 18, 19, 25, 28, 29, 31, 32, 33, 34, 37, 38, 39, 48, 56, 105, 122], "11": [4, 15, 25, 43, 56, 64, 68, 92, 105, 116, 122, 129], "8": [4, 18, 19, 20, 21, 22, 23, 25, 29, 37, 39, 43, 53, 56, 71, 78, 82, 86, 89, 91, 105, 122, 123], "16": [4, 18, 19, 20, 21, 22, 23, 25, 40, 43, 44, 49, 50, 51, 52, 53, 56, 58, 105, 122, 129], "6": [4, 25, 43, 44, 47, 49, 50, 51, 52, 53, 56, 71, 82, 105, 122], "p": [4, 19, 22, 76, 78, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 108, 110, 113, 129, 130, 131], "l": [4, 44, 82, 85, 86, 89, 90, 91, 92, 94, 105, 110, 113, 130, 131], "9": [4, 15, 18, 19, 20, 21, 22, 23, 25, 32, 38, 40, 43, 49, 50, 51, 52, 53, 54, 56, 58, 82, 94, 105, 113, 122], "stern": [4, 105, 113, 130, 131], "22": [4, 29, 56, 78, 105, 122], "7": [4, 15, 25, 29, 43, 46, 48, 49, 50, 51, 52, 53, 54, 56, 58, 64, 68, 71, 82, 85, 105, 110, 113, 122, 129], "13": [4, 25, 43, 56, 105, 113, 122], "3000": 4, "50": [4, 6, 11, 12, 59, 60, 61, 67, 71, 74, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 108, 109, 110, 113], "45": [4, 25, 43, 44, 56, 122], "long": [4, 15, 25, 43, 64, 71, 122], "57": [4, 43, 82], "33": [4, 15, 25, 43, 56, 64], "41": [4, 25, 30, 43, 64, 82], "58": [4, 15, 105], "contain": [5, 9, 58, 115], "over": [5, 9, 29, 30, 31, 32, 33, 36, 37, 38, 40, 45, 46, 47, 58, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 108, 109, 110, 111, 115, 131], "code": [5, 10, 11, 12, 15, 16, 17, 59, 60, 64, 65, 66, 67, 68, 82, 84, 87, 92, 105, 107, 113, 115, 116, 131], "dimens": [5, 15, 16, 17, 25, 27, 64, 66, 82, 84, 87, 105, 107, 113, 115], "weight": [5, 65, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 105, 107, 108, 109, 110, 113, 115, 131], "encod": 5, "maximum": [5, 17, 27, 45, 56, 58, 66, 84, 106, 107, 114, 123, 127], "allow": [5, 17, 27, 45, 56, 58, 66, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 107, 123, 127], "expected_number_solut": [5, 9, 17, 27, 43, 45, 58, 66, 73, 84, 107, 115, 123, 127, 130], "expect": [5, 9, 17, 27, 45, 58, 66, 73, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 107, 108, 109, 110, 115, 123, 127], "exist": [5, 9, 17, 27, 45, 58, 66, 72, 73, 84, 107, 115, 123, 127], "solut": [5, 8, 9, 15, 17, 27, 28, 31, 32, 34, 43, 45, 49, 50, 51, 52, 53, 54, 56, 58, 64, 66, 71, 73, 82, 84, 105, 107, 113, 115, 123, 127], "get_paramet": [5, 9, 17, 27, 45, 58, 66, 73, 84, 107, 115, 123, 127, 130], "to_bitcomplexity_memori": [5, 9, 17, 27, 45, 58, 66, 73, 84, 107, 115, 123, 127, 130], "elements_to_stor": [5, 9, 17, 27, 45, 58, 66, 73, 84, 107, 115, 123, 127], "bit": [5, 9, 17, 18, 19, 20, 21, 22, 23, 25, 27, 43, 45, 58, 66, 73, 84, 92, 107, 111, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127], "associ": [5, 9, 17, 19, 27, 45, 58, 66, 73, 84, 107, 115, 117, 123, 127], "given": [5, 9, 17, 18, 19, 20, 21, 22, 23, 25, 27, 31, 38, 40, 44, 45, 58, 66, 73, 84, 107, 111, 115, 116, 117, 119, 120, 122, 123, 124, 127, 128, 129], "element": [5, 9, 17, 27, 45, 58, 66, 67, 68, 69, 71, 73, 84, 107, 115, 123, 127, 129], "store": [5, 9, 17, 27, 29, 45, 58, 66, 73, 84, 107, 115, 123, 127], "to_bitcomplexity_tim": [5, 9, 17, 27, 45, 58, 66, 73, 84, 107, 115, 123, 127, 130], "basic_oper": [5, 9, 17, 27, 45, 58, 66, 73, 84, 107, 115, 123, 127], "certain": [5, 9, 27, 58, 84, 123], "amount": [5, 9, 27, 58, 84, 123], "dummyestim": [6, 7, 8, 9], "dummyalgorithm": [6, 7], "dummyalgorithm1": [6, 130], "dummyproblem": [6, 7, 9, 130], "add": 6, "refer": [6, 89, 90, 130], "correpond": 6, "paper": 6, "here": 6, "tild": [6, 7, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 111, 116, 117, 118, 119, 120, 122, 124, 126, 129], "o": [6, 7, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 111, 116, 117, 118, 119, 120, 122, 124, 126, 129, 131], "dummy_problem": [6, 130], "dummi": [6, 7], "optimization_parameter_1": [6, 130], "25": [6, 15, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 64, 87, 105, 113, 122], "optimization_parameter_2": [6, 130], "optimization_parameter_3": [6, 130], "problem_parameter1": [8, 9], "problem_parameter2": [8, 9], "first": [8, 9, 21, 31, 32, 40, 46, 106, 114, 129], "second": [8, 9, 33, 88, 106, 114, 129], "nsolut": [8, 9, 15, 17, 32, 43, 45, 58, 64, 66, 71, 73, 82, 84, 105, 107, 113, 115, 127], "leestim": [10, 11, 12, 13, 14, 15, 16, 17], "lealgorithm": [10, 11, 12, 13], "leproblem": [10, 11, 12, 13, 17, 67, 68, 69, 130], "bbps20": [10, 61, 131], "adapt": [10, 11, 12, 59, 60, 67, 68, 72, 103], "version": [10, 11, 12, 59, 60, 67, 68], "script": [10, 11, 12, 59, 60], "deriv": [10, 11, 12, 59, 60], "http": [10, 11, 12, 59, 60, 67, 68, 131], "github": [10, 11, 12, 59, 60, 67, 68], "com": [10, 11, 12, 59, 60, 67, 68, 131], "paolo": [10, 131], "santini": [10, 131], "less_project": 10, "peproblem": [10, 12, 59, 60, 61, 62, 66, 130], "sd_paramet": [10, 11, 12, 59, 60, 64, 71], "sdfqestim": [10, 11, 12, 59, 60, 108, 109, 110, 111, 112, 113, 114, 115], "subroutin": [10, 11, 12, 59, 60, 64], "30": [10, 15, 43, 78, 105], "251": [10, 15], "permut": [10, 11, 12, 59, 60, 61, 64, 66, 67, 68, 69, 71, 73, 104, 112, 130, 131], "equival": [10, 11, 12, 15, 17, 59, 60, 61, 64, 66, 119, 131], "n": [10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 129, 131], "k": [10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 36, 43, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 65, 66, 72, 74, 75, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 105, 106, 107, 108, 109, 110, 113, 114, 115, 118, 122, 130, 131], "q": [10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 71, 72, 73, 108, 109, 110, 113, 115, 116, 117, 118, 119, 120, 122, 123, 129, 131], "w_prime": [10, 15, 130], "beu20": [11, 12, 20, 59, 60, 118, 131], "wardbeullen": [11, 12, 59, 60], "less_attack": [11, 12, 59, 60], "34": [11, 64, 82], "leo82": [12, 60, 131], "codewords_needed_for_success": [12, 60], "low": [12, 49, 50, 51, 52, 53, 54, 60], "word": [12, 60, 65], "codeword": [12, 60, 131], "need": [12, 29, 60, 73, 130], "success": [12, 60], "peestim": [12, 59, 60, 61, 62, 63, 64, 65, 66], "pealgorithm": [12, 59, 60, 61, 62], "verboseinform": [14, 63, 70, 104, 112, 130], "enum": [14, 57, 63, 70, 76, 78, 104, 112, 129], "isd": [14, 70, 91, 107, 115, 130, 131], "c_isd": 14, "l_prime": 14, "lists_siz": [14, 63, 130], "list_siz": [14, 63, 102], "normal_form": [14, 63, 130], "nw": [14, 72, 130], "nw_prime": 14, "linear": [15, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 75, 92, 103, 116, 117, 118, 119, 120, 122, 131], "length": [15, 16, 17, 29, 56, 58, 64, 66, 82, 84, 102, 105, 107, 113, 115], "field": [15, 17, 25, 27, 30, 31, 36, 37, 40, 43, 44, 45, 46, 47, 48, 56, 58, 64, 66, 71, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 107, 108, 109, 110, 113, 115, 122, 123, 126, 129, 131], "size": [15, 17, 18, 31, 47, 64, 66, 71, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 109, 110, 113, 115], "leon": [15, 64, 130, 131], "35": [15, 25, 43, 122], "beullen": [15, 64, 72, 130, 131], "29": [15, 25, 43, 64, 105, 113], "14": [15, 46, 56, 64, 105, 123], "bbp": [15, 130], "200": [15, 58], "110": 15, "31": [15, 36, 59, 67, 71, 82, 108, 113], "103": [15, 43], "038": [15, 18, 25], "624": 15, "123": 15, "109": [15, 25, 43, 56], "42": [15, 43, 59, 71, 105, 113], "252": 15, "79": [15, 25, 105], "95": [15, 25, 43, 105], "960": 15, "101": [15, 58, 129], "59": [15, 25, 43, 82, 122], "cost_to_find_random_2dim_subcodes_with_support_w": [16, 130], "find": [16, 18, 21, 22, 28, 31, 72, 119, 131], "dimension": [16, 72], "subcod": [16, 72, 131], "support": [16, 61, 72, 131], "fq": [17, 66, 67, 68, 69, 71, 73, 111, 115, 131], "addit": [17, 45, 66, 67, 68, 69, 71, 73, 82, 84, 107, 115], "mayoestim": [18, 19, 20, 21, 22, 23, 25, 27], "mayoalgorithm": [18, 19, 20, 21, 22, 23], "clawfind": [18, 25, 130], "mayoproblem": [18, 19, 20, 21, 22, 23, 27, 130], "claw": 18, "gener": [18, 20, 31, 34, 44, 116, 118, 119], "work": [18, 29, 30, 116], "against": [18, 19, 116, 117, 119], "ani": [18, 29, 30, 31, 116, 126], "signatur": [18, 116, 119, 131], "follow": [18, 29, 40, 116, 130], "hash": [18, 27, 116, 123], "sign": [18, 116], "paradigm": [18, 116], "algebra": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 49, 50, 51, 52, 53, 54, 116, 117, 118, 119, 120, 122], "obtain": [18, 19, 20, 22, 49, 50, 51, 52, 53, 54], "h": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 46, 66, 102, 116, 117, 119, 120, 122, 131], "extern": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 116, 117, 119, 120, 122], "hybrid": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 116, 117, 119, 120, 122, 131], "mq": [18, 19, 20, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 117], "lokshtanov": [18, 19, 20, 21, 22, 43, 117, 130, 131], "determin": [18, 19, 20, 21, 22, 23, 25, 38, 111, 114, 116, 117, 119, 120, 122, 124, 129], "hash_bit_s": 18, "512": 18, "mayo": [18, 19, 20, 21, 22, 23, 131], "81": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 105], "x": [18, 25, 46, 72, 83, 102, 116, 122, 129, 130, 131], "preimag": [18, 116], "express": 18, "report": 18, "see": [18, 89, 90], "section": [18, 21, 29], "bcchk23": [18, 19, 21, 131], "36": [18, 25], "m": [18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 67, 68, 69, 71, 72, 73, 116, 117, 118, 119, 120, 122, 123, 131], "y": [18, 25, 102, 116, 122, 130, 131], "mayo_problem": [18, 19, 20, 21, 22, 23, 130], "80": [18, 19, 43], "60": [18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 56, 64, 82], "18": [18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 56, 82, 86], "122": [18, 25], "962": [18, 25, 64], "117": [18, 25, 122], "linear_algebra_const": [18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54, 116, 117, 118, 119, 120, 130], "mayo_algorithm": [18, 19, 20, 21, 22, 130], "66": [18, 19, 20, 21, 22, 23, 25, 122], "64": [18, 19, 20, 21, 22, 23, 25, 105, 122], "directattack": [19, 25, 117, 122, 130], "The": [19, 20, 21, 31, 32, 34, 36, 37, 39, 40, 67, 68, 86, 91, 99, 102, 106, 107, 114, 115, 117, 118, 129, 131], "most": [19, 40, 44, 117, 129], "straightforward": [19, 117], "direct": [19, 31, 117], "aim": [19, 117], "map": 19, "furu": [19, 131], "nakamura": [19, 131], "takagi": [19, 131], "strategi": [19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "fnt21": [19, 131], "get_fastest_mq_algorithm": [19, 117, 130], "intersectionattack": [20, 25, 118, 122, 130], "intersect": [20, 118], "idea": [20, 33, 36, 118], "behind": [20, 118], "kipni": [20, 21, 25, 118, 119, 131], "shamir": [20, 21, 25, 118, 119, 131], "combin": [20, 87, 118], "system": [20, 28, 31, 32, 36, 37, 38, 40, 45, 46, 48, 118, 131], "approach": [20, 118, 131], "reconcili": [20, 22, 118], "kipnisshamir": [21, 25, 119, 122, 130], "oil": [21, 22, 25, 27, 119, 131], "vinegar": [21, 119, 131], "propos": [21, 36, 67, 119], "attempt": [21, 22], "vector": [21, 22, 29, 49, 50, 51, 52, 53, 54, 56, 58, 87, 102, 116], "space": [21, 22, 25, 27, 116], "exploit": 21, "fact": [21, 22], "more": 21, "like": 21, "eigenvector": 21, "some": [21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 64], "publici": 21, "known": 21, "matric": [21, 56, 58], "w_k": [21, 25], "sinc": 21, "thi": [21, 29, 30, 31, 34, 89, 119, 130], "suggest": 21, "reconciliationattack": [22, 25, 130], "variabl": [25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 53, 92, 116, 122, 123], "whip": [25, 27], "order": [25, 27, 36, 40, 43, 44, 45, 46, 48, 56, 58, 122, 123], "finit": [25, 27, 30, 36, 40, 43, 44, 45, 46, 48, 56, 58, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 109, 110, 122, 123, 131], "theta": [25, 27, 43, 44, 45, 49, 50, 51, 52, 53, 58, 122, 123, 130], "expon": [25, 27, 43, 44, 45, 49, 50, 51, 52, 53, 58, 122, 123, 131], "convers": [25, 27, 44, 45, 49, 50, 51, 52, 53, 58, 122, 123], "If": [25, 27, 40, 44, 45, 58, 106, 111, 115, 122, 123], "everi": [25, 27, 31, 45, 58, 122, 123], "multipl": [25, 27, 44, 45, 58, 122, 123, 131], "gf": [25, 27, 28, 29, 32, 33, 38, 45, 58, 122, 123, 129, 131], "count": [25, 27, 45, 58, 122, 123, 131], "log2": [25, 27, 45, 58, 87, 122, 123], "binari": [25, 27, 45, 58, 92, 102, 122, 123, 131], "todo": 25, "constructor": 25, "too": 25, "creat": [25, 128], "forgeri": [25, 122], "144": [25, 56], "variant": [25, 29, 43, 53, 56, 57, 82, 122, 130], "booleansolvefxl": [25, 29, 43, 122, 130], "222": 25, "143": [25, 56, 105], "48": [25, 108, 113], "las_vega": [25, 29, 43], "254": [25, 56], "142": [25, 56, 105], "132": [25, 56, 122], "130": 25, "915": 25, "125": 25, "085": 25, "78": [25, 49, 50, 51, 52, 53, 56], "158": [25, 43], "190": 25, "151": [25, 105, 113], "202": [25, 58], "99": 25, "96": [25, 82, 122], "209": [25, 56], "56": [25, 44], "339": [25, 43], "208": 25, "389": [25, 122], "206": 25, "196": 25, "194": 25, "623": 25, "189": [25, 56, 122], "377": [25, 64], "133": [25, 82], "128": 25, "274": [25, 56, 64], "24": [25, 67, 71, 82, 105, 113, 116, 118, 122], "460": [25, 105], "19": [25, 43, 56, 82, 113], "275": 25, "525": 25, "270": 25, "260": 25, "258": 25, "415": 25, "253": 25, "585": 25, "90": 25, "319": [25, 71, 113, 131], "43": [25, 43], "399": 25, "126": [25, 47], "116": 25, "115": 25, "011": 25, "108": [25, 122], "989": 25, "102": 25, "198": 25, "134": 25, "49": [25, 105], "224": 25, "124": 25, "cost_one_hash": [27, 123, 130], "one": [27, 34, 49, 50, 51, 52, 53, 54, 67, 68, 69, 71, 73, 116, 123, 129], "hashes_to_basic_oper": [27, 123, 130], "number_of_hash": [27, 123], "npolynomi": [27, 45, 46, 123, 130], "nvariabl": [27, 30, 37, 39, 45, 46, 123, 130], "order_of_the_field": [27, 45, 58, 123, 130], "order_oil_spac": [27, 130], "runtim": [27, 45, 102, 123], "whipping_paramet": [27, 130], "mqestim": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48], "mqalgorithm": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "mqproblem": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 130], "et": [28, 38], "al": [28, 38], "probabilist": [28, 32, 33, 38], "bkw19": [28, 131], "It": [28, 30, 32, 33, 38], "qudract": 28, "pariti": [28, 32, 131], "mq_problem": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 130], "bj\u00f6rklund": [28, 131], "get_reduced_paramet": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 130], "lambda_": [28, 32, 43, 130], "mq_algorithm": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 130], "npolynomials_reduc": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 130], "after": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 49, 50, 51, 52, 53, 54], "appli": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 88, 115], "thoma": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 131], "wolf": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 131], "nvariables_reduc": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 130], "fix": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "booleansolv": 29, "fxl": 29, "respect": [29, 40], "bfss11": [29, 131], "ckp": [29, 131], "thei": 29, "guess": [29, 49, 50, 51, 52, 53, 54], "consist": [29, 31, 38], "result": [29, 31], "subsystem": [29, 36], "For": [29, 89, 90], "xl": 29, "block": 29, "wiedemann": 29, "modul": [29, 30, 34, 130], "analysi": [29, 131], "bbc": 29, "There": 29, "row": [29, 56, 58, 71, 73], "macaulai": [29, 31, 53], "matrix": [29, 31, 49, 50, 51, 52, 53, 54, 58, 71, 73], "can": [29, 115, 119], "build": 29, "fly": 29, "henc": 29, "demand": 29, "domin": 29, "two": [29, 31, 102, 106, 114, 129], "where": [29, 36, 72, 117, 129], "column": [29, 53, 56, 58, 71, 73, 129], "cgmt": 30, "when": [30, 39], "integ": [30, 40, 44, 46, 47, 48, 106, 114], "2k": 30, "leq": [30, 39], "cgmt02": [30, 131], "note": [30, 58], "In": [30, 31, 92], "min": [30, 66], "floor": 30, "sqrt": 30, "jv18": [31, 131], "step": 31, "preprocess": 31, "we": 31, "degre": [31, 35, 36, 40, 44, 46, 47, 48, 53, 129, 130], "d": [31, 43, 44, 46, 47, 65, 68, 71, 72, 86, 122, 130, 131], "ideal": [31, 44], "special": [31, 32, 115, 126], "final": [31, 70], "found": [31, 34], "our": 31, "formula": [31, 34, 35, 74, 75], "dua20": [31, 131], "max_d": [31, 130], "upper": [31, 87], "bound": [31, 65, 82, 87, 113], "dinurfirst": [32, 43, 130], "dinur": [32, 33, 131], "din21a": [32, 33, 131], "mani": 32, "quadrat": [32, 36, 37, 40, 48, 131], "These": 32, "come": 32, "origin": [32, 67, 68], "kappa": [32, 43, 130], "dinursecond": [33, 43, 130], "din21b": [33, 131], "n1": [33, 43, 130], "n_1": 33, "exhaustivesearch": [34, 43, 130], "exhaust": [34, 36, 131], "evalu": [34, 116], "possibl": 34, "until": 34, "shown": 34, "bcccnsy10": [34, 131], "taken": [35, 74, 75], "proposit": 35, "bfp09": [35, 36, 131], "degree_of_polynomi": [35, 36, 130], "hybridf5": [36, 43, 130], "bfp12": [36, 131], "tradeoff": [36, 89], "between": [36, 129], "groebner": 36, "sai": 36, "grobner": 36, "f5": [36, 43, 130], "mpkc": [36, 117], "256": [36, 122], "23": [36, 43, 56, 105, 113, 122], "equat": [37, 38, 40, 44, 131], "even": [37, 117], "characterist": [37, 129], "kpg99": [37, 131], "comp": [37, 39], "183": [37, 39], "lptwy17": [38, 131], "delta": [38, 43, 130], "mht13": [39, 131], "generic_system": [40, 130], "regular": [40, 48, 84, 131], "repres": [40, 46, 48, 106, 129], "traceback": [40, 44, 129], "recent": [40, 44, 129], "call": [40, 44, 129], "last": [40, 44, 129], "valueerror": [40, 44, 129], "defin": [40, 45], "quadratic_system": [40, 48, 130], "regular_system": [40, 130], "equal": [40, 45], "semi_regular_system": [40, 48, 130], "semi": [40, 48], "f_1": 40, "ldot": 40, "f_m": 40, "d_1": 40, "d_m": 40, "index": [40, 130], "non": [40, 44, 46, 47], "posit": [40, 46], "coeffici": [40, 46, 102, 106, 114], "dfrac": 40, "prod_": 40, "z": [40, 102, 131], "d_i": 40, "sequenc": 40, "cdot": 40, "bigg": 40, "max": [43, 45, 58], "relev": [43, 126], "bjorklund": [43, 130], "40": [43, 71, 82], "46": 43, "crossbr": [43, 122, 130, 131], "37": [43, 56], "44": [43, 64, 122], "62": 43, "87": [43, 105, 122], "39": [43, 105], "823": 43, "316": [43, 56], "720": 43, "174": 43, "616": 43, "32": [43, 82, 105], "111": [43, 105], "493": 43, "349": 43, "801": 43, "966": 43, "27": [43, 82], "065": 43, "906": 43, "854": 43, "105": [43, 71], "68": 43, "26": [43, 131], "61": 43, "67": [43, 82], "77": 43, "71": 43, "168": 43, "tilde_o_estim": [43, 105, 122], "107": 43, "determinist": 43, "98": 43, "70": 43, "89": 43, "88": 43, "167": [43, 56, 105], "164": 43, "119": 43, "72": [43, 64, 82, 122], "94": 43, "620": 43, "147": [43, 56], "19677": 43, "28": [43, 82, 105], "3057": 43, "18665241123894338": 43, "592592592592592": 43, "85": 43, "8765": 43, "ngate": [44, 130], "gate": 44, "prime": [44, 129], "power": [44, 119, 129], "nmonomials_of_degre": [44, 47, 130], "monomi": [44, 47], "ring": [44, 47], "modulo": 44, "nmonomials_up_to_degre": [44, 47, 130], "up": [44, 47, 87], "sum_of_binomial_coeffici": [44, 130], "sum_": 44, "j": [44, 57, 131], "binom": [44, 106, 114, 130], "neg": [44, 47], "get_problem_paramet": [45, 130], "is_defined_over_finite_field": [45, 130], "is_overdefined_system": [45, 130], "overdefin": [45, 131], "is_square_system": [45, 130], "is_underdefined_system": [45, 130], "underdefin": [45, 131], "seri": [46, 47], "hilbertseri": [46, 130], "f_2": [46, 131], "coefficient_of_degre": [46, 130], "th": 46, "self": [46, 66, 131], "_seri": 46, "coefficient_up_to_degre": [46, 130], "first_nonpositive_coeffici": [46, 130], "first_nonpositive_coefficient_up_to_degre": [46, 130], "nmonomialseri": [47, 130], "max_prec": 47, "nm": 47, "f_5": 47, "210": [47, 105], "wit": 48, "mrestim": [49, 50, 51, 52, 53, 54, 56, 57, 58], "mralgorithm": [49, 50, 51, 52, 53, 54], "bigk": [49, 56, 130], "mrproblem": [49, 50, 51, 52, 53, 54, 58, 130], "mr_problem": [49, 50, 51, 52, 53, 54, 130], "minrank": [49, 50, 51, 52, 53, 54], "mr": [49, 50, 51, 52, 53, 54], "mr_algorithm": [49, 50, 51, 52, 53, 130], "basemralgorithm": [49, 50, 51, 52, 53, 54], "kernel": [49, 50, 51, 52, 53, 54, 67, 68, 69, 71, 73, 131], "rank": [49, 50, 51, 52, 53, 54, 56, 58], "bk": 49, "cost_reduct": [49, 50, 51, 52, 53, 54, 130], "reduc": [49, 50, 51, 52, 53, 54], "get_problem_parameters_reduc": [49, 50, 51, 52, 53, 54, 130], "lv": [49, 50, 51, 52, 53, 54, 56, 130], "entri": [49, 50, 51, 52, 53, 54], "hybridization_factor": [49, 50, 51, 52, 53, 54, 130], "bfe": 50, "kernelsearch": [51, 56, 130], "me": 52, "supportminor": [53, 56, 130], "sm": 53, "b": [53, 56, 106, 114, 130, 131], "nprime": [53, 56, 130], "select": [53, 106, 114], "strassen": [53, 57, 130], "block_wiedemann": [53, 56, 57, 130], "target": [56, 58], "mre": 56, "38": [56, 71], "minor": [56, 130], "bruteforc": [56, 130], "154": 56, "165": [56, 122], "159": 56, "230": 56, "162": 56, "169": [56, 122], "207": 56, "431": 56, "211": 56, "55": 56, "216": 56, "236": [56, 71], "231": 56, "351": 56, "237": 56, "242": 56, "51": [56, 64], "269": 56, "452": 56, "278": 56, "301": [56, 122], "302": [56, 64], "425": 56, "307": 56, "enumer": [57, 70, 104, 112, 116], "deteterminant_of_a": [57, 130], "entry_i_j_of_a": [57, 130], "matrix_a": [57, 130], "pr": 57, "minors_polynomi": [57, 130], "n_reduc": 57, "k_reduc": 57, "minors_seri": [57, 130], "length_solution_vector": [58, 130], "mrp": 58, "ncolumn": [58, 130], "nmatric": [58, 130], "nrow": [58, 130], "target_rank": [58, 130], "58496250072116": 58, "97842293847626": 58, "split": [61, 131], "sen06": [61, 131], "rough": 61, "accord": 61, "pe": 62, "list_comput": [63, 130], "norm_form": 63, "718": 64, "631": 64, "901": 64, "ssa": [64, 130], "127": [64, 82, 129], "480": 64, "040": 64, "82": 64, "588": 64, "601": 64, "308": 64, "551": 64, "gv_distanc": [65, 130], "gilbert": 65, "varsharmov": 65, "hamming_bal": [65, 130], "median_size_of_random_orbit": [65, 130], "number_of_weight_d_codeword": [65, 130], "random_sparse_vec_orbit": [65, 130], "hull": 66, "assum": 66, "weakli": 66, "dual": 66, "pkestim": [67, 68, 69, 70, 71, 72, 73], "pkalgorithm": [67, 68, 69], "pkproblem": [67, 68, 69, 73, 130], "kmp19": [67, 131], "accompani": [67, 68], "sbc22": [67, 68, 131], "secomm": [67, 68], "pkpattack": [67, 68], "ell": [67, 68, 71, 73, 74, 76, 78, 82, 130], "cost_for_list_oper": [67, 68, 69, 71], "sbc": [67, 69, 71, 130], "memory_for_list_el": [67, 68, 69, 71], "u": [67, 70, 71, 130, 131], "kmp": [68, 69, 71, 130], "w1": [68, 71, 87, 90, 105, 130], "kmp_final_list": [70, 130], "kmp_l1": [70, 130], "l1": [70, 87, 88, 89, 105, 130], "kmp_l2": [70, 130], "l2": [70, 87, 88], "sbc_isd": [70, 130], "sbc_u": [70, 130], "whose": [71, 73], "should": [71, 73, 102, 126], "lie": [71, 73], "option": [71, 87, 103, 105, 111, 113, 115], "argument": [71, 82, 84], "use_parity_row": [71, 73], "enabl": [71, 73], "trick": [71, 73], "append": [71, 73], "extra": [71, 73], "146": 71, "137": 71, "243": 71, "808": [71, 113], "722": 71, "241": 71, "beullens_lee_brickell_adapt": [72, 130], "run": 72, "leebrickel": [72, 113, 130], "cost_for_finding_subcod": [72, 130], "them": 72, "gauss_binomi": [72, 130], "lof": [72, 130], "regsdestim": [74, 75, 76, 77, 78, 79, 80, 82, 83, 84], "regsdalgorithm": [74, 75, 76, 77, 78, 79, 80], "regsdproblem": [74, 75, 76, 77, 78, 79, 80, 84, 130], "ccj23": [74, 75, 131], "concret": [74, 75], "es23": [74, 75, 76, 77, 78, 131], "ccjlin": [75, 82, 130], "ccj": [75, 82, 130], "regularisdenum": [76, 82, 130], "regularisd": [76, 77, 78], "regularisdperm": [77, 82, 130], "perm": 77, "regularisdrep": [78, 82, 130], "depth": [78, 82, 86, 87, 88, 89, 90, 92, 96, 97, 99, 105, 130], "rep": 78, "300": 78, "eps_x": [78, 82, 130], "eps_i": [78, 82, 130], "sdattack": [79, 82, 130], "perform": 79, "reason": 79, "now": 79, "bjmm": [79, 82, 87, 88, 89, 92, 105, 130], "regsd": 80, "error": [82, 84, 87, 105, 107, 113, 115, 131], "keyword": [82, 84], "No": 82, "954": 82, "582": 82, "106": 82, "114": 82, "112": [82, 122], "129": [82, 113], "118": 82, "148": [82, 122], "155": 82, "p1": [82, 86, 87, 88, 89, 90, 92, 105, 130], "212": 82, "2320": 82, "1210": 82, "75": 82, "74": 82, "83": 82, "r_int": [83, 130], "sdalgorithm": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 105, 107], "ballcollis": [85, 105, 130], "sdproblem": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 108, 109, 110, 130], "ball": [85, 95, 131], "collis": [85, 95, 116, 131], "introduc": [85, 86, 91, 92], "blp11": [85, 131], "distribut": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 109, 110], "2p": [85, 86, 89, 90, 91, 92, 94, 110], "2pl": 85, "pl": [85, 105, 130], "m4ri": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "gaussian": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "elimin": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "predefin": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "do": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "modifi": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "again": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "wa": [86, 91], "bjmm12": [86, 87, 88, 89, 131], "extens": 86, "mmt11": [86, 87, 88, 89, 131], "initialize_parameter_rang": [86, 87, 88, 89, 90, 91, 92, 94, 130], "restart": [86, 92], "process": [86, 87, 88, 89, 90, 91, 92, 94], "bjmmd2": [86, 105, 130], "bjmm_depth_2": 86, "start": [86, 87, 88, 89, 90, 91, 92, 94], "bjmmd3": [86, 105, 130], "bjmm_depth_3": 86, "p2": [86, 90, 92, 105, 130], "bjmmdw": [87, 88, 105, 130], "disjoint": [87, 88], "mitm": [87, 88, 90], "nearest": [87, 92, 97, 99, 102, 131], "neighbor": [87, 92, 97, 99, 131], "eb22": [87, 88, 131], "w2": [87, 88, 90, 105, 130], "ham": 87, "avail": 87, "unlimit": 87, "hmap": [87, 103], "bool": [87, 103, 106, 111, 114, 115, 129], "indic": [87, 103, 111, 124], "hashmap": [87, 103, 111], "being": [87, 103], "p_rang": 87, "interv": 87, "help": 87, "speed": 87, "w11": [87, 130], "bjmmpdw": [88, 105, 130], "partial": 88, "explicit": 88, "nn": [88, 90], "level": 88, "bjmmplu": [89, 105, 130], "incorpor": 89, "improv": [89, 131], "ez23": [89, 131], "regard": 89, "term": 89, "further": [89, 90], "bothmai": [90, 105, 130], "both": [90, 97, 131], "mai": [90, 92, 97, 99, 102, 131], "indyk": 90, "motwani": 90, "bm18": [90, 131], "dum91": [91, 131], "mayozerov": [92, 105, 130], "ozerov": [92, 97, 99, 102, 131], "mo15": [92, 102, 131], "secur": [92, 131], "asymptot": [92, 102, 131], "mayozerovd2": [92, 105, 130], "On": [92, 131], "applic": [92, 131], "annual": 92, "confer": 92, "theori": [92, 131], "cryptograph": 92, "techniqu": 92, "pp": 92, "203": 92, "228": 92, "springer": [92, 131], "2015": 92, "mayozerov_depth_2": 92, "mayozerovd3": [92, 105, 130], "mayozerov_depth_3": 92, "pra62": [93, 109, 131], "ste88": [94, 110, 131], "blp08": [94, 110, 131], "sdworkfactormodel": [95, 96, 97, 98, 99, 100, 101, 102], "ballcollisionscipymodel": [95, 130], "par_nam": [95, 96, 97, 98, 99, 100, 101], "iter": [95, 96, 97, 98, 99, 100, 101], "accuraci": [95, 96, 97, 98, 99, 100, 101], "scipymodel": [95, 96, 97, 98, 99, 100, 101], "workfactor": [95, 96, 97, 98, 99, 100, 101], "get_time_memory_and_paramet": [95, 96, 97, 98, 99, 100, 101, 130], "bjmmscipymodel": [96, 130], "bothmayscipymodel": [97, 130], "dumerscipymodel": [98, 130], "mayozerovscipymodel": [99, 130], "desir": 99, "prangescipymodel": [100, 130], "sternscipymodel": [101, 130], "binary_entropi": [102, 130], "c": [102, 131], "entropi": 102, "binomial_approxim": [102, 130], "binomi": [102, 106, 114], "via": 102, "sterl": 102, "approxim": 102, "inverse_binary_entropi": [102, 130], "v": [102, 131], "invers": 102, "uniqu": 102, "list_of_random_tupl": [102, 130], "may_ozerov_near_neighbor_tim": [102, 130], "vector_length": 102, "target_weight": 102, "neighbour": 102, "representations_asymptot": [102, 130], "weight_to_cancel": 102, "represent": [102, 104, 112, 130], "sum": [102, 131], "wrap": [102, 130], "f": [102, 131], "g": [102, 131], "helper": [102, 130], "scipi": 102, "framework": 102, "var_rang": 103, "sort": [103, 111], "constraint": [104, 112, 130], "gauss": [104, 112, 130], "tree": [104, 112, 130], "union": 105, "may_ozerov": [105, 130], "dumer": [105, 130, 131], "prang": [105, 113, 130, 131], "skip_long_doctest": 105, "pytest": 105, "skip": 105, "workfactor_accuraci": 105, "3488": 105, "2720": 105, "814": 105, "448": 105, "86": 105, "221": 105, "141": [105, 122], "886": 105, "104": 105, "057": 105, "197": 105, "97": 105, "541": 105, "711": 105, "995": 105, "380": 105, "019": 105, "47": [105, 122], "140": [105, 108, 113], "795": 105, "592": 105, "173": 105, "388": 105, "576": 105, "409": 105, "153": [105, 122], "405": 105, "587": 105, "217": [105, 122], "600": 105, "191": 105, "619": 105, "602": 105, "152": 105, "059": [105, 113], "172": 105, "385": 105, "608": 105, "092": 105, "447": 105, "015": 105, "item": [106, 114], "wai": 106, "min_max": [106, 114, 130], "minimum": [106, 114, 131], "boolean": [106, 114, 131], "switch": [106, 114], "depend": [106, 114], "paramt": 107, "calcul": [107, 115], "sdfqalgorithm": [108, 109, 110, 111], "sdfqproblem": [108, 109, 110, 111, 115, 130], "lee": [108, 131], "brickel": [108, 131], "lb88": [108, 131], "961": [108, 113], "771": [108, 113], "31928490910389": 108, "pet11": [110, 131], "hmp": 111, "match": 111, "instead": 111, "whether": [113, 114], "310": 113, "794": 113, "016": 113, "compar": 114, "otherwis": 114, "is_syndrome_zero": 115, "uovestim": [116, 117, 118, 119, 120, 122, 123], "uovalgorithm": [116, 117, 118, 119, 120], "collisionattack": [116, 122, 130], "uovproblem": [116, 117, 118, 119, 120, 123, 130], "gray_code_eval_cost": 116, "grai": 116, "log": 116, "salt": 116, "uov": [116, 117, 119, 120], "uov_problem": [116, 117, 118, 119, 120, 130], "958": 116, "uov_algorithm": [116, 117, 118, 119, 130], "cryptosystem": [117, 131], "tw12": 117, "_": 119, "balanc": 119, "2v": 119, "privat": 119, "arbitrari": 119, "54": 122, "968": 122, "507": 122, "145": 122, "218": 122, "181": 122, "180": 122, "976": 122, "76": 122, "160": 122, "53": 122, "131": 122, "618": 122, "121": 122, "747": 122, "176": 122, "184": 122, "348": 122, "293": 122, "292": 122, "034": 122, "282": 122, "331": 122, "249": 122, "244": 122, "277": 122, "445": 122, "397": 122, "387": 122, "826": 122, "378": 122, "539": 122, "311": 122, "func": 124, "decor": 124, "method": [124, 131], "basealgoritm": 124, "subclass": [124, 126], "alg": 126, "prob": 126, "include_tildeo": 126, "tildeo": [126, 129, 130], "esim": 126, "include_quantum": 126, "quyantum": 126, "estimationrender": [128, 130], "render": 128, "as_tabl": [128, 130], "estimation_result": 128, "complexitytyp": [129, 130], "distinguish": 129, "normal": 129, "optimis": 129, "concat_all_t": [129, 130], "concaten": 129, "singl": 129, "prettyt": 129, "concat_pretty_t": [129, 130], "t1": 129, "t2": 129, "merg": 129, "gf_order_to_characterist": [129, 130], "galoi": 129, "gf_order_to_degre": [129, 130], "is_power_of_two": [129, 130], "check": 129, "is_prime_pow": [129, 130], "return_pair": 129, "1121": 129, "1087": 129, "1091": 129, "round_or_trunc": [129, 130], "eiter": 129, "els": 129, "decimi": 129, "sampl": 130, "manual": 130, "To": 130, "you": 130, "minim": 130, "document": [130, 131], "sagemath": 130, "guidelin": 130, "estimation_render": 130, "base_problem": 130, "base_algorithm": 130, "base_const": 130, "base_estim": 130, "bike_problem": 130, "bike_estim": 130, "bike_algorithm": 130, "bike_const": 130, "sd_msg_attack": 130, "sd_key_attack": 130, "mayo_const": 130, "mayo_help": 130, "mayo_estim": 130, "direct_attack": 130, "reconciliation_attack": 130, "intersection_attack": 130, "kipnis_shamir": 130, "claw_find": 130, "dummy_algorithm": 130, "dummy_estim": 130, "dummy_algorithm1": 130, "le_const": 130, "le_estim": 130, "le_algorithm": 130, "le_help": 130, "le_problem": 130, "sd_constant": 130, "sd_algorithm": 130, "sd_helper": 130, "sd_problem": 130, "sd_estim": 130, "ball_collis": 130, "both_mai": 130, "workfactor_help": 130, "bjmm_dw": 130, "bjmm_plu": 130, "bjmm_pdw": 130, "pk_constant": 130, "pk_algorithm": 130, "pk_helper": 130, "pk_problem": 130, "pk_estim": 130, "sdfq_constant": 130, "sdfq_helper": 130, "sdfq_estim": 130, "sdfq_algorithm": 130, "sdfq_problem": 130, "witness_degre": 130, "mq_estim": 130, "mq_constant": 130, "degree_of_regular": 130, "mq_helper": 130, "nmonomi": 130, "hilbert": 130, "hybrid_f5": 130, "kpg": 130, "mht": 130, "booleansolve_fxl": 130, "dinur1": 130, "exhaustive_search": 130, "cgmta": 130, "dinur2": 130, "uov_estim": 130, "uov_const": 130, "collision_attack": 130, "regsd_estim": 130, "regsd_help": 130, "regsd_const": 130, "regsd_problem": 130, "regsd_algorithm": 130, "ccj_lin": 130, "regisd_rep": 130, "sd_attack": 130, "regisd_enum": 130, "regisd_perm": 130, "mr_constant": 130, "mr_helper": 130, "mr_estim": 130, "support_minor": 130, "big_k": 130, "kernel_search": 130, "pe_help": 130, "pe_const": 130, "pe_estim": 130, "pe_problem": 130, "pe_algorithm": 130, "bibliograph": 130, "page": 130, "andrea": 131, "petteri": 131, "kaski": 131, "ryan": 131, "william": 131, "reduct": 131, "drop": 131, "dagstuhl": 131, "de": 131, "opu": 131, "volltext": 131, "2019": 131, "10602": 131, "pdf": 131, "lipic": 131, "icalp": 131, "antoin": 131, "joux": 131, "vanessa": 131, "vits": 131, "link": 131, "chapter": 131, "1007": 131, "978": 131, "76620": 131, "1_1": 131, "andr": 131, "esser": 131, "Not": 131, "just": 131, "eprint": 131, "iacr": 131, "org": 131, "2023": 131, "1568": 131, "aviad": 131, "jacqu": 131, "patarin": 131, "loui": 131, "goubin": 131, "unbalanc": 131, "540": 131, "48910": 131, "x_15": 131, "alessandro": 131, "barenghi": 131, "jean": 131, "francoi": 131, "biass": 131, "edoardo": 131, "persichetti": 131, "less": 131, "fm": 131, "fine": 131, "tune": 131, "doi": 131, "030": 131, "81293": 131, "5_2": 131, "floyd": 131, "zweyding": 131, "new": 131, "trade": 131, "off": 131, "practic": 131, "2022": 131, "1329": 131, "emanuel": 131, "bellini": 131, "2021": 131, "1243": 131, "alexand": 131, "ilya": 131, "662": 131, "46800": 131, "5_9": 131, "meurer": 131, "enrico": 131, "random": 131, "054n": 131, "642": 131, "25385": 131, "0_6": 131, "anja": 131, "becker": 131, "how": 131, "inform": 131, "2012": 131, "026": 131, "christian": 131, "peter": 131, "12929": 131, "2_7": 131, "charl": 131, "bouillaguet": 131, "hsieh": 131, "chung": 131, "chen": 131, "mou": 131, "cheng": 131, "tung": 131, "chou": 131, "ruben": 131, "niederhagen": 131, "adi": 131, "bo": 131, "yin": 131, "yang": 131, "fast": 131, "www": 131, "archiv": 131, "ches2010": 131, "62250195": 131, "daniel": 131, "bernstein": 131, "tanja": 131, "lang": 131, "defend": 131, "mceliec": 131, "88403": 131, "3_3": 131, "smaller": 131, "22792": 131, "9_42": 131, "ramamohan": 131, "paturi": 131, "suguru": 131, "tamaki": 131, "huacheng": 131, "yu": 131, "beat": 131, "brute": 131, "forc": 131, "peopl": 131, "csail": 131, "mit": 131, "edu": 131, "rrw": 131, "polyeqsoda2017submit": 131, "eliana": 131, "carozza": 131, "geoffroi": 131, "couteau": 131, "short": 131, "head": 131, "eurocrypt": 131, "1035": 131, "elian": 131, "koussa": 131, "gill": 131, "macario": 131, "rat": 131, "412": 131, "eugen": 131, "cyclic": 131, "1109": 131, "tit": 131, "1962": 131, "1057777": 131, "hiroyuki": 131, "miura": 131, "yasufumi": 131, "hashimoto": 131, "tsuyoshi": 131, "extend": 131, "multivari": 131, "38616": 131, "9_8": 131, "hiroki": 131, "shuhei": 131, "underdetermin": 131, "dl": 131, "acm": 131, "5_4": 131, "distanc": 131, "itai": 131, "arxiv": 131, "2005": 131, "04800": 131, "cryptanalyt": 131, "578": 131, "small": 131, "bfb0019850": 131, "jo\u00e3o": 131, "diogo": 131, "duart": 131, "jeffrei": 131, "automorph": 131, "group": 131, "correct": 131, "1982": 131, "1056498": 131, "luk": 131, "bettal": 131, "faug\u00e8r": 131, "ludov": 131, "perret": 131, "1515": 131, "jmc": 131, "2009": 131, "009": 131, "1145": 131, "2442829": 131, "2442843": 131, "leif": 131, "high": 131, "rate": 131, "impact": 131, "lpn": 131, "2017": 131, "1139": 131, "magali": 131, "bardet": 131, "bruno": 131, "salvi": 131, "pierr": 131, "spaenlehau": 131, "sciencedirect": 131, "scienc": 131, "articl": 131, "pii": 131, "s0885064x12000611": 131, "nicola": 131, "courtoi": 131, "klimov": 131, "effici": 131, "eurocrypt2000": 131, "1807": 131, "18070398": 131, "willi": 131, "meier": 131, "tacier": 131, "45664": 131, "3_15": 131, "sendrier": 131, "hal": 131, "inria": 131, "fr": 131, "00073037": 131, "pil": 131, "joong": 131, "ernest": 131, "observ": 131, "45961": 131, "8_25": 131, "marco": 131, "baldi": 131, "franco": 131, "chiaraluc": 131, "hard": 131, "1749": 131, "ward": 131, "enough": 131, "81652": 131, "0_15": 131, "fabio": 131, "campo": 131, "sof\u0131": 131, "celi": 131, "basil": 131, "hess": 131, "matthia": 131, "kannwisch": 131, "pqmayo": 131, "asset": 131, "spec": 131}, "objects": {"cryptographic_estimators.BIKEEstimator.BIKEAlgorithms": [[0, 0, 0, "-", "sd_key_attack"], [1, 0, 0, "-", "sd_msg_attack"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack": [[0, 1, 1, "", "SDKeyAttack"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack": [[0, 2, 1, "", "attack_type"], [0, 2, 1, "", "complexity_type"], [0, 3, 1, "", "get_fastest_sd_algorithm"], [0, 3, 1, "", "get_optimal_parameters_dict"], [0, 3, 1, "", "has_optimal_parameter"], [0, 2, 1, "", "memory_access"], [0, 3, 1, "", "memory_access_cost"], [0, 3, 1, "", "memory_complexity"], [0, 3, 1, "", "optimal_parameters"], [0, 3, 1, "", "parameter_names"], [0, 2, 1, "", "parameter_ranges"], [0, 3, 1, "", "reset"], [0, 3, 1, "", "set_parameter_ranges"], [0, 3, 1, "", "set_parameters"], [0, 3, 1, "", "time_complexity"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack": [[1, 1, 1, "", "SDMsgAttack"]], "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack": [[1, 2, 1, "", "attack_type"], [1, 2, 1, "", "complexity_type"], [1, 3, 1, "", "get_fastest_sd_algorithm"], [1, 3, 1, "", "get_optimal_parameters_dict"], [1, 3, 1, "", "has_optimal_parameter"], [1, 2, 1, "", "memory_access"], [1, 3, 1, "", "memory_access_cost"], [1, 3, 1, "", "memory_complexity"], [1, 3, 1, "", "optimal_parameters"], [1, 3, 1, "", "parameter_names"], [1, 2, 1, "", "parameter_ranges"], [1, 3, 1, "", "reset"], [1, 3, 1, "", "set_parameter_ranges"], [1, 3, 1, "", "set_parameters"], [1, 3, 1, "", "time_complexity"]], "cryptographic_estimators.BIKEEstimator": [[2, 0, 0, "-", "bike_algorithm"], [3, 0, 0, "-", "bike_constants"], [4, 0, 0, "-", "bike_estimator"], [5, 0, 0, "-", "bike_problem"]], "cryptographic_estimators.BIKEEstimator.bike_algorithm": [[2, 1, 1, "", "BIKEAlgorithm"]], "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm": [[2, 2, 1, "", "attack_type"], [2, 2, 1, "", "complexity_type"], [2, 3, 1, "", "get_optimal_parameters_dict"], [2, 3, 1, "", "has_optimal_parameter"], [2, 2, 1, "", "memory_access"], [2, 3, 1, "", "memory_access_cost"], [2, 3, 1, "", "memory_complexity"], [2, 3, 1, "", "optimal_parameters"], [2, 3, 1, "", "parameter_names"], [2, 2, 1, "", "parameter_ranges"], [2, 3, 1, "", "reset"], [2, 3, 1, "", "set_parameter_ranges"], [2, 3, 1, "", "set_parameters"], [2, 3, 1, "", "time_complexity"]], "cryptographic_estimators.BIKEEstimator.bike_estimator": [[4, 1, 1, "", "BIKEEstimator"]], "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator": [[4, 3, 1, "", "algorithm_names"], [4, 3, 1, "", "algorithms"], [4, 2, 1, "", "bit_complexities"], [4, 2, 1, "", "complexity_type"], [4, 3, 1, "", "estimate"], [4, 2, 1, "", "estimator_type"], [4, 4, 1, "", "excluded_algorithms_by_default"], [4, 3, 1, "", "fastest_algorithm"], [4, 2, 1, "", "memory_access"], [4, 3, 1, "", "nalgorithms"], [4, 3, 1, "", "reset"], [4, 3, 1, "", "table"]], "cryptographic_estimators.BIKEEstimator.bike_problem": [[5, 1, 1, "", "BIKEProblem"]], "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem": [[5, 3, 1, "", "expected_number_solutions"], [5, 3, 1, "", "get_parameters"], [5, 3, 1, "", "to_bitcomplexity_memory"], [5, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms": [[6, 0, 0, "-", "dummy_algorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1": [[6, 1, 1, "", "DummyAlgorithm1"]], "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1": [[6, 2, 1, "", "attack_type"], [6, 2, 1, "", "complexity_type"], [6, 3, 1, "", "get_optimal_parameters_dict"], [6, 3, 1, "", "has_optimal_parameter"], [6, 2, 1, "", "memory_access"], [6, 3, 1, "", "memory_access_cost"], [6, 3, 1, "", "memory_complexity"], [6, 3, 1, "", "optimal_parameters"], [6, 3, 1, "", "optimization_parameter_1"], [6, 3, 1, "", "optimization_parameter_2"], [6, 3, 1, "", "optimization_parameter_3"], [6, 3, 1, "", "parameter_names"], [6, 2, 1, "", "parameter_ranges"], [6, 3, 1, "", "reset"], [6, 3, 1, "", "set_parameter_ranges"], [6, 3, 1, "", "set_parameters"], [6, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator": [[7, 0, 0, "-", "dummy_algorithm"], [8, 0, 0, "-", "dummy_estimator"], [9, 0, 0, "-", "dummy_problem"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm": [[7, 1, 1, "", "DummyAlgorithm"]], "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm": [[7, 2, 1, "", "attack_type"], [7, 2, 1, "", "complexity_type"], [7, 3, 1, "", "get_optimal_parameters_dict"], [7, 3, 1, "", "has_optimal_parameter"], [7, 2, 1, "", "memory_access"], [7, 3, 1, "", "memory_access_cost"], [7, 3, 1, "", "memory_complexity"], [7, 3, 1, "", "optimal_parameters"], [7, 3, 1, "", "parameter_names"], [7, 2, 1, "", "parameter_ranges"], [7, 3, 1, "", "reset"], [7, 3, 1, "", "set_parameter_ranges"], [7, 3, 1, "", "set_parameters"], [7, 3, 1, "", "time_complexity"]], "cryptographic_estimators.DummyEstimator.dummy_estimator": [[8, 1, 1, "", "DummyEstimator"]], "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator": [[8, 3, 1, "", "algorithm_names"], [8, 3, 1, "", "algorithms"], [8, 2, 1, "", "bit_complexities"], [8, 2, 1, "", "complexity_type"], [8, 3, 1, "", "estimate"], [8, 2, 1, "", "estimator_type"], [8, 4, 1, "", "excluded_algorithms_by_default"], [8, 3, 1, "", "fastest_algorithm"], [8, 2, 1, "", "memory_access"], [8, 3, 1, "", "nalgorithms"], [8, 3, 1, "", "reset"], [8, 3, 1, "", "table"]], "cryptographic_estimators.DummyEstimator.dummy_problem": [[9, 1, 1, "", "DummyProblem"]], "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem": [[9, 3, 1, "", "expected_number_solutions"], [9, 3, 1, "", "get_parameters"], [9, 3, 1, "", "to_bitcomplexity_memory"], [9, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.LEEstimator.LEAlgorithms": [[10, 0, 0, "-", "bbps"], [11, 0, 0, "-", "beullens"], [12, 0, 0, "-", "leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps": [[10, 1, 1, "", "BBPS"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS": [[10, 2, 1, "", "attack_type"], [10, 2, 1, "", "complexity_type"], [10, 3, 1, "", "get_optimal_parameters_dict"], [10, 3, 1, "", "has_optimal_parameter"], [10, 2, 1, "", "memory_access"], [10, 3, 1, "", "memory_access_cost"], [10, 3, 1, "", "memory_complexity"], [10, 3, 1, "", "optimal_parameters"], [10, 3, 1, "", "parameter_names"], [10, 2, 1, "", "parameter_ranges"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "set_parameter_ranges"], [10, 3, 1, "", "set_parameters"], [10, 3, 1, "", "time_complexity"], [10, 3, 1, "", "w"], [10, 3, 1, "", "w_prime"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens": [[11, 1, 1, "", "Beullens"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens": [[11, 2, 1, "", "attack_type"], [11, 2, 1, "", "complexity_type"], [11, 3, 1, "", "get_optimal_parameters_dict"], [11, 3, 1, "", "has_optimal_parameter"], [11, 2, 1, "", "memory_access"], [11, 3, 1, "", "memory_access_cost"], [11, 3, 1, "", "memory_complexity"], [11, 3, 1, "", "optimal_parameters"], [11, 3, 1, "", "parameter_names"], [11, 2, 1, "", "parameter_ranges"], [11, 3, 1, "", "reset"], [11, 3, 1, "", "set_parameter_ranges"], [11, 3, 1, "", "set_parameters"], [11, 3, 1, "", "time_complexity"], [11, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon": [[12, 1, 1, "", "Leon"]], "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon": [[12, 2, 1, "", "attack_type"], [12, 2, 1, "", "complexity_type"], [12, 3, 1, "", "get_optimal_parameters_dict"], [12, 3, 1, "", "has_optimal_parameter"], [12, 2, 1, "", "memory_access"], [12, 3, 1, "", "memory_access_cost"], [12, 3, 1, "", "memory_complexity"], [12, 3, 1, "", "optimal_parameters"], [12, 3, 1, "", "parameter_names"], [12, 2, 1, "", "parameter_ranges"], [12, 3, 1, "", "reset"], [12, 3, 1, "", "set_parameter_ranges"], [12, 3, 1, "", "set_parameters"], [12, 3, 1, "", "time_complexity"], [12, 3, 1, "", "w"]], "cryptographic_estimators.LEEstimator": [[13, 0, 0, "-", "le_algorithm"], [14, 0, 0, "-", "le_constants"], [15, 0, 0, "-", "le_estimator"], [16, 0, 0, "-", "le_helper"], [17, 0, 0, "-", "le_problem"]], "cryptographic_estimators.LEEstimator.le_algorithm": [[13, 1, 1, "", "LEAlgorithm"]], "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm": [[13, 2, 1, "", "attack_type"], [13, 2, 1, "", "complexity_type"], [13, 3, 1, "", "get_optimal_parameters_dict"], [13, 3, 1, "", "has_optimal_parameter"], [13, 2, 1, "", "memory_access"], [13, 3, 1, "", "memory_access_cost"], [13, 3, 1, "", "memory_complexity"], [13, 3, 1, "", "optimal_parameters"], [13, 3, 1, "", "parameter_names"], [13, 2, 1, "", "parameter_ranges"], [13, 3, 1, "", "reset"], [13, 3, 1, "", "set_parameter_ranges"], [13, 3, 1, "", "set_parameters"], [13, 3, 1, "", "time_complexity"]], "cryptographic_estimators.LEEstimator.le_constants": [[14, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation": [[14, 4, 1, "", "ISD"], [14, 4, 1, "", "LISTS"], [14, 4, 1, "", "LISTS_SIZE"], [14, 4, 1, "", "NORMAL_FORM"], [14, 4, 1, "", "NW"]], "cryptographic_estimators.LEEstimator.le_estimator": [[15, 1, 1, "", "LEEstimator"]], "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator": [[15, 3, 1, "", "algorithm_names"], [15, 3, 1, "", "algorithms"], [15, 2, 1, "", "bit_complexities"], [15, 2, 1, "", "complexity_type"], [15, 3, 1, "", "estimate"], [15, 2, 1, "", "estimator_type"], [15, 4, 1, "", "excluded_algorithms_by_default"], [15, 3, 1, "", "fastest_algorithm"], [15, 2, 1, "", "memory_access"], [15, 3, 1, "", "nalgorithms"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "table"]], "cryptographic_estimators.LEEstimator.le_helper": [[16, 5, 1, "", "cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.LEEstimator.le_problem": [[17, 1, 1, "", "LEProblem"]], "cryptographic_estimators.LEEstimator.le_problem.LEProblem": [[17, 3, 1, "", "expected_number_solutions"], [17, 3, 1, "", "get_parameters"], [17, 3, 1, "", "to_bitcomplexity_memory"], [17, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms": [[18, 0, 0, "-", "claw_finding"], [19, 0, 0, "-", "direct_attack"], [20, 0, 0, "-", "intersection_attack"], [21, 0, 0, "-", "kipnis_shamir"], [22, 0, 0, "-", "reconciliation_attack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding": [[18, 1, 1, "", "ClawFinding"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding": [[18, 3, 1, "", "X"], [18, 3, 1, "", "Y"], [18, 2, 1, "", "attack_type"], [18, 2, 1, "", "complexity_type"], [18, 3, 1, "", "get_optimal_parameters_dict"], [18, 3, 1, "", "has_optimal_parameter"], [18, 3, 1, "", "linear_algebra_constant"], [18, 2, 1, "", "memory_access"], [18, 3, 1, "", "memory_access_cost"], [18, 3, 1, "", "memory_complexity"], [18, 3, 1, "", "optimal_parameters"], [18, 3, 1, "", "parameter_names"], [18, 2, 1, "", "parameter_ranges"], [18, 3, 1, "", "reset"], [18, 3, 1, "", "set_parameter_ranges"], [18, 3, 1, "", "set_parameters"], [18, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack": [[19, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack": [[19, 3, 1, "", "K"], [19, 2, 1, "", "attack_type"], [19, 2, 1, "", "complexity_type"], [19, 3, 1, "", "get_fastest_mq_algorithm"], [19, 3, 1, "", "get_optimal_parameters_dict"], [19, 3, 1, "", "has_optimal_parameter"], [19, 3, 1, "", "linear_algebra_constant"], [19, 2, 1, "", "memory_access"], [19, 3, 1, "", "memory_access_cost"], [19, 3, 1, "", "memory_complexity"], [19, 3, 1, "", "optimal_parameters"], [19, 3, 1, "", "parameter_names"], [19, 2, 1, "", "parameter_ranges"], [19, 3, 1, "", "reset"], [19, 3, 1, "", "set_parameter_ranges"], [19, 3, 1, "", "set_parameters"], [19, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack": [[20, 1, 1, "", "IntersectionAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack": [[20, 2, 1, "", "attack_type"], [20, 2, 1, "", "complexity_type"], [20, 3, 1, "", "get_optimal_parameters_dict"], [20, 3, 1, "", "has_optimal_parameter"], [20, 3, 1, "", "linear_algebra_constant"], [20, 2, 1, "", "memory_access"], [20, 3, 1, "", "memory_access_cost"], [20, 3, 1, "", "memory_complexity"], [20, 3, 1, "", "optimal_parameters"], [20, 3, 1, "", "parameter_names"], [20, 2, 1, "", "parameter_ranges"], [20, 3, 1, "", "reset"], [20, 3, 1, "", "set_parameter_ranges"], [20, 3, 1, "", "set_parameters"], [20, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir": [[21, 1, 1, "", "KipnisShamir"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir": [[21, 2, 1, "", "attack_type"], [21, 2, 1, "", "complexity_type"], [21, 3, 1, "", "get_optimal_parameters_dict"], [21, 3, 1, "", "has_optimal_parameter"], [21, 3, 1, "", "linear_algebra_constant"], [21, 2, 1, "", "memory_access"], [21, 3, 1, "", "memory_access_cost"], [21, 3, 1, "", "memory_complexity"], [21, 3, 1, "", "optimal_parameters"], [21, 3, 1, "", "parameter_names"], [21, 2, 1, "", "parameter_ranges"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "set_parameter_ranges"], [21, 3, 1, "", "set_parameters"], [21, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack": [[22, 1, 1, "", "ReconciliationAttack"]], "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack": [[22, 2, 1, "", "attack_type"], [22, 2, 1, "", "complexity_type"], [22, 3, 1, "", "get_optimal_parameters_dict"], [22, 3, 1, "", "has_optimal_parameter"], [22, 3, 1, "", "linear_algebra_constant"], [22, 2, 1, "", "memory_access"], [22, 3, 1, "", "memory_access_cost"], [22, 3, 1, "", "memory_complexity"], [22, 3, 1, "", "optimal_parameters"], [22, 3, 1, "", "parameter_names"], [22, 2, 1, "", "parameter_ranges"], [22, 3, 1, "", "reset"], [22, 3, 1, "", "set_parameter_ranges"], [22, 3, 1, "", "set_parameters"], [22, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator": [[23, 0, 0, "-", "mayo_algorithm"], [24, 0, 0, "-", "mayo_constants"], [25, 0, 0, "-", "mayo_estimator"], [26, 0, 0, "-", "mayo_helper"], [27, 0, 0, "-", "mayo_problem"]], "cryptographic_estimators.MAYOEstimator.mayo_algorithm": [[23, 1, 1, "", "MAYOAlgorithm"]], "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm": [[23, 2, 1, "", "attack_type"], [23, 2, 1, "", "complexity_type"], [23, 3, 1, "", "get_optimal_parameters_dict"], [23, 3, 1, "", "has_optimal_parameter"], [23, 3, 1, "", "linear_algebra_constant"], [23, 2, 1, "", "memory_access"], [23, 3, 1, "", "memory_access_cost"], [23, 3, 1, "", "memory_complexity"], [23, 3, 1, "", "optimal_parameters"], [23, 3, 1, "", "parameter_names"], [23, 2, 1, "", "parameter_ranges"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "set_parameter_ranges"], [23, 3, 1, "", "set_parameters"], [23, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MAYOEstimator.mayo_estimator": [[25, 1, 1, "", "MAYOEstimator"]], "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator": [[25, 3, 1, "", "algorithm_names"], [25, 3, 1, "", "algorithms"], [25, 2, 1, "", "bit_complexities"], [25, 2, 1, "", "complexity_type"], [25, 3, 1, "", "estimate"], [25, 2, 1, "", "estimator_type"], [25, 4, 1, "", "excluded_algorithms_by_default"], [25, 3, 1, "", "fastest_algorithm"], [25, 2, 1, "", "memory_access"], [25, 3, 1, "", "nalgorithms"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "table"]], "cryptographic_estimators.MAYOEstimator.mayo_problem": [[27, 1, 1, "", "MAYOProblem"]], "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem": [[27, 2, 1, "", "cost_one_hash"], [27, 3, 1, "", "expected_number_solutions"], [27, 3, 1, "", "get_parameters"], [27, 3, 1, "", "hashes_to_basic_operations"], [27, 3, 1, "", "npolynomials"], [27, 3, 1, "", "nvariables"], [27, 3, 1, "", "order_of_the_field"], [27, 3, 1, "", "order_oil_space"], [27, 2, 1, "", "theta"], [27, 3, 1, "", "to_bitcomplexity_memory"], [27, 3, 1, "", "to_bitcomplexity_time"], [27, 3, 1, "", "whipping_parameter"]], "cryptographic_estimators.MQEstimator.MQAlgorithms": [[28, 0, 0, "-", "bjorklund"], [29, 0, 0, "-", "booleansolve_fxl"], [30, 0, 0, "-", "cgmta"], [31, 0, 0, "-", "crossbred"], [32, 0, 0, "-", "dinur1"], [33, 0, 0, "-", "dinur2"], [34, 0, 0, "-", "exhaustive_search"], [35, 0, 0, "-", "f5"], [36, 0, 0, "-", "hybrid_f5"], [37, 0, 0, "-", "kpg"], [38, 0, 0, "-", "lokshtanov"], [39, 0, 0, "-", "mht"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund": [[28, 1, 1, "", "Bjorklund"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund": [[28, 2, 1, "", "attack_type"], [28, 2, 1, "", "complexity_type"], [28, 3, 1, "", "get_optimal_parameters_dict"], [28, 3, 1, "", "get_reduced_parameters"], [28, 3, 1, "", "has_optimal_parameter"], [28, 3, 1, "", "lambda_"], [28, 3, 1, "", "linear_algebra_constant"], [28, 2, 1, "", "memory_access"], [28, 3, 1, "", "memory_access_cost"], [28, 3, 1, "", "memory_complexity"], [28, 3, 1, "", "npolynomials_reduced"], [28, 3, 1, "", "nvariables_reduced"], [28, 3, 1, "", "optimal_parameters"], [28, 3, 1, "", "parameter_names"], [28, 2, 1, "", "parameter_ranges"], [28, 3, 1, "", "reset"], [28, 3, 1, "", "set_parameter_ranges"], [28, 3, 1, "", "set_parameters"], [28, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl": [[29, 1, 1, "", "BooleanSolveFXL"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL": [[29, 2, 1, "", "attack_type"], [29, 2, 1, "", "complexity_type"], [29, 3, 1, "", "get_optimal_parameters_dict"], [29, 3, 1, "", "get_reduced_parameters"], [29, 3, 1, "", "has_optimal_parameter"], [29, 3, 1, "", "k"], [29, 3, 1, "", "linear_algebra_constant"], [29, 2, 1, "", "memory_access"], [29, 3, 1, "", "memory_access_cost"], [29, 3, 1, "", "memory_complexity"], [29, 3, 1, "", "npolynomials_reduced"], [29, 3, 1, "", "nvariables_reduced"], [29, 3, 1, "", "optimal_parameters"], [29, 3, 1, "", "parameter_names"], [29, 2, 1, "", "parameter_ranges"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "set_parameter_ranges"], [29, 3, 1, "", "set_parameters"], [29, 3, 1, "", "time_complexity"], [29, 3, 1, "", "variant"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta": [[30, 1, 1, "", "CGMTA"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA": [[30, 2, 1, "", "attack_type"], [30, 2, 1, "", "complexity_type"], [30, 3, 1, "", "get_optimal_parameters_dict"], [30, 3, 1, "", "get_reduced_parameters"], [30, 3, 1, "", "has_optimal_parameter"], [30, 3, 1, "", "linear_algebra_constant"], [30, 2, 1, "", "memory_access"], [30, 3, 1, "", "memory_access_cost"], [30, 3, 1, "", "memory_complexity"], [30, 3, 1, "", "npolynomials_reduced"], [30, 3, 1, "", "nvariables_reduced"], [30, 3, 1, "", "optimal_parameters"], [30, 3, 1, "", "parameter_names"], [30, 2, 1, "", "parameter_ranges"], [30, 3, 1, "", "reset"], [30, 3, 1, "", "set_parameter_ranges"], [30, 3, 1, "", "set_parameters"], [30, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred": [[31, 1, 1, "", "Crossbred"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred": [[31, 3, 1, "", "D"], [31, 2, 1, "", "attack_type"], [31, 2, 1, "", "complexity_type"], [31, 3, 1, "", "d"], [31, 3, 1, "", "get_optimal_parameters_dict"], [31, 3, 1, "", "get_reduced_parameters"], [31, 3, 1, "", "has_optimal_parameter"], [31, 3, 1, "", "k"], [31, 3, 1, "", "linear_algebra_constant"], [31, 2, 1, "", "max_D"], [31, 2, 1, "", "memory_access"], [31, 3, 1, "", "memory_access_cost"], [31, 3, 1, "", "memory_complexity"], [31, 3, 1, "", "npolynomials_reduced"], [31, 3, 1, "", "nvariables_reduced"], [31, 3, 1, "", "optimal_parameters"], [31, 3, 1, "", "parameter_names"], [31, 2, 1, "", "parameter_ranges"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_parameter_ranges"], [31, 3, 1, "", "set_parameters"], [31, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1": [[32, 1, 1, "", "DinurFirst"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst": [[32, 2, 1, "", "attack_type"], [32, 2, 1, "", "complexity_type"], [32, 3, 1, "", "get_optimal_parameters_dict"], [32, 3, 1, "", "get_reduced_parameters"], [32, 3, 1, "", "has_optimal_parameter"], [32, 3, 1, "", "kappa"], [32, 3, 1, "", "lambda_"], [32, 3, 1, "", "linear_algebra_constant"], [32, 2, 1, "", "memory_access"], [32, 3, 1, "", "memory_access_cost"], [32, 3, 1, "", "memory_complexity"], [32, 3, 1, "", "npolynomials_reduced"], [32, 3, 1, "", "nvariables_reduced"], [32, 3, 1, "", "optimal_parameters"], [32, 3, 1, "", "parameter_names"], [32, 2, 1, "", "parameter_ranges"], [32, 3, 1, "", "reset"], [32, 3, 1, "", "set_parameter_ranges"], [32, 3, 1, "", "set_parameters"], [32, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2": [[33, 1, 1, "", "DinurSecond"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond": [[33, 2, 1, "", "attack_type"], [33, 2, 1, "", "complexity_type"], [33, 3, 1, "", "get_optimal_parameters_dict"], [33, 3, 1, "", "get_reduced_parameters"], [33, 3, 1, "", "has_optimal_parameter"], [33, 3, 1, "", "linear_algebra_constant"], [33, 2, 1, "", "memory_access"], [33, 3, 1, "", "memory_access_cost"], [33, 3, 1, "", "memory_complexity"], [33, 3, 1, "", "n1"], [33, 3, 1, "", "npolynomials_reduced"], [33, 3, 1, "", "nvariables_reduced"], [33, 3, 1, "", "optimal_parameters"], [33, 3, 1, "", "parameter_names"], [33, 2, 1, "", "parameter_ranges"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "set_parameter_ranges"], [33, 3, 1, "", "set_parameters"], [33, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search": [[34, 1, 1, "", "ExhaustiveSearch"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch": [[34, 2, 1, "", "attack_type"], [34, 2, 1, "", "complexity_type"], [34, 3, 1, "", "get_optimal_parameters_dict"], [34, 3, 1, "", "get_reduced_parameters"], [34, 3, 1, "", "has_optimal_parameter"], [34, 3, 1, "", "linear_algebra_constant"], [34, 2, 1, "", "memory_access"], [34, 3, 1, "", "memory_access_cost"], [34, 3, 1, "", "memory_complexity"], [34, 3, 1, "", "npolynomials_reduced"], [34, 3, 1, "", "nvariables_reduced"], [34, 3, 1, "", "optimal_parameters"], [34, 3, 1, "", "parameter_names"], [34, 2, 1, "", "parameter_ranges"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_parameter_ranges"], [34, 3, 1, "", "set_parameters"], [34, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5": [[35, 1, 1, "", "F5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5": [[35, 2, 1, "", "attack_type"], [35, 2, 1, "", "complexity_type"], [35, 3, 1, "", "degree_of_polynomials"], [35, 3, 1, "", "get_optimal_parameters_dict"], [35, 3, 1, "", "get_reduced_parameters"], [35, 3, 1, "", "has_optimal_parameter"], [35, 3, 1, "", "linear_algebra_constant"], [35, 2, 1, "", "memory_access"], [35, 3, 1, "", "memory_access_cost"], [35, 3, 1, "", "memory_complexity"], [35, 3, 1, "", "npolynomials_reduced"], [35, 3, 1, "", "nvariables_reduced"], [35, 3, 1, "", "optimal_parameters"], [35, 3, 1, "", "parameter_names"], [35, 2, 1, "", "parameter_ranges"], [35, 3, 1, "", "reset"], [35, 3, 1, "", "set_parameter_ranges"], [35, 3, 1, "", "set_parameters"], [35, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5": [[36, 1, 1, "", "HybridF5"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5": [[36, 2, 1, "", "attack_type"], [36, 2, 1, "", "complexity_type"], [36, 3, 1, "", "degree_of_polynomials"], [36, 3, 1, "", "get_optimal_parameters_dict"], [36, 3, 1, "", "get_reduced_parameters"], [36, 3, 1, "", "has_optimal_parameter"], [36, 3, 1, "", "k"], [36, 3, 1, "", "linear_algebra_constant"], [36, 2, 1, "", "memory_access"], [36, 3, 1, "", "memory_access_cost"], [36, 3, 1, "", "memory_complexity"], [36, 3, 1, "", "npolynomials_reduced"], [36, 3, 1, "", "nvariables_reduced"], [36, 3, 1, "", "optimal_parameters"], [36, 3, 1, "", "parameter_names"], [36, 2, 1, "", "parameter_ranges"], [36, 3, 1, "", "reset"], [36, 3, 1, "", "set_parameter_ranges"], [36, 3, 1, "", "set_parameters"], [36, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg": [[37, 1, 1, "", "KPG"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG": [[37, 2, 1, "", "attack_type"], [37, 2, 1, "", "complexity_type"], [37, 3, 1, "", "get_optimal_parameters_dict"], [37, 3, 1, "", "get_reduced_parameters"], [37, 3, 1, "", "has_optimal_parameter"], [37, 3, 1, "", "linear_algebra_constant"], [37, 2, 1, "", "memory_access"], [37, 3, 1, "", "memory_access_cost"], [37, 3, 1, "", "memory_complexity"], [37, 3, 1, "", "npolynomials_reduced"], [37, 3, 1, "", "nvariables_reduced"], [37, 3, 1, "", "optimal_parameters"], [37, 3, 1, "", "parameter_names"], [37, 2, 1, "", "parameter_ranges"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "set_parameter_ranges"], [37, 3, 1, "", "set_parameters"], [37, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov": [[38, 1, 1, "", "Lokshtanov"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov": [[38, 2, 1, "", "attack_type"], [38, 2, 1, "", "complexity_type"], [38, 3, 1, "", "delta"], [38, 3, 1, "", "get_optimal_parameters_dict"], [38, 3, 1, "", "get_reduced_parameters"], [38, 3, 1, "", "has_optimal_parameter"], [38, 3, 1, "", "linear_algebra_constant"], [38, 2, 1, "", "memory_access"], [38, 3, 1, "", "memory_access_cost"], [38, 3, 1, "", "memory_complexity"], [38, 3, 1, "", "npolynomials_reduced"], [38, 3, 1, "", "nvariables_reduced"], [38, 3, 1, "", "optimal_parameters"], [38, 3, 1, "", "parameter_names"], [38, 2, 1, "", "parameter_ranges"], [38, 3, 1, "", "reset"], [38, 3, 1, "", "set_parameter_ranges"], [38, 3, 1, "", "set_parameters"], [38, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht": [[39, 1, 1, "", "MHT"]], "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT": [[39, 2, 1, "", "attack_type"], [39, 2, 1, "", "complexity_type"], [39, 3, 1, "", "get_optimal_parameters_dict"], [39, 3, 1, "", "get_reduced_parameters"], [39, 3, 1, "", "has_optimal_parameter"], [39, 3, 1, "", "linear_algebra_constant"], [39, 2, 1, "", "memory_access"], [39, 3, 1, "", "memory_access_cost"], [39, 3, 1, "", "memory_complexity"], [39, 3, 1, "", "npolynomials_reduced"], [39, 3, 1, "", "nvariables_reduced"], [39, 3, 1, "", "optimal_parameters"], [39, 3, 1, "", "parameter_names"], [39, 2, 1, "", "parameter_ranges"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "set_parameter_ranges"], [39, 3, 1, "", "set_parameters"], [39, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator": [[40, 0, 0, "-", "degree_of_regularity"], [41, 0, 0, "-", "mq_algorithm"], [42, 0, 0, "-", "mq_constants"], [43, 0, 0, "-", "mq_estimator"], [44, 0, 0, "-", "mq_helper"], [45, 0, 0, "-", "mq_problem"], [48, 0, 0, "-", "witness_degree"]], "cryptographic_estimators.MQEstimator.degree_of_regularity": [[40, 5, 1, "", "generic_system"], [40, 5, 1, "", "quadratic_system"], [40, 5, 1, "", "regular_system"], [40, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MQEstimator.mq_algorithm": [[41, 1, 1, "", "MQAlgorithm"]], "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm": [[41, 2, 1, "", "attack_type"], [41, 2, 1, "", "complexity_type"], [41, 3, 1, "", "get_optimal_parameters_dict"], [41, 3, 1, "", "get_reduced_parameters"], [41, 3, 1, "", "has_optimal_parameter"], [41, 3, 1, "", "linear_algebra_constant"], [41, 2, 1, "", "memory_access"], [41, 3, 1, "", "memory_access_cost"], [41, 3, 1, "", "memory_complexity"], [41, 3, 1, "", "npolynomials_reduced"], [41, 3, 1, "", "nvariables_reduced"], [41, 3, 1, "", "optimal_parameters"], [41, 3, 1, "", "parameter_names"], [41, 2, 1, "", "parameter_ranges"], [41, 3, 1, "", "reset"], [41, 3, 1, "", "set_parameter_ranges"], [41, 3, 1, "", "set_parameters"], [41, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MQEstimator.mq_estimator": [[43, 1, 1, "", "MQEstimator"]], "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator": [[43, 3, 1, "", "algorithm_names"], [43, 3, 1, "", "algorithms"], [43, 2, 1, "", "bit_complexities"], [43, 2, 1, "", "complexity_type"], [43, 3, 1, "", "estimate"], [43, 2, 1, "", "estimator_type"], [43, 4, 1, "", "excluded_algorithms_by_default"], [43, 3, 1, "", "fastest_algorithm"], [43, 2, 1, "", "memory_access"], [43, 3, 1, "", "nalgorithms"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "table"]], "cryptographic_estimators.MQEstimator.mq_helper": [[44, 5, 1, "", "ngates"], [44, 5, 1, "", "nmonomials_of_degree"], [44, 5, 1, "", "nmonomials_up_to_degree"], [44, 5, 1, "", "sum_of_binomial_coefficients"]], "cryptographic_estimators.MQEstimator.mq_problem": [[45, 1, 1, "", "MQProblem"]], "cryptographic_estimators.MQEstimator.mq_problem.MQProblem": [[45, 3, 1, "", "expected_number_solutions"], [45, 3, 1, "", "get_parameters"], [45, 3, 1, "", "get_problem_parameters"], [45, 3, 1, "", "is_defined_over_finite_field"], [45, 3, 1, "", "is_overdefined_system"], [45, 3, 1, "", "is_square_system"], [45, 3, 1, "", "is_underdefined_system"], [45, 3, 1, "", "npolynomials"], [45, 3, 1, "", "nvariables"], [45, 3, 1, "", "order_of_the_field"], [45, 2, 1, "", "theta"], [45, 3, 1, "", "to_bitcomplexity_memory"], [45, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.MQEstimator.series": [[46, 0, 0, "-", "hilbert"], [47, 0, 0, "-", "nmonomial"]], "cryptographic_estimators.MQEstimator.series.hilbert": [[46, 1, 1, "", "HilbertSeries"]], "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries": [[46, 3, 1, "", "coefficient_of_degree"], [46, 3, 1, "", "coefficient_up_to_degree"], [46, 2, 1, "", "degrees"], [46, 3, 1, "", "first_nonpositive_coefficient"], [46, 3, 1, "", "first_nonpositive_coefficient_up_to_degree"], [46, 2, 1, "", "npolynomials"], [46, 2, 1, "", "nvariables"], [46, 2, 1, "", "precision"]], "cryptographic_estimators.MQEstimator.series.nmonomial": [[47, 1, 1, "", "NMonomialSeries"]], "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries": [[47, 3, 1, "", "nmonomials_of_degree"], [47, 3, 1, "", "nmonomials_up_to_degree"]], "cryptographic_estimators.MQEstimator.witness_degree": [[48, 5, 1, "", "quadratic_system"], [48, 5, 1, "", "semi_regular_system"]], "cryptographic_estimators.MREstimator.MRAlgorithms": [[49, 0, 0, "-", "big_k"], [50, 0, 0, "-", "bruteforce"], [51, 0, 0, "-", "kernel_search"], [52, 0, 0, "-", "minors"], [53, 0, 0, "-", "support_minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k": [[49, 1, 1, "", "BigK"]], "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK": [[49, 3, 1, "", "a"], [49, 2, 1, "", "attack_type"], [49, 2, 1, "", "complexity_type"], [49, 3, 1, "", "cost_reduction"], [49, 3, 1, "", "get_optimal_parameters_dict"], [49, 3, 1, "", "get_problem_parameters_reduced"], [49, 3, 1, "", "has_optimal_parameter"], [49, 3, 1, "", "hybridization_factor"], [49, 3, 1, "", "linear_algebra_constant"], [49, 3, 1, "", "lv"], [49, 2, 1, "", "memory_access"], [49, 3, 1, "", "memory_access_cost"], [49, 3, 1, "", "memory_complexity"], [49, 3, 1, "", "optimal_parameters"], [49, 3, 1, "", "parameter_names"], [49, 2, 1, "", "parameter_ranges"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "set_parameter_ranges"], [49, 3, 1, "", "set_parameters"], [49, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce": [[50, 1, 1, "", "BruteForce"]], "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce": [[50, 3, 1, "", "a"], [50, 2, 1, "", "attack_type"], [50, 2, 1, "", "complexity_type"], [50, 3, 1, "", "cost_reduction"], [50, 3, 1, "", "get_optimal_parameters_dict"], [50, 3, 1, "", "get_problem_parameters_reduced"], [50, 3, 1, "", "has_optimal_parameter"], [50, 3, 1, "", "hybridization_factor"], [50, 3, 1, "", "linear_algebra_constant"], [50, 3, 1, "", "lv"], [50, 2, 1, "", "memory_access"], [50, 3, 1, "", "memory_access_cost"], [50, 3, 1, "", "memory_complexity"], [50, 3, 1, "", "optimal_parameters"], [50, 3, 1, "", "parameter_names"], [50, 2, 1, "", "parameter_ranges"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "set_parameter_ranges"], [50, 3, 1, "", "set_parameters"], [50, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search": [[51, 1, 1, "", "KernelSearch"]], "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch": [[51, 3, 1, "", "a"], [51, 2, 1, "", "attack_type"], [51, 2, 1, "", "complexity_type"], [51, 3, 1, "", "cost_reduction"], [51, 3, 1, "", "get_optimal_parameters_dict"], [51, 3, 1, "", "get_problem_parameters_reduced"], [51, 3, 1, "", "has_optimal_parameter"], [51, 3, 1, "", "hybridization_factor"], [51, 3, 1, "", "linear_algebra_constant"], [51, 3, 1, "", "lv"], [51, 2, 1, "", "memory_access"], [51, 3, 1, "", "memory_access_cost"], [51, 3, 1, "", "memory_complexity"], [51, 3, 1, "", "optimal_parameters"], [51, 3, 1, "", "parameter_names"], [51, 2, 1, "", "parameter_ranges"], [51, 3, 1, "", "reset"], [51, 3, 1, "", "set_parameter_ranges"], [51, 3, 1, "", "set_parameters"], [51, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors": [[52, 1, 1, "", "Minors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors": [[52, 3, 1, "", "a"], [52, 2, 1, "", "attack_type"], [52, 2, 1, "", "complexity_type"], [52, 3, 1, "", "cost_reduction"], [52, 3, 1, "", "get_optimal_parameters_dict"], [52, 3, 1, "", "get_problem_parameters_reduced"], [52, 3, 1, "", "has_optimal_parameter"], [52, 3, 1, "", "hybridization_factor"], [52, 3, 1, "", "linear_algebra_constant"], [52, 3, 1, "", "lv"], [52, 2, 1, "", "memory_access"], [52, 3, 1, "", "memory_access_cost"], [52, 3, 1, "", "memory_complexity"], [52, 3, 1, "", "optimal_parameters"], [52, 3, 1, "", "parameter_names"], [52, 2, 1, "", "parameter_ranges"], [52, 3, 1, "", "reset"], [52, 3, 1, "", "set_parameter_ranges"], [52, 3, 1, "", "set_parameters"], [52, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors": [[53, 1, 1, "", "SupportMinors"]], "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors": [[53, 3, 1, "", "a"], [53, 2, 1, "", "attack_type"], [53, 3, 1, "", "b"], [53, 2, 1, "", "complexity_type"], [53, 3, 1, "", "cost_reduction"], [53, 3, 1, "", "get_optimal_parameters_dict"], [53, 3, 1, "", "get_problem_parameters_reduced"], [53, 3, 1, "", "has_optimal_parameter"], [53, 3, 1, "", "hybridization_factor"], [53, 3, 1, "", "linear_algebra_constant"], [53, 3, 1, "", "lv"], [53, 2, 1, "", "memory_access"], [53, 3, 1, "", "memory_access_cost"], [53, 3, 1, "", "memory_complexity"], [53, 3, 1, "", "nprime"], [53, 3, 1, "", "optimal_parameters"], [53, 3, 1, "", "parameter_names"], [53, 2, 1, "", "parameter_ranges"], [53, 3, 1, "", "reset"], [53, 3, 1, "", "set_parameter_ranges"], [53, 3, 1, "", "set_parameters"], [53, 3, 1, "", "time_complexity"], [53, 3, 1, "", "variant"]], "cryptographic_estimators.MREstimator": [[54, 0, 0, "-", "mr_algorithm"], [55, 0, 0, "-", "mr_constants"], [56, 0, 0, "-", "mr_estimator"], [57, 0, 0, "-", "mr_helper"], [58, 0, 0, "-", "mr_problem"]], "cryptographic_estimators.MREstimator.mr_algorithm": [[54, 1, 1, "", "MRAlgorithm"]], "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm": [[54, 2, 1, "", "attack_type"], [54, 2, 1, "", "complexity_type"], [54, 3, 1, "", "cost_reduction"], [54, 3, 1, "", "get_optimal_parameters_dict"], [54, 3, 1, "", "get_problem_parameters_reduced"], [54, 3, 1, "", "has_optimal_parameter"], [54, 3, 1, "", "hybridization_factor"], [54, 3, 1, "", "linear_algebra_constant"], [54, 2, 1, "", "memory_access"], [54, 3, 1, "", "memory_access_cost"], [54, 3, 1, "", "memory_complexity"], [54, 3, 1, "", "optimal_parameters"], [54, 3, 1, "", "parameter_names"], [54, 2, 1, "", "parameter_ranges"], [54, 3, 1, "", "reset"], [54, 3, 1, "", "set_parameter_ranges"], [54, 3, 1, "", "set_parameters"], [54, 3, 1, "", "time_complexity"]], "cryptographic_estimators.MREstimator.mr_estimator": [[56, 1, 1, "", "MREstimator"]], "cryptographic_estimators.MREstimator.mr_estimator.MREstimator": [[56, 3, 1, "", "algorithm_names"], [56, 3, 1, "", "algorithms"], [56, 2, 1, "", "bit_complexities"], [56, 2, 1, "", "complexity_type"], [56, 3, 1, "", "estimate"], [56, 2, 1, "", "estimator_type"], [56, 4, 1, "", "excluded_algorithms_by_default"], [56, 3, 1, "", "fastest_algorithm"], [56, 2, 1, "", "memory_access"], [56, 3, 1, "", "nalgorithms"], [56, 3, 1, "", "reset"], [56, 3, 1, "", "table"]], "cryptographic_estimators.MREstimator.mr_helper": [[57, 1, 1, "", "Variant"], [57, 5, 1, "", "deteterminant_of_A"], [57, 5, 1, "", "entry_i_j_of_A"], [57, 5, 1, "", "matrix_A"], [57, 5, 1, "", "minors_polynomial"], [57, 5, 1, "", "minors_series"]], "cryptographic_estimators.MREstimator.mr_helper.Variant": [[57, 4, 1, "", "block_wiedemann"], [57, 4, 1, "", "strassen"]], "cryptographic_estimators.MREstimator.mr_problem": [[58, 1, 1, "", "MRProblem"]], "cryptographic_estimators.MREstimator.mr_problem.MRProblem": [[58, 3, 1, "", "expected_number_solutions"], [58, 3, 1, "", "get_parameters"], [58, 3, 1, "", "length_solution_vector"], [58, 3, 1, "", "ncolumns"], [58, 3, 1, "", "nmatrices"], [58, 3, 1, "", "nrows"], [58, 3, 1, "", "order_of_the_field"], [58, 3, 1, "", "target_rank"], [58, 2, 1, "", "theta"], [58, 3, 1, "", "to_bitcomplexity_memory"], [58, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PEEstimator.PEAlgorithms": [[59, 0, 0, "-", "beullens"], [60, 0, 0, "-", "leon"], [61, 0, 0, "-", "ssa"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens": [[59, 1, 1, "", "Beullens"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens": [[59, 2, 1, "", "attack_type"], [59, 2, 1, "", "complexity_type"], [59, 3, 1, "", "get_optimal_parameters_dict"], [59, 3, 1, "", "has_optimal_parameter"], [59, 2, 1, "", "memory_access"], [59, 3, 1, "", "memory_access_cost"], [59, 3, 1, "", "memory_complexity"], [59, 3, 1, "", "optimal_parameters"], [59, 3, 1, "", "parameter_names"], [59, 2, 1, "", "parameter_ranges"], [59, 3, 1, "", "reset"], [59, 3, 1, "", "set_parameter_ranges"], [59, 3, 1, "", "set_parameters"], [59, 3, 1, "", "time_complexity"], [59, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon": [[60, 1, 1, "", "Leon"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon": [[60, 2, 1, "", "attack_type"], [60, 2, 1, "", "complexity_type"], [60, 3, 1, "", "get_optimal_parameters_dict"], [60, 3, 1, "", "has_optimal_parameter"], [60, 2, 1, "", "memory_access"], [60, 3, 1, "", "memory_access_cost"], [60, 3, 1, "", "memory_complexity"], [60, 3, 1, "", "optimal_parameters"], [60, 3, 1, "", "parameter_names"], [60, 2, 1, "", "parameter_ranges"], [60, 3, 1, "", "reset"], [60, 3, 1, "", "set_parameter_ranges"], [60, 3, 1, "", "set_parameters"], [60, 3, 1, "", "time_complexity"], [60, 3, 1, "", "w"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa": [[61, 1, 1, "", "SSA"]], "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA": [[61, 2, 1, "", "attack_type"], [61, 2, 1, "", "complexity_type"], [61, 3, 1, "", "get_optimal_parameters_dict"], [61, 3, 1, "", "has_optimal_parameter"], [61, 2, 1, "", "memory_access"], [61, 3, 1, "", "memory_access_cost"], [61, 3, 1, "", "memory_complexity"], [61, 3, 1, "", "optimal_parameters"], [61, 3, 1, "", "parameter_names"], [61, 2, 1, "", "parameter_ranges"], [61, 3, 1, "", "reset"], [61, 3, 1, "", "set_parameter_ranges"], [61, 3, 1, "", "set_parameters"], [61, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator": [[62, 0, 0, "-", "pe_algorithm"], [63, 0, 0, "-", "pe_constants"], [64, 0, 0, "-", "pe_estimator"], [65, 0, 0, "-", "pe_helper"], [66, 0, 0, "-", "pe_problem"]], "cryptographic_estimators.PEEstimator.pe_algorithm": [[62, 1, 1, "", "PEAlgorithm"]], "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm": [[62, 2, 1, "", "attack_type"], [62, 2, 1, "", "complexity_type"], [62, 3, 1, "", "get_optimal_parameters_dict"], [62, 3, 1, "", "has_optimal_parameter"], [62, 2, 1, "", "memory_access"], [62, 3, 1, "", "memory_access_cost"], [62, 3, 1, "", "memory_complexity"], [62, 3, 1, "", "optimal_parameters"], [62, 3, 1, "", "parameter_names"], [62, 2, 1, "", "parameter_ranges"], [62, 3, 1, "", "reset"], [62, 3, 1, "", "set_parameter_ranges"], [62, 3, 1, "", "set_parameters"], [62, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PEEstimator.pe_constants": [[63, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation": [[63, 4, 1, "", "LISTS_SIZE"], [63, 4, 1, "", "LIST_COMPUTATION"], [63, 4, 1, "", "NORMAL_FORM"]], "cryptographic_estimators.PEEstimator.pe_estimator": [[64, 1, 1, "", "PEEstimator"]], "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator": [[64, 3, 1, "", "algorithm_names"], [64, 3, 1, "", "algorithms"], [64, 2, 1, "", "bit_complexities"], [64, 2, 1, "", "complexity_type"], [64, 3, 1, "", "estimate"], [64, 2, 1, "", "estimator_type"], [64, 4, 1, "", "excluded_algorithms_by_default"], [64, 3, 1, "", "fastest_algorithm"], [64, 2, 1, "", "memory_access"], [64, 3, 1, "", "nalgorithms"], [64, 3, 1, "", "reset"], [64, 3, 1, "", "table"]], "cryptographic_estimators.PEEstimator.pe_helper": [[65, 5, 1, "", "gv_distance"], [65, 5, 1, "", "hamming_ball"], [65, 5, 1, "", "median_size_of_random_orbit"], [65, 5, 1, "", "number_of_weight_d_codewords"], [65, 5, 1, "", "random_sparse_vec_orbit"]], "cryptographic_estimators.PEEstimator.pe_problem": [[66, 1, 1, "", "PEProblem"]], "cryptographic_estimators.PEEstimator.pe_problem.PEProblem": [[66, 3, 1, "", "expected_number_solutions"], [66, 3, 1, "", "get_parameters"], [66, 3, 1, "", "to_bitcomplexity_memory"], [66, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.PKEstimator.PKAlgorithms": [[67, 0, 0, "-", "kmp"], [68, 0, 0, "-", "sbc"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp": [[67, 1, 1, "", "KMP"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP": [[67, 2, 1, "", "attack_type"], [67, 2, 1, "", "complexity_type"], [67, 3, 1, "", "get_optimal_parameters_dict"], [67, 3, 1, "", "has_optimal_parameter"], [67, 2, 1, "", "memory_access"], [67, 3, 1, "", "memory_access_cost"], [67, 3, 1, "", "memory_complexity"], [67, 3, 1, "", "optimal_parameters"], [67, 3, 1, "", "parameter_names"], [67, 2, 1, "", "parameter_ranges"], [67, 3, 1, "", "reset"], [67, 3, 1, "", "set_parameter_ranges"], [67, 3, 1, "", "set_parameters"], [67, 3, 1, "", "time_complexity"], [67, 3, 1, "", "u"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc": [[68, 1, 1, "", "SBC"]], "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC": [[68, 2, 1, "", "attack_type"], [68, 2, 1, "", "complexity_type"], [68, 3, 1, "", "d"], [68, 3, 1, "", "get_optimal_parameters_dict"], [68, 3, 1, "", "has_optimal_parameter"], [68, 2, 1, "", "memory_access"], [68, 3, 1, "", "memory_access_cost"], [68, 3, 1, "", "memory_complexity"], [68, 3, 1, "", "optimal_parameters"], [68, 3, 1, "", "parameter_names"], [68, 2, 1, "", "parameter_ranges"], [68, 3, 1, "", "reset"], [68, 3, 1, "", "set_parameter_ranges"], [68, 3, 1, "", "set_parameters"], [68, 3, 1, "", "time_complexity"], [68, 3, 1, "", "w"], [68, 3, 1, "", "w1"]], "cryptographic_estimators.PKEstimator": [[69, 0, 0, "-", "pk_algorithm"], [70, 0, 0, "-", "pk_constants"], [71, 0, 0, "-", "pk_estimator"], [72, 0, 0, "-", "pk_helper"], [73, 0, 0, "-", "pk_problem"]], "cryptographic_estimators.PKEstimator.pk_algorithm": [[69, 1, 1, "", "PKAlgorithm"]], "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm": [[69, 2, 1, "", "attack_type"], [69, 2, 1, "", "complexity_type"], [69, 3, 1, "", "get_optimal_parameters_dict"], [69, 3, 1, "", "has_optimal_parameter"], [69, 2, 1, "", "memory_access"], [69, 3, 1, "", "memory_access_cost"], [69, 3, 1, "", "memory_complexity"], [69, 3, 1, "", "optimal_parameters"], [69, 3, 1, "", "parameter_names"], [69, 2, 1, "", "parameter_ranges"], [69, 3, 1, "", "reset"], [69, 3, 1, "", "set_parameter_ranges"], [69, 3, 1, "", "set_parameters"], [69, 3, 1, "", "time_complexity"]], "cryptographic_estimators.PKEstimator.pk_constants": [[70, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation": [[70, 4, 1, "", "KMP_FINAL_LIST"], [70, 4, 1, "", "KMP_L1"], [70, 4, 1, "", "KMP_L2"], [70, 4, 1, "", "SBC_ISD"], [70, 4, 1, "", "SBC_U"]], "cryptographic_estimators.PKEstimator.pk_estimator": [[71, 1, 1, "", "PKEstimator"]], "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator": [[71, 3, 1, "", "algorithm_names"], [71, 3, 1, "", "algorithms"], [71, 2, 1, "", "bit_complexities"], [71, 2, 1, "", "complexity_type"], [71, 3, 1, "", "estimate"], [71, 2, 1, "", "estimator_type"], [71, 4, 1, "", "excluded_algorithms_by_default"], [71, 3, 1, "", "fastest_algorithm"], [71, 2, 1, "", "memory_access"], [71, 3, 1, "", "nalgorithms"], [71, 3, 1, "", "reset"], [71, 3, 1, "", "table"]], "cryptographic_estimators.PKEstimator.pk_helper": [[72, 5, 1, "", "beullens_lee_brickell_adaptation"], [72, 5, 1, "", "cost_for_finding_subcode"], [72, 5, 1, "", "gauss_binomial"], [72, 5, 1, "", "lof"]], "cryptographic_estimators.PKEstimator.pk_problem": [[73, 1, 1, "", "PKProblem"]], "cryptographic_estimators.PKEstimator.pk_problem.PKProblem": [[73, 3, 1, "", "expected_number_solutions"], [73, 3, 1, "", "get_parameters"], [73, 3, 1, "", "to_bitcomplexity_memory"], [73, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms": [[74, 0, 0, "-", "ccj"], [75, 0, 0, "-", "ccj_lin"], [76, 0, 0, "-", "regisd_enum"], [77, 0, 0, "-", "regisd_perm"], [78, 0, 0, "-", "regisd_rep"], [79, 0, 0, "-", "sd_attack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj": [[74, 1, 1, "", "CCJ"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ": [[74, 2, 1, "", "attack_type"], [74, 2, 1, "", "complexity_type"], [74, 3, 1, "", "ell"], [74, 3, 1, "", "get_optimal_parameters_dict"], [74, 3, 1, "", "has_optimal_parameter"], [74, 2, 1, "", "memory_access"], [74, 3, 1, "", "memory_access_cost"], [74, 3, 1, "", "memory_complexity"], [74, 3, 1, "", "optimal_parameters"], [74, 3, 1, "", "parameter_names"], [74, 2, 1, "", "parameter_ranges"], [74, 3, 1, "", "reset"], [74, 3, 1, "", "set_parameter_ranges"], [74, 3, 1, "", "set_parameters"], [74, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin": [[75, 1, 1, "", "CCJLin"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin": [[75, 2, 1, "", "attack_type"], [75, 2, 1, "", "complexity_type"], [75, 3, 1, "", "get_optimal_parameters_dict"], [75, 3, 1, "", "has_optimal_parameter"], [75, 2, 1, "", "memory_access"], [75, 3, 1, "", "memory_access_cost"], [75, 3, 1, "", "memory_complexity"], [75, 3, 1, "", "optimal_parameters"], [75, 3, 1, "", "parameter_names"], [75, 2, 1, "", "parameter_ranges"], [75, 3, 1, "", "reset"], [75, 3, 1, "", "set_parameter_ranges"], [75, 3, 1, "", "set_parameters"], [75, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum": [[76, 1, 1, "", "RegularISDEnum"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum": [[76, 2, 1, "", "attack_type"], [76, 2, 1, "", "complexity_type"], [76, 3, 1, "", "ell"], [76, 3, 1, "", "get_optimal_parameters_dict"], [76, 3, 1, "", "has_optimal_parameter"], [76, 2, 1, "", "memory_access"], [76, 3, 1, "", "memory_access_cost"], [76, 3, 1, "", "memory_complexity"], [76, 3, 1, "", "optimal_parameters"], [76, 3, 1, "", "p"], [76, 3, 1, "", "parameter_names"], [76, 2, 1, "", "parameter_ranges"], [76, 3, 1, "", "reset"], [76, 3, 1, "", "set_parameter_ranges"], [76, 3, 1, "", "set_parameters"], [76, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm": [[77, 1, 1, "", "RegularISDPerm"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm": [[77, 2, 1, "", "attack_type"], [77, 2, 1, "", "complexity_type"], [77, 3, 1, "", "get_optimal_parameters_dict"], [77, 3, 1, "", "has_optimal_parameter"], [77, 2, 1, "", "memory_access"], [77, 3, 1, "", "memory_access_cost"], [77, 3, 1, "", "memory_complexity"], [77, 3, 1, "", "optimal_parameters"], [77, 3, 1, "", "parameter_names"], [77, 2, 1, "", "parameter_ranges"], [77, 3, 1, "", "reset"], [77, 3, 1, "", "set_parameter_ranges"], [77, 3, 1, "", "set_parameters"], [77, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep": [[78, 1, 1, "", "RegularISDRep"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep": [[78, 2, 1, "", "attack_type"], [78, 2, 1, "", "complexity_type"], [78, 3, 1, "", "ell"], [78, 3, 1, "", "eps_x"], [78, 3, 1, "", "eps_y"], [78, 3, 1, "", "get_optimal_parameters_dict"], [78, 3, 1, "", "has_optimal_parameter"], [78, 2, 1, "", "memory_access"], [78, 3, 1, "", "memory_access_cost"], [78, 3, 1, "", "memory_complexity"], [78, 3, 1, "", "optimal_parameters"], [78, 3, 1, "", "p"], [78, 3, 1, "", "parameter_names"], [78, 2, 1, "", "parameter_ranges"], [78, 3, 1, "", "reset"], [78, 3, 1, "", "set_parameter_ranges"], [78, 3, 1, "", "set_parameters"], [78, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack": [[79, 1, 1, "", "SDAttack"]], "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack": [[79, 2, 1, "", "attack_type"], [79, 2, 1, "", "complexity_type"], [79, 3, 1, "", "get_optimal_parameters_dict"], [79, 3, 1, "", "has_optimal_parameter"], [79, 2, 1, "", "memory_access"], [79, 3, 1, "", "memory_access_cost"], [79, 3, 1, "", "memory_complexity"], [79, 3, 1, "", "optimal_parameters"], [79, 3, 1, "", "parameter_names"], [79, 2, 1, "", "parameter_ranges"], [79, 3, 1, "", "reset"], [79, 3, 1, "", "set_parameter_ranges"], [79, 3, 1, "", "set_parameters"], [79, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator": [[80, 0, 0, "-", "regsd_algorithm"], [81, 0, 0, "-", "regsd_constants"], [82, 0, 0, "-", "regsd_estimator"], [83, 0, 0, "-", "regsd_helper"], [84, 0, 0, "-", "regsd_problem"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm": [[80, 1, 1, "", "RegSDAlgorithm"]], "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm": [[80, 2, 1, "", "attack_type"], [80, 2, 1, "", "complexity_type"], [80, 3, 1, "", "get_optimal_parameters_dict"], [80, 3, 1, "", "has_optimal_parameter"], [80, 2, 1, "", "memory_access"], [80, 3, 1, "", "memory_access_cost"], [80, 3, 1, "", "memory_complexity"], [80, 3, 1, "", "optimal_parameters"], [80, 3, 1, "", "parameter_names"], [80, 2, 1, "", "parameter_ranges"], [80, 3, 1, "", "reset"], [80, 3, 1, "", "set_parameter_ranges"], [80, 3, 1, "", "set_parameters"], [80, 3, 1, "", "time_complexity"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator": [[82, 1, 1, "", "RegSDEstimator"]], "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator": [[82, 3, 1, "", "algorithm_names"], [82, 3, 1, "", "algorithms"], [82, 2, 1, "", "bit_complexities"], [82, 2, 1, "", "complexity_type"], [82, 3, 1, "", "estimate"], [82, 2, 1, "", "estimator_type"], [82, 4, 1, "", "excluded_algorithms_by_default"], [82, 3, 1, "", "fastest_algorithm"], [82, 2, 1, "", "memory_access"], [82, 3, 1, "", "nalgorithms"], [82, 3, 1, "", "reset"], [82, 3, 1, "", "table"]], "cryptographic_estimators.RegSDEstimator.regsd_helper": [[83, 5, 1, "", "r_int"]], "cryptographic_estimators.RegSDEstimator.regsd_problem": [[84, 1, 1, "", "RegSDProblem"]], "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem": [[84, 3, 1, "", "expected_number_solutions"], [84, 3, 1, "", "get_parameters"], [84, 3, 1, "", "to_bitcomplexity_memory"], [84, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDEstimator.SDAlgorithms": [[85, 0, 0, "-", "ball_collision"], [86, 0, 0, "-", "bjmm"], [87, 0, 0, "-", "bjmm_dw"], [88, 0, 0, "-", "bjmm_pdw"], [89, 0, 0, "-", "bjmm_plus"], [90, 0, 0, "-", "both_may"], [91, 0, 0, "-", "dumer"], [92, 0, 0, "-", "may_ozerov"], [93, 0, 0, "-", "prange"], [94, 0, 0, "-", "stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision": [[85, 1, 1, "", "BallCollision"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision": [[85, 2, 1, "", "attack_type"], [85, 2, 1, "", "complexity_type"], [85, 3, 1, "", "get_optimal_parameters_dict"], [85, 3, 1, "", "has_optimal_parameter"], [85, 3, 1, "", "l"], [85, 2, 1, "", "memory_access"], [85, 3, 1, "", "memory_access_cost"], [85, 3, 1, "", "memory_complexity"], [85, 3, 1, "", "optimal_parameters"], [85, 3, 1, "", "p"], [85, 3, 1, "", "parameter_names"], [85, 2, 1, "", "parameter_ranges"], [85, 3, 1, "", "pl"], [85, 3, 1, "", "r"], [85, 3, 1, "", "reset"], [85, 3, 1, "", "set_parameter_ranges"], [85, 3, 1, "", "set_parameters"], [85, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm": [[86, 1, 1, "", "BJMM"], [86, 1, 1, "", "BJMMd2"], [86, 1, 1, "", "BJMMd3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM": [[86, 2, 1, "", "attack_type"], [86, 2, 1, "", "complexity_type"], [86, 3, 1, "", "depth"], [86, 3, 1, "", "get_optimal_parameters_dict"], [86, 3, 1, "", "has_optimal_parameter"], [86, 3, 1, "", "initialize_parameter_ranges"], [86, 2, 1, "", "memory_access"], [86, 3, 1, "", "memory_access_cost"], [86, 3, 1, "", "memory_complexity"], [86, 3, 1, "", "optimal_parameters"], [86, 3, 1, "", "parameter_names"], [86, 2, 1, "", "parameter_ranges"], [86, 3, 1, "", "r"], [86, 3, 1, "", "reset"], [86, 3, 1, "", "set_parameter_ranges"], [86, 3, 1, "", "set_parameters"], [86, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2": [[86, 2, 1, "", "attack_type"], [86, 2, 1, "", "complexity_type"], [86, 3, 1, "", "get_optimal_parameters_dict"], [86, 3, 1, "", "has_optimal_parameter"], [86, 3, 1, "", "initialize_parameter_ranges"], [86, 3, 1, "", "l"], [86, 2, 1, "", "memory_access"], [86, 3, 1, "", "memory_access_cost"], [86, 3, 1, "", "memory_complexity"], [86, 3, 1, "", "optimal_parameters"], [86, 3, 1, "", "p"], [86, 3, 1, "", "p1"], [86, 3, 1, "", "parameter_names"], [86, 2, 1, "", "parameter_ranges"], [86, 3, 1, "", "r"], [86, 3, 1, "", "reset"], [86, 3, 1, "", "set_parameter_ranges"], [86, 3, 1, "", "set_parameters"], [86, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3": [[86, 2, 1, "", "attack_type"], [86, 2, 1, "", "complexity_type"], [86, 3, 1, "", "get_optimal_parameters_dict"], [86, 3, 1, "", "has_optimal_parameter"], [86, 3, 1, "", "initialize_parameter_ranges"], [86, 3, 1, "", "l"], [86, 2, 1, "", "memory_access"], [86, 3, 1, "", "memory_access_cost"], [86, 3, 1, "", "memory_complexity"], [86, 3, 1, "", "optimal_parameters"], [86, 3, 1, "", "p"], [86, 3, 1, "", "p1"], [86, 3, 1, "", "p2"], [86, 3, 1, "", "parameter_names"], [86, 2, 1, "", "parameter_ranges"], [86, 3, 1, "", "r"], [86, 3, 1, "", "reset"], [86, 3, 1, "", "set_parameter_ranges"], [86, 3, 1, "", "set_parameters"], [86, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw": [[87, 1, 1, "", "BJMMdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw": [[87, 2, 1, "", "attack_type"], [87, 2, 1, "", "complexity_type"], [87, 3, 1, "", "get_optimal_parameters_dict"], [87, 3, 1, "", "has_optimal_parameter"], [87, 3, 1, "", "initialize_parameter_ranges"], [87, 2, 1, "", "memory_access"], [87, 3, 1, "", "memory_access_cost"], [87, 3, 1, "", "memory_complexity"], [87, 3, 1, "", "optimal_parameters"], [87, 3, 1, "", "p"], [87, 3, 1, "", "p1"], [87, 3, 1, "", "parameter_names"], [87, 2, 1, "", "parameter_ranges"], [87, 3, 1, "", "r"], [87, 3, 1, "", "reset"], [87, 3, 1, "", "set_parameter_ranges"], [87, 3, 1, "", "set_parameters"], [87, 3, 1, "", "time_complexity"], [87, 3, 1, "", "w1"], [87, 3, 1, "", "w11"], [87, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw": [[88, 1, 1, "", "BJMMpdw"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw": [[88, 2, 1, "", "attack_type"], [88, 2, 1, "", "complexity_type"], [88, 3, 1, "", "get_optimal_parameters_dict"], [88, 3, 1, "", "has_optimal_parameter"], [88, 3, 1, "", "initialize_parameter_ranges"], [88, 2, 1, "", "memory_access"], [88, 3, 1, "", "memory_access_cost"], [88, 3, 1, "", "memory_complexity"], [88, 3, 1, "", "optimal_parameters"], [88, 3, 1, "", "p"], [88, 3, 1, "", "p1"], [88, 3, 1, "", "parameter_names"], [88, 2, 1, "", "parameter_ranges"], [88, 3, 1, "", "r"], [88, 3, 1, "", "reset"], [88, 3, 1, "", "set_parameter_ranges"], [88, 3, 1, "", "set_parameters"], [88, 3, 1, "", "time_complexity"], [88, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus": [[89, 1, 1, "", "BJMMplus"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus": [[89, 2, 1, "", "attack_type"], [89, 2, 1, "", "complexity_type"], [89, 3, 1, "", "get_optimal_parameters_dict"], [89, 3, 1, "", "has_optimal_parameter"], [89, 3, 1, "", "initialize_parameter_ranges"], [89, 3, 1, "", "l"], [89, 3, 1, "", "l1"], [89, 2, 1, "", "memory_access"], [89, 3, 1, "", "memory_access_cost"], [89, 3, 1, "", "memory_complexity"], [89, 3, 1, "", "optimal_parameters"], [89, 3, 1, "", "p"], [89, 3, 1, "", "p1"], [89, 3, 1, "", "parameter_names"], [89, 2, 1, "", "parameter_ranges"], [89, 3, 1, "", "r"], [89, 3, 1, "", "reset"], [89, 3, 1, "", "set_parameter_ranges"], [89, 3, 1, "", "set_parameters"], [89, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may": [[90, 1, 1, "", "BothMay"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay": [[90, 2, 1, "", "attack_type"], [90, 2, 1, "", "complexity_type"], [90, 3, 1, "", "get_optimal_parameters_dict"], [90, 3, 1, "", "has_optimal_parameter"], [90, 3, 1, "", "initialize_parameter_ranges"], [90, 3, 1, "", "l"], [90, 2, 1, "", "memory_access"], [90, 3, 1, "", "memory_access_cost"], [90, 3, 1, "", "memory_complexity"], [90, 3, 1, "", "optimal_parameters"], [90, 3, 1, "", "p"], [90, 3, 1, "", "p1"], [90, 3, 1, "", "parameter_names"], [90, 2, 1, "", "parameter_ranges"], [90, 3, 1, "", "r"], [90, 3, 1, "", "reset"], [90, 3, 1, "", "set_parameter_ranges"], [90, 3, 1, "", "set_parameters"], [90, 3, 1, "", "time_complexity"], [90, 3, 1, "", "w1"], [90, 3, 1, "", "w2"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer": [[91, 1, 1, "", "Dumer"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer": [[91, 2, 1, "", "attack_type"], [91, 2, 1, "", "complexity_type"], [91, 3, 1, "", "get_optimal_parameters_dict"], [91, 3, 1, "", "has_optimal_parameter"], [91, 3, 1, "", "initialize_parameter_ranges"], [91, 3, 1, "", "l"], [91, 2, 1, "", "memory_access"], [91, 3, 1, "", "memory_access_cost"], [91, 3, 1, "", "memory_complexity"], [91, 3, 1, "", "optimal_parameters"], [91, 3, 1, "", "p"], [91, 3, 1, "", "parameter_names"], [91, 2, 1, "", "parameter_ranges"], [91, 3, 1, "", "r"], [91, 3, 1, "", "reset"], [91, 3, 1, "", "set_parameter_ranges"], [91, 3, 1, "", "set_parameters"], [91, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov": [[92, 1, 1, "", "MayOzerov"], [92, 1, 1, "", "MayOzerovD2"], [92, 1, 1, "", "MayOzerovD3"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov": [[92, 2, 1, "", "attack_type"], [92, 2, 1, "", "complexity_type"], [92, 3, 1, "", "depth"], [92, 3, 1, "", "get_optimal_parameters_dict"], [92, 3, 1, "", "has_optimal_parameter"], [92, 3, 1, "", "initialize_parameter_ranges"], [92, 2, 1, "", "memory_access"], [92, 3, 1, "", "memory_access_cost"], [92, 3, 1, "", "memory_complexity"], [92, 3, 1, "", "optimal_parameters"], [92, 3, 1, "", "parameter_names"], [92, 2, 1, "", "parameter_ranges"], [92, 3, 1, "", "r"], [92, 3, 1, "", "reset"], [92, 3, 1, "", "set_parameter_ranges"], [92, 3, 1, "", "set_parameters"], [92, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2": [[92, 2, 1, "", "attack_type"], [92, 2, 1, "", "complexity_type"], [92, 3, 1, "", "get_optimal_parameters_dict"], [92, 3, 1, "", "has_optimal_parameter"], [92, 3, 1, "", "initialize_parameter_ranges"], [92, 3, 1, "", "l"], [92, 2, 1, "", "memory_access"], [92, 3, 1, "", "memory_access_cost"], [92, 3, 1, "", "memory_complexity"], [92, 3, 1, "", "optimal_parameters"], [92, 3, 1, "", "p"], [92, 3, 1, "", "p1"], [92, 3, 1, "", "parameter_names"], [92, 2, 1, "", "parameter_ranges"], [92, 3, 1, "", "r"], [92, 3, 1, "", "reset"], [92, 3, 1, "", "set_parameter_ranges"], [92, 3, 1, "", "set_parameters"], [92, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3": [[92, 2, 1, "", "attack_type"], [92, 2, 1, "", "complexity_type"], [92, 3, 1, "", "get_optimal_parameters_dict"], [92, 3, 1, "", "has_optimal_parameter"], [92, 3, 1, "", "initialize_parameter_ranges"], [92, 3, 1, "", "l"], [92, 2, 1, "", "memory_access"], [92, 3, 1, "", "memory_access_cost"], [92, 3, 1, "", "memory_complexity"], [92, 3, 1, "", "optimal_parameters"], [92, 3, 1, "", "p"], [92, 3, 1, "", "p1"], [92, 3, 1, "", "p2"], [92, 3, 1, "", "parameter_names"], [92, 2, 1, "", "parameter_ranges"], [92, 3, 1, "", "r"], [92, 3, 1, "", "reset"], [92, 3, 1, "", "set_parameter_ranges"], [92, 3, 1, "", "set_parameters"], [92, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange": [[93, 1, 1, "", "Prange"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange": [[93, 2, 1, "", "attack_type"], [93, 2, 1, "", "complexity_type"], [93, 3, 1, "", "get_optimal_parameters_dict"], [93, 3, 1, "", "has_optimal_parameter"], [93, 2, 1, "", "memory_access"], [93, 3, 1, "", "memory_access_cost"], [93, 3, 1, "", "memory_complexity"], [93, 3, 1, "", "optimal_parameters"], [93, 3, 1, "", "parameter_names"], [93, 2, 1, "", "parameter_ranges"], [93, 3, 1, "", "r"], [93, 3, 1, "", "reset"], [93, 3, 1, "", "set_parameter_ranges"], [93, 3, 1, "", "set_parameters"], [93, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern": [[94, 1, 1, "", "Stern"]], "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern": [[94, 2, 1, "", "attack_type"], [94, 2, 1, "", "complexity_type"], [94, 3, 1, "", "get_optimal_parameters_dict"], [94, 3, 1, "", "has_optimal_parameter"], [94, 3, 1, "", "initialize_parameter_ranges"], [94, 3, 1, "", "l"], [94, 2, 1, "", "memory_access"], [94, 3, 1, "", "memory_access_cost"], [94, 3, 1, "", "memory_complexity"], [94, 3, 1, "", "optimal_parameters"], [94, 3, 1, "", "p"], [94, 3, 1, "", "parameter_names"], [94, 2, 1, "", "parameter_ranges"], [94, 3, 1, "", "r"], [94, 3, 1, "", "reset"], [94, 3, 1, "", "set_parameter_ranges"], [94, 3, 1, "", "set_parameters"], [94, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels": [[95, 0, 0, "-", "ball_collision"], [96, 0, 0, "-", "bjmm"], [97, 0, 0, "-", "both_may"], [98, 0, 0, "-", "dumer"], [99, 0, 0, "-", "may_ozerov"], [100, 0, 0, "-", "prange"], [101, 0, 0, "-", "stern"], [102, 0, 0, "-", "workfactor_helper"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision": [[95, 1, 1, "", "BallCollisionScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel": [[95, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm": [[96, 1, 1, "", "BJMMScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel": [[96, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may": [[97, 1, 1, "", "BothMayScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel": [[97, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer": [[98, 1, 1, "", "DumerScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel": [[98, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov": [[99, 1, 1, "", "MayOzerovScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel": [[99, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange": [[100, 1, 1, "", "PrangeScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel": [[100, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern": [[101, 1, 1, "", "SternScipyModel"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel": [[101, 3, 1, "", "get_time_memory_and_parameters"]], "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper": [[102, 5, 1, "", "binary_entropy"], [102, 5, 1, "", "binomial_approximation"], [102, 5, 1, "", "inverse_binary_entropy"], [102, 5, 1, "", "list_of_random_tuples"], [102, 5, 1, "", "may_ozerov_near_neighbor_time"], [102, 5, 1, "", "representations_asymptotic"], [102, 5, 1, "", "wrap"]], "cryptographic_estimators.SDEstimator": [[103, 0, 0, "-", "sd_algorithm"], [104, 0, 0, "-", "sd_constants"], [105, 0, 0, "-", "sd_estimator"], [106, 0, 0, "-", "sd_helper"], [107, 0, 0, "-", "sd_problem"]], "cryptographic_estimators.SDEstimator.sd_algorithm": [[103, 1, 1, "", "SDAlgorithm"]], "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm": [[103, 2, 1, "", "attack_type"], [103, 2, 1, "", "complexity_type"], [103, 3, 1, "", "get_optimal_parameters_dict"], [103, 3, 1, "", "has_optimal_parameter"], [103, 2, 1, "", "memory_access"], [103, 3, 1, "", "memory_access_cost"], [103, 3, 1, "", "memory_complexity"], [103, 3, 1, "", "optimal_parameters"], [103, 3, 1, "", "parameter_names"], [103, 2, 1, "", "parameter_ranges"], [103, 3, 1, "", "r"], [103, 3, 1, "", "reset"], [103, 3, 1, "", "set_parameter_ranges"], [103, 3, 1, "", "set_parameters"], [103, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDEstimator.sd_constants": [[104, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation": [[104, 4, 1, "", "CONSTRAINTS"], [104, 4, 1, "", "GAUSS"], [104, 4, 1, "", "LISTS"], [104, 4, 1, "", "PERMUTATIONS"], [104, 4, 1, "", "REPRESENTATIONS"], [104, 4, 1, "", "TREE"]], "cryptographic_estimators.SDEstimator.sd_estimator": [[105, 1, 1, "", "SDEstimator"]], "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator": [[105, 3, 1, "", "algorithm_names"], [105, 3, 1, "", "algorithms"], [105, 2, 1, "", "bit_complexities"], [105, 2, 1, "", "complexity_type"], [105, 3, 1, "", "estimate"], [105, 2, 1, "", "estimator_type"], [105, 4, 1, "", "excluded_algorithms_by_default"], [105, 3, 1, "", "fastest_algorithm"], [105, 2, 1, "", "memory_access"], [105, 3, 1, "", "nalgorithms"], [105, 3, 1, "", "reset"], [105, 3, 1, "", "table"]], "cryptographic_estimators.SDEstimator.sd_helper": [[106, 5, 1, "", "binom"], [106, 5, 1, "", "min_max"]], "cryptographic_estimators.SDEstimator.sd_problem": [[107, 1, 1, "", "SDProblem"]], "cryptographic_estimators.SDEstimator.sd_problem.SDProblem": [[107, 3, 1, "", "expected_number_solutions"], [107, 3, 1, "", "get_parameters"], [107, 3, 1, "", "to_bitcomplexity_memory"], [107, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms": [[108, 0, 0, "-", "leebrickell"], [109, 0, 0, "-", "prange"], [110, 0, 0, "-", "stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell": [[108, 1, 1, "", "LeeBrickell"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell": [[108, 2, 1, "", "attack_type"], [108, 2, 1, "", "complexity_type"], [108, 3, 1, "", "get_optimal_parameters_dict"], [108, 3, 1, "", "has_optimal_parameter"], [108, 2, 1, "", "memory_access"], [108, 3, 1, "", "memory_access_cost"], [108, 3, 1, "", "memory_complexity"], [108, 3, 1, "", "optimal_parameters"], [108, 3, 1, "", "p"], [108, 3, 1, "", "parameter_names"], [108, 2, 1, "", "parameter_ranges"], [108, 3, 1, "", "reset"], [108, 3, 1, "", "set_parameter_ranges"], [108, 3, 1, "", "set_parameters"], [108, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange": [[109, 1, 1, "", "Prange"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange": [[109, 2, 1, "", "attack_type"], [109, 2, 1, "", "complexity_type"], [109, 3, 1, "", "get_optimal_parameters_dict"], [109, 3, 1, "", "has_optimal_parameter"], [109, 2, 1, "", "memory_access"], [109, 3, 1, "", "memory_access_cost"], [109, 3, 1, "", "memory_complexity"], [109, 3, 1, "", "optimal_parameters"], [109, 3, 1, "", "parameter_names"], [109, 2, 1, "", "parameter_ranges"], [109, 3, 1, "", "reset"], [109, 3, 1, "", "set_parameter_ranges"], [109, 3, 1, "", "set_parameters"], [109, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern": [[110, 1, 1, "", "Stern"]], "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern": [[110, 2, 1, "", "attack_type"], [110, 2, 1, "", "complexity_type"], [110, 3, 1, "", "get_optimal_parameters_dict"], [110, 3, 1, "", "has_optimal_parameter"], [110, 3, 1, "", "l"], [110, 2, 1, "", "memory_access"], [110, 3, 1, "", "memory_access_cost"], [110, 3, 1, "", "memory_complexity"], [110, 3, 1, "", "optimal_parameters"], [110, 3, 1, "", "p"], [110, 3, 1, "", "parameter_names"], [110, 2, 1, "", "parameter_ranges"], [110, 3, 1, "", "reset"], [110, 3, 1, "", "set_parameter_ranges"], [110, 3, 1, "", "set_parameters"], [110, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator": [[111, 0, 0, "-", "sdfq_algorithm"], [112, 0, 0, "-", "sdfq_constants"], [113, 0, 0, "-", "sdfq_estimator"], [114, 0, 0, "-", "sdfq_helper"], [115, 0, 0, "-", "sdfq_problem"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm": [[111, 1, 1, "", "SDFqAlgorithm"]], "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm": [[111, 2, 1, "", "attack_type"], [111, 2, 1, "", "complexity_type"], [111, 3, 1, "", "get_optimal_parameters_dict"], [111, 3, 1, "", "has_optimal_parameter"], [111, 2, 1, "", "memory_access"], [111, 3, 1, "", "memory_access_cost"], [111, 3, 1, "", "memory_complexity"], [111, 3, 1, "", "optimal_parameters"], [111, 3, 1, "", "parameter_names"], [111, 2, 1, "", "parameter_ranges"], [111, 3, 1, "", "reset"], [111, 3, 1, "", "set_parameter_ranges"], [111, 3, 1, "", "set_parameters"], [111, 3, 1, "", "time_complexity"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants": [[112, 1, 1, "", "VerboseInformation"]], "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation": [[112, 4, 1, "", "CONSTRAINTS"], [112, 4, 1, "", "GAUSS"], [112, 4, 1, "", "LISTS"], [112, 4, 1, "", "PERMUTATIONS"], [112, 4, 1, "", "REPRESENTATIONS"], [112, 4, 1, "", "TREE"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator": [[113, 1, 1, "", "SDFqEstimator"]], "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator": [[113, 3, 1, "", "algorithm_names"], [113, 3, 1, "", "algorithms"], [113, 2, 1, "", "bit_complexities"], [113, 2, 1, "", "complexity_type"], [113, 3, 1, "", "estimate"], [113, 2, 1, "", "estimator_type"], [113, 4, 1, "", "excluded_algorithms_by_default"], [113, 3, 1, "", "fastest_algorithm"], [113, 2, 1, "", "memory_access"], [113, 3, 1, "", "nalgorithms"], [113, 3, 1, "", "reset"], [113, 3, 1, "", "table"]], "cryptographic_estimators.SDFqEstimator.sdfq_helper": [[114, 5, 1, "", "binom"], [114, 5, 1, "", "min_max"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem": [[115, 1, 1, "", "SDFqProblem"]], "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem": [[115, 3, 1, "", "expected_number_solutions"], [115, 3, 1, "", "get_parameters"], [115, 3, 1, "", "to_bitcomplexity_memory"], [115, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms": [[116, 0, 0, "-", "collision_attack"], [117, 0, 0, "-", "direct_attack"], [118, 0, 0, "-", "intersection_attack"], [119, 0, 0, "-", "kipnis_shamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack": [[116, 1, 1, "", "CollisionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack": [[116, 3, 1, "", "X"], [116, 3, 1, "", "Y"], [116, 2, 1, "", "attack_type"], [116, 2, 1, "", "complexity_type"], [116, 3, 1, "", "get_optimal_parameters_dict"], [116, 3, 1, "", "has_optimal_parameter"], [116, 3, 1, "", "linear_algebra_constant"], [116, 2, 1, "", "memory_access"], [116, 3, 1, "", "memory_access_cost"], [116, 3, 1, "", "memory_complexity"], [116, 3, 1, "", "optimal_parameters"], [116, 3, 1, "", "parameter_names"], [116, 2, 1, "", "parameter_ranges"], [116, 3, 1, "", "reset"], [116, 3, 1, "", "set_parameter_ranges"], [116, 3, 1, "", "set_parameters"], [116, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack": [[117, 1, 1, "", "DirectAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack": [[117, 2, 1, "", "attack_type"], [117, 2, 1, "", "complexity_type"], [117, 3, 1, "", "get_fastest_mq_algorithm"], [117, 3, 1, "", "get_optimal_parameters_dict"], [117, 3, 1, "", "has_optimal_parameter"], [117, 3, 1, "", "linear_algebra_constant"], [117, 2, 1, "", "memory_access"], [117, 3, 1, "", "memory_access_cost"], [117, 3, 1, "", "memory_complexity"], [117, 3, 1, "", "optimal_parameters"], [117, 3, 1, "", "parameter_names"], [117, 2, 1, "", "parameter_ranges"], [117, 3, 1, "", "reset"], [117, 3, 1, "", "set_parameter_ranges"], [117, 3, 1, "", "set_parameters"], [117, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack": [[118, 1, 1, "", "IntersectionAttack"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack": [[118, 2, 1, "", "attack_type"], [118, 2, 1, "", "complexity_type"], [118, 3, 1, "", "get_optimal_parameters_dict"], [118, 3, 1, "", "has_optimal_parameter"], [118, 3, 1, "", "k"], [118, 3, 1, "", "linear_algebra_constant"], [118, 2, 1, "", "memory_access"], [118, 3, 1, "", "memory_access_cost"], [118, 3, 1, "", "memory_complexity"], [118, 3, 1, "", "optimal_parameters"], [118, 3, 1, "", "parameter_names"], [118, 2, 1, "", "parameter_ranges"], [118, 3, 1, "", "reset"], [118, 3, 1, "", "set_parameter_ranges"], [118, 3, 1, "", "set_parameters"], [118, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir": [[119, 1, 1, "", "KipnisShamir"]], "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir": [[119, 2, 1, "", "attack_type"], [119, 2, 1, "", "complexity_type"], [119, 3, 1, "", "get_optimal_parameters_dict"], [119, 3, 1, "", "has_optimal_parameter"], [119, 3, 1, "", "linear_algebra_constant"], [119, 2, 1, "", "memory_access"], [119, 3, 1, "", "memory_access_cost"], [119, 3, 1, "", "memory_complexity"], [119, 3, 1, "", "optimal_parameters"], [119, 3, 1, "", "parameter_names"], [119, 2, 1, "", "parameter_ranges"], [119, 3, 1, "", "reset"], [119, 3, 1, "", "set_parameter_ranges"], [119, 3, 1, "", "set_parameters"], [119, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator": [[120, 0, 0, "-", "uov_algorithm"], [121, 0, 0, "-", "uov_constants"], [122, 0, 0, "-", "uov_estimator"], [123, 0, 0, "-", "uov_problem"]], "cryptographic_estimators.UOVEstimator.uov_algorithm": [[120, 1, 1, "", "UOVAlgorithm"]], "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm": [[120, 2, 1, "", "attack_type"], [120, 2, 1, "", "complexity_type"], [120, 3, 1, "", "get_optimal_parameters_dict"], [120, 3, 1, "", "has_optimal_parameter"], [120, 3, 1, "", "linear_algebra_constant"], [120, 2, 1, "", "memory_access"], [120, 3, 1, "", "memory_access_cost"], [120, 3, 1, "", "memory_complexity"], [120, 3, 1, "", "optimal_parameters"], [120, 3, 1, "", "parameter_names"], [120, 2, 1, "", "parameter_ranges"], [120, 3, 1, "", "reset"], [120, 3, 1, "", "set_parameter_ranges"], [120, 3, 1, "", "set_parameters"], [120, 3, 1, "", "time_complexity"]], "cryptographic_estimators.UOVEstimator.uov_estimator": [[122, 1, 1, "", "UOVEstimator"]], "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator": [[122, 3, 1, "", "algorithm_names"], [122, 3, 1, "", "algorithms"], [122, 2, 1, "", "bit_complexities"], [122, 2, 1, "", "complexity_type"], [122, 3, 1, "", "estimate"], [122, 2, 1, "", "estimator_type"], [122, 4, 1, "", "excluded_algorithms_by_default"], [122, 3, 1, "", "fastest_algorithm"], [122, 2, 1, "", "memory_access"], [122, 3, 1, "", "nalgorithms"], [122, 3, 1, "", "reset"], [122, 3, 1, "", "table"]], "cryptographic_estimators.UOVEstimator.uov_problem": [[123, 1, 1, "", "UOVProblem"]], "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem": [[123, 2, 1, "", "cost_one_hash"], [123, 3, 1, "", "expected_number_solutions"], [123, 3, 1, "", "get_parameters"], [123, 3, 1, "", "hashes_to_basic_operations"], [123, 3, 1, "", "npolynomials"], [123, 3, 1, "", "nvariables"], [123, 3, 1, "", "order_of_the_field"], [123, 2, 1, "", "theta"], [123, 3, 1, "", "to_bitcomplexity_memory"], [123, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators": [[124, 0, 0, "-", "base_algorithm"], [125, 0, 0, "-", "base_constants"], [126, 0, 0, "-", "base_estimator"], [127, 0, 0, "-", "base_problem"], [128, 0, 0, "-", "estimation_renderer"], [129, 0, 0, "-", "helper"]], "cryptographic_estimators.base_algorithm": [[124, 1, 1, "", "BaseAlgorithm"], [124, 5, 1, "", "optimal_parameter"]], "cryptographic_estimators.base_algorithm.BaseAlgorithm": [[124, 2, 1, "", "attack_type"], [124, 2, 1, "", "complexity_type"], [124, 3, 1, "", "get_optimal_parameters_dict"], [124, 3, 1, "", "has_optimal_parameter"], [124, 2, 1, "", "memory_access"], [124, 3, 1, "", "memory_access_cost"], [124, 3, 1, "", "memory_complexity"], [124, 3, 1, "", "optimal_parameters"], [124, 3, 1, "", "parameter_names"], [124, 2, 1, "", "parameter_ranges"], [124, 3, 1, "", "reset"], [124, 3, 1, "", "set_parameter_ranges"], [124, 3, 1, "", "set_parameters"], [124, 3, 1, "", "time_complexity"]], "cryptographic_estimators.base_estimator": [[126, 1, 1, "", "BaseEstimator"]], "cryptographic_estimators.base_estimator.BaseEstimator": [[126, 3, 1, "", "algorithm_names"], [126, 3, 1, "", "algorithms"], [126, 2, 1, "", "bit_complexities"], [126, 2, 1, "", "complexity_type"], [126, 3, 1, "", "estimate"], [126, 2, 1, "", "estimator_type"], [126, 4, 1, "", "excluded_algorithms_by_default"], [126, 3, 1, "", "fastest_algorithm"], [126, 2, 1, "", "memory_access"], [126, 3, 1, "", "nalgorithms"], [126, 3, 1, "", "reset"], [126, 3, 1, "", "table"]], "cryptographic_estimators.base_problem": [[127, 1, 1, "", "BaseProblem"]], "cryptographic_estimators.base_problem.BaseProblem": [[127, 3, 1, "", "expected_number_solutions"], [127, 3, 1, "", "get_parameters"], [127, 3, 1, "", "to_bitcomplexity_memory"], [127, 3, 1, "", "to_bitcomplexity_time"]], "cryptographic_estimators.estimation_renderer": [[128, 1, 1, "", "EstimationRenderer"]], "cryptographic_estimators.estimation_renderer.EstimationRenderer": [[128, 3, 1, "", "as_table"]], "cryptographic_estimators.helper": [[129, 1, 1, "", "ComplexityType"], [129, 5, 1, "", "concat_all_tables"], [129, 5, 1, "", "concat_pretty_tables"], [129, 5, 1, "", "gf_order_to_characteristic"], [129, 5, 1, "", "gf_order_to_degree"], [129, 5, 1, "", "is_power_of_two"], [129, 5, 1, "", "is_prime_power"], [129, 5, 1, "", "round_or_truncate"]], "cryptographic_estimators.helper.ComplexityType": [[129, 4, 1, "", "ESTIMATE"], [129, 4, 1, "", "TILDEO"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"sd_key_attack": 0, "sd_msg_attack": 1, "bike_algorithm": 2, "bike_const": 3, "bike_estim": 4, "bike_problem": 5, "dummy_algorithm1": 6, "dummy_algorithm": 7, "dummy_estim": 8, "dummy_problem": 9, "bbp": 10, "beullen": [11, 59], "leon": [12, 60], "le_algorithm": 13, "le_const": 14, "le_estim": 15, "le_help": 16, "le_problem": 17, "claw_find": 18, "direct_attack": [19, 117], "intersection_attack": [20, 118], "kipnis_shamir": [21, 119], "reconciliation_attack": 22, "mayo_algorithm": 23, "mayo_const": 24, "mayo_estim": 25, "mayo_help": 26, "mayo_problem": 27, "bjorklund": 28, "booleansolve_fxl": 29, "cgmta": 30, "crossbr": 31, "dinur1": 32, "dinur2": 33, "exhaustive_search": 34, "f5": 35, "hybrid_f5": 36, "kpg": 37, "lokshtanov": 38, "mht": 39, "degree_of_regular": 40, "mq_algorithm": 41, "mq_constant": 42, "mq_estim": 43, "mq_helper": 44, "mq_problem": 45, "hilbert": 46, "nmonomi": 47, "witness_degre": 48, "big_k": 49, "bruteforc": 50, "kernel_search": 51, "minor": 52, "support_minor": 53, "mr_algorithm": 54, "mr_constant": 55, "mr_estim": 56, "mr_helper": 57, "mr_problem": 58, "ssa": 61, "pe_algorithm": 62, "pe_const": 63, "pe_estim": 64, "pe_help": 65, "pe_problem": 66, "kmp": 67, "sbc": 68, "pk_algorithm": 69, "pk_constant": 70, "pk_estim": 71, "pk_helper": 72, "pk_problem": 73, "ccj": 74, "ccj_lin": 75, "regisd_enum": 76, "regisd_perm": 77, "regisd_rep": 78, "sd_attack": 79, "regsd_algorithm": 80, "regsd_const": 81, "regsd_estim": 82, "regsd_help": 83, "regsd_problem": 84, "ball_collis": [85, 95], "bjmm": [86, 96], "bjmm_dw": 87, "bjmm_pdw": 88, "bjmm_plu": 89, "both_mai": [90, 97], "dumer": [91, 98], "may_ozerov": [92, 99], "prang": [93, 100, 109], "stern": [94, 101, 110], "workfactor_help": 102, "sd_algorithm": 103, "sd_constant": 104, "sd_estim": 105, "sd_helper": 106, "sd_problem": 107, "leebrickel": 108, "sdfq_algorithm": 111, "sdfq_constant": 112, "sdfq_estim": 113, "sdfq_helper": 114, "sdfq_problem": 115, "collision_attack": 116, "uov_algorithm": 120, "uov_const": 121, "uov_estim": 122, "uov_problem": 123, "base_algorithm": 124, "base_const": 125, "base_estim": 126, "base_problem": 127, "estimation_render": 128, "helper": 129, "cryptographicestim": 130, "librari": 130, "bikeestim": 130, "bikealgorithm": 130, "mayoestim": 130, "mayoalgorithm": 130, "dummyestim": 130, "dummyalgorithm": 130, "leestim": 130, "lealgorithm": 130, "sdestim": 130, "sdworkfactormodel": 130, "sdalgorithm": 130, "pkestim": 130, "pkalgorithm": 130, "sdfqestim": 130, "sdfqalgorithm": 130, "mqestim": 130, "seri": 130, "mqalgorithm": 130, "uovestim": 130, "uovalgorithm": 130, "regsdestim": 130, "regsdalgorithm": 130, "mrestim": 130, "mralgorithm": 130, "peestim": 130, "pealgorithm": 130, "gener": 130, "inform": 130, "indic": 130, "tabl": 130, "refer": 131}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"sd_key_attack": [[0, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack"]], "sd_msg_attack": [[1, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack"]], "bike_algorithm": [[2, "module-cryptographic_estimators.BIKEEstimator.bike_algorithm"]], "bike_constants": [[3, "module-cryptographic_estimators.BIKEEstimator.bike_constants"]], "bike_estimator": [[4, "module-cryptographic_estimators.BIKEEstimator.bike_estimator"]], "bike_problem": [[5, "module-cryptographic_estimators.BIKEEstimator.bike_problem"]], "dummy_algorithm1": [[6, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "dummy_algorithm": [[7, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "dummy_estimator": [[8, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "dummy_problem": [[9, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "bbps": [[10, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "beullens": [[11, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [59, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "leon": [[12, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [60, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "le_algorithm": [[13, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "le_constants": [[14, "module-cryptographic_estimators.LEEstimator.le_constants"]], "le_estimator": [[15, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "le_helper": [[16, "module-cryptographic_estimators.LEEstimator.le_helper"]], "le_problem": [[17, "module-cryptographic_estimators.LEEstimator.le_problem"]], "claw_finding": [[18, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding"]], "direct_attack": [[19, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack"], [117, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"]], "intersection_attack": [[20, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack"], [118, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"]], "kipnis_shamir": [[21, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir"], [119, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"]], "reconciliation_attack": [[22, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack"]], "mayo_algorithm": [[23, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm"]], "mayo_constants": [[24, "module-cryptographic_estimators.MAYOEstimator.mayo_constants"]], "mayo_estimator": [[25, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator"]], "mayo_helper": [[26, "module-cryptographic_estimators.MAYOEstimator.mayo_helper"]], "mayo_problem": [[27, "module-cryptographic_estimators.MAYOEstimator.mayo_problem"]], "bjorklund": [[28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "booleansolve_fxl": [[29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"]], "cgmta": [[30, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "crossbred": [[31, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "dinur1": [[32, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "dinur2": [[33, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "exhaustive_search": [[34, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "f5": [[35, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "hybrid_f5": [[36, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "kpg": [[37, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "lokshtanov": [[38, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "mht": [[39, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "degree_of_regularity": [[40, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "mq_algorithm": [[41, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "mq_constants": [[42, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mq_estimator": [[43, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "mq_helper": [[44, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "mq_problem": [[45, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "hilbert": [[46, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "nmonomial": [[47, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "witness_degree": [[48, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "big_k": [[49, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"]], "bruteforce": [[50, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"]], "kernel_search": [[51, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"]], "minors": [[52, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"]], "support_minors": [[53, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"]], "mr_algorithm": [[54, "module-cryptographic_estimators.MREstimator.mr_algorithm"]], "mr_constants": [[55, "module-cryptographic_estimators.MREstimator.mr_constants"]], "mr_estimator": [[56, "module-cryptographic_estimators.MREstimator.mr_estimator"]], "mr_helper": [[57, "module-cryptographic_estimators.MREstimator.mr_helper"]], "mr_problem": [[58, "module-cryptographic_estimators.MREstimator.mr_problem"]], "ssa": [[61, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "pe_algorithm": [[62, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "pe_constants": [[63, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "pe_estimator": [[64, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "pe_helper": [[65, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "pe_problem": [[66, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "kmp": [[67, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "sbc": [[68, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "pk_algorithm": [[69, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "pk_constants": [[70, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pk_estimator": [[71, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "pk_helper": [[72, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "pk_problem": [[73, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "ccj": [[74, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"]], "ccj_lin": [[75, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin"]], "regisd_enum": [[76, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"]], "regisd_perm": [[77, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"]], "regisd_rep": [[78, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"]], "sd_attack": [[79, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"]], "regsd_algorithm": [[80, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"]], "regsd_constants": [[81, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"]], "regsd_estimator": [[82, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"]], "regsd_helper": [[83, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"]], "regsd_problem": [[84, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"]], "ball_collision": [[85, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [95, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "bjmm": [[86, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [96, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "bjmm_dw": [[87, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "bjmm_pdw": [[88, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "bjmm_plus": [[89, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"]], "both_may": [[90, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [97, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "dumer": [[91, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [98, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "may_ozerov": [[92, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [99, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "prange": [[93, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [100, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [109, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "stern": [[94, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [101, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [110, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "workfactor_helper": [[102, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "sd_algorithm": [[103, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "sd_constants": [[104, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sd_estimator": [[105, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "sd_helper": [[106, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "sd_problem": [[107, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "leebrickell": [[108, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "sdfq_algorithm": [[111, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "sdfq_constants": [[112, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfq_estimator": [[113, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "sdfq_helper": [[114, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "sdfq_problem": [[115, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "collision_attack": [[116, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"]], "uov_algorithm": [[120, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"]], "uov_constants": [[121, "module-cryptographic_estimators.UOVEstimator.uov_constants"]], "uov_estimator": [[122, "module-cryptographic_estimators.UOVEstimator.uov_estimator"]], "uov_problem": [[123, "module-cryptographic_estimators.UOVEstimator.uov_problem"]], "base_algorithm": [[124, "module-cryptographic_estimators.base_algorithm"]], "base_constants": [[125, "module-cryptographic_estimators.base_constants"]], "base_estimator": [[126, "module-cryptographic_estimators.base_estimator"]], "base_problem": [[127, "module-cryptographic_estimators.base_problem"]], "estimation_renderer": [[128, "module-cryptographic_estimators.estimation_renderer"]], "helper": [[129, "module-cryptographic_estimators.helper"]], "CryptographicEstimators Library": [[130, "cryptographicestimators-library"]], "BIKEEstimator": [[130, "bikeestimator"]], "BIKEAlgorithms": [[130, "bikealgorithms"]], "MAYOEstimator": [[130, "mayoestimator"]], "MAYOAlgorithms": [[130, "mayoalgorithms"]], "DummyEstimator": [[130, "dummyestimator"]], "DummyAlgorithms": [[130, "dummyalgorithms"]], "LEEstimator": [[130, "leestimator"]], "LEAlgorithms": [[130, "lealgorithms"]], "SDEstimator": [[130, "sdestimator"]], "SDWorkfactorModels": [[130, "sdworkfactormodels"]], "SDAlgorithms": [[130, "sdalgorithms"]], "PKEstimator": [[130, "pkestimator"]], "PKAlgorithms": [[130, "pkalgorithms"]], "SDFqEstimator": [[130, "sdfqestimator"]], "SDFqAlgorithms": [[130, "sdfqalgorithms"]], "MQEstimator": [[130, "mqestimator"]], "series": [[130, "series"]], "MQAlgorithms": [[130, "mqalgorithms"]], "UOVEstimator": [[130, "uovestimator"]], "UOVAlgorithms": [[130, "uovalgorithms"]], "RegSDEstimator": [[130, "regsdestimator"]], "RegSDAlgorithms": [[130, "regsdalgorithms"]], "MREstimator": [[130, "mrestimator"]], "MRAlgorithms": [[130, "mralgorithms"]], "PEEstimator": [[130, "peestimator"]], "PEAlgorithms": [[130, "pealgorithms"]], "General Information": [[130, "general-information"]], "Indices and Tables": [[130, "indices-and-tables"]], "References": [[131, "references"]]}, "indexentries": {"sdkeyattack (class in cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack"]], "attack_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.attack_type"]], "complexity_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.complexity_type"]], "cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack": [[0, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack"]], "get_fastest_sd_algorithm() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.get_fastest_sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.has_optimal_parameter"]], "memory_access (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.memory_complexity"]], "module": [[0, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack"], [1, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack"], [2, "module-cryptographic_estimators.BIKEEstimator.bike_algorithm"], [3, "module-cryptographic_estimators.BIKEEstimator.bike_constants"], [4, "module-cryptographic_estimators.BIKEEstimator.bike_estimator"], [5, "module-cryptographic_estimators.BIKEEstimator.bike_problem"], [6, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"], [7, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"], [8, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"], [9, "module-cryptographic_estimators.DummyEstimator.dummy_problem"], [10, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"], [11, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"], [12, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"], [13, "module-cryptographic_estimators.LEEstimator.le_algorithm"], [14, "module-cryptographic_estimators.LEEstimator.le_constants"], [15, "module-cryptographic_estimators.LEEstimator.le_estimator"], [16, "module-cryptographic_estimators.LEEstimator.le_helper"], [17, "module-cryptographic_estimators.LEEstimator.le_problem"], [18, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding"], [19, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack"], [20, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack"], [21, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir"], [22, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack"], [23, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm"], [24, "module-cryptographic_estimators.MAYOEstimator.mayo_constants"], [25, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator"], [26, "module-cryptographic_estimators.MAYOEstimator.mayo_helper"], [27, "module-cryptographic_estimators.MAYOEstimator.mayo_problem"], [28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"], [29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"], [30, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"], [31, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"], [32, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"], [33, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"], [34, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"], [35, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"], [36, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"], [37, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"], [38, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"], [39, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"], [40, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"], [41, "module-cryptographic_estimators.MQEstimator.mq_algorithm"], [42, "module-cryptographic_estimators.MQEstimator.mq_constants"], [43, "module-cryptographic_estimators.MQEstimator.mq_estimator"], [44, "module-cryptographic_estimators.MQEstimator.mq_helper"], [45, "module-cryptographic_estimators.MQEstimator.mq_problem"], [46, "module-cryptographic_estimators.MQEstimator.series.hilbert"], [47, "module-cryptographic_estimators.MQEstimator.series.nmonomial"], [48, "module-cryptographic_estimators.MQEstimator.witness_degree"], [49, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"], [50, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"], [51, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"], [52, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"], [53, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"], [54, "module-cryptographic_estimators.MREstimator.mr_algorithm"], [55, "module-cryptographic_estimators.MREstimator.mr_constants"], [56, "module-cryptographic_estimators.MREstimator.mr_estimator"], [57, "module-cryptographic_estimators.MREstimator.mr_helper"], [58, "module-cryptographic_estimators.MREstimator.mr_problem"], [59, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"], [60, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"], [61, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"], [62, "module-cryptographic_estimators.PEEstimator.pe_algorithm"], [63, "module-cryptographic_estimators.PEEstimator.pe_constants"], [64, "module-cryptographic_estimators.PEEstimator.pe_estimator"], [65, "module-cryptographic_estimators.PEEstimator.pe_helper"], [66, "module-cryptographic_estimators.PEEstimator.pe_problem"], [67, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"], [68, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"], [69, "module-cryptographic_estimators.PKEstimator.pk_algorithm"], [70, "module-cryptographic_estimators.PKEstimator.pk_constants"], [71, "module-cryptographic_estimators.PKEstimator.pk_estimator"], [72, "module-cryptographic_estimators.PKEstimator.pk_helper"], [73, "module-cryptographic_estimators.PKEstimator.pk_problem"], [74, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"], [75, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin"], [76, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"], [77, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"], [78, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"], [79, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"], [80, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"], [81, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"], [82, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"], [83, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"], [84, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"], [85, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"], [86, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"], [87, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"], [88, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"], [89, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"], [90, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"], [91, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"], [92, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"], [93, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"], [94, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"], [95, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"], [96, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"], [97, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"], [98, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"], [99, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"], [100, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"], [101, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"], [102, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"], [103, "module-cryptographic_estimators.SDEstimator.sd_algorithm"], [104, "module-cryptographic_estimators.SDEstimator.sd_constants"], [105, "module-cryptographic_estimators.SDEstimator.sd_estimator"], [106, "module-cryptographic_estimators.SDEstimator.sd_helper"], [107, "module-cryptographic_estimators.SDEstimator.sd_problem"], [108, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"], [109, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"], [110, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"], [111, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"], [112, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"], [113, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"], [114, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"], [115, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"], [116, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"], [117, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"], [118, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"], [119, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"], [120, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"], [121, "module-cryptographic_estimators.UOVEstimator.uov_constants"], [122, "module-cryptographic_estimators.UOVEstimator.uov_estimator"], [123, "module-cryptographic_estimators.UOVEstimator.uov_problem"], [124, "module-cryptographic_estimators.base_algorithm"], [125, "module-cryptographic_estimators.base_constants"], [126, "module-cryptographic_estimators.base_estimator"], [127, "module-cryptographic_estimators.base_problem"], [128, "module-cryptographic_estimators.estimation_renderer"], [129, "module-cryptographic_estimators.helper"]], "optimal_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack property)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.parameter_ranges"]], "reset() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_key_attack.sdkeyattack method)": [[0, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_key_attack.SDKeyAttack.time_complexity"]], "sdmsgattack (class in cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack"]], "attack_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.attack_type"]], "complexity_type (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.complexity_type"]], "cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack": [[1, "module-cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack"]], "get_fastest_sd_algorithm() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.get_fastest_sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.has_optimal_parameter"]], "memory_access (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack property)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.parameter_ranges"]], "reset() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.bikeestimator.bikealgorithms.sd_msg_attack.sdmsgattack method)": [[1, "cryptographic_estimators.BIKEEstimator.BIKEAlgorithms.sd_msg_attack.SDMsgAttack.time_complexity"]], "bikealgorithm (class in cryptographic_estimators.bikeestimator.bike_algorithm)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm"]], "attack_type (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.complexity_type"]], "cryptographic_estimators.bikeestimator.bike_algorithm": [[2, "module-cryptographic_estimators.BIKEEstimator.bike_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm property)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.bikeestimator.bike_algorithm.bikealgorithm method)": [[2, "cryptographic_estimators.BIKEEstimator.bike_algorithm.BIKEAlgorithm.time_complexity"]], "cryptographic_estimators.bikeestimator.bike_constants": [[3, "module-cryptographic_estimators.BIKEEstimator.bike_constants"]], "bikeestimator (class in cryptographic_estimators.bikeestimator.bike_estimator)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator"]], "algorithm_names() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.complexity_type"]], "cryptographic_estimators.bikeestimator.bike_estimator": [[4, "module-cryptographic_estimators.BIKEEstimator.bike_estimator"]], "estimate() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.estimate"]], "estimator_type (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator attribute)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator property)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.reset"]], "table() (cryptographic_estimators.bikeestimator.bike_estimator.bikeestimator method)": [[4, "cryptographic_estimators.BIKEEstimator.bike_estimator.BIKEEstimator.table"]], "bikeproblem (class in cryptographic_estimators.bikeestimator.bike_problem)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem"]], "cryptographic_estimators.bikeestimator.bike_problem": [[5, "module-cryptographic_estimators.BIKEEstimator.bike_problem"]], "expected_number_solutions() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.bikeestimator.bike_problem.bikeproblem method)": [[5, "cryptographic_estimators.BIKEEstimator.bike_problem.BIKEProblem.to_bitcomplexity_time"]], "dummyalgorithm1 (class in cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1"]], "attack_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.attack_type"]], "complexity_type (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.complexity_type"]], "cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1": [[6, "module-cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimal_parameters"]], "optimization_parameter_1() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_1"]], "optimization_parameter_2() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_2"]], "optimization_parameter_3() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.optimization_parameter_3"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 property)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummyalgorithms.dummy_algorithm1.dummyalgorithm1 method)": [[6, "cryptographic_estimators.DummyEstimator.DummyAlgorithms.dummy_algorithm1.DummyAlgorithm1.time_complexity"]], "dummyalgorithm (class in cryptographic_estimators.dummyestimator.dummy_algorithm)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm"]], "attack_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_algorithm": [[7, "module-cryptographic_estimators.DummyEstimator.dummy_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm property)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.dummyestimator.dummy_algorithm.dummyalgorithm method)": [[7, "cryptographic_estimators.DummyEstimator.dummy_algorithm.DummyAlgorithm.time_complexity"]], "dummyestimator (class in cryptographic_estimators.dummyestimator.dummy_estimator)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator"]], "algorithm_names() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.complexity_type"]], "cryptographic_estimators.dummyestimator.dummy_estimator": [[8, "module-cryptographic_estimators.DummyEstimator.dummy_estimator"]], "estimate() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimate"]], "estimator_type (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator attribute)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator property)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.nalgorithms"]], "reset() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.reset"]], "table() (cryptographic_estimators.dummyestimator.dummy_estimator.dummyestimator method)": [[8, "cryptographic_estimators.DummyEstimator.dummy_estimator.DummyEstimator.table"]], "dummyproblem (class in cryptographic_estimators.dummyestimator.dummy_problem)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem"]], "cryptographic_estimators.dummyestimator.dummy_problem": [[9, "module-cryptographic_estimators.DummyEstimator.dummy_problem"]], "expected_number_solutions() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.dummyestimator.dummy_problem.dummyproblem method)": [[9, "cryptographic_estimators.DummyEstimator.dummy_problem.DummyProblem.to_bitcomplexity_time"]], "bbps (class in cryptographic_estimators.leestimator.lealgorithms.bbps)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.bbps": [[10, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.bbps"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps property)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w"]], "w_prime() (cryptographic_estimators.leestimator.lealgorithms.bbps.bbps method)": [[10, "cryptographic_estimators.LEEstimator.LEAlgorithms.bbps.BBPS.w_prime"]], "beullens (class in cryptographic_estimators.leestimator.lealgorithms.beullens)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.beullens": [[11, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens property)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.beullens.beullens method)": [[11, "cryptographic_estimators.LEEstimator.LEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.leestimator.lealgorithms.leon)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon"]], "attack_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.leestimator.lealgorithms.leon": [[12, "module-cryptographic_estimators.LEEstimator.LEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.lealgorithms.leon.leon property)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.leestimator.lealgorithms.leon.leon method)": [[12, "cryptographic_estimators.LEEstimator.LEAlgorithms.leon.Leon.w"]], "lealgorithm (class in cryptographic_estimators.leestimator.le_algorithm)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm"]], "attack_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.complexity_type"]], "cryptographic_estimators.leestimator.le_algorithm": [[13, "module-cryptographic_estimators.LEEstimator.le_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.leestimator.le_algorithm.lealgorithm property)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.leestimator.le_algorithm.lealgorithm method)": [[13, "cryptographic_estimators.LEEstimator.le_algorithm.LEAlgorithm.time_complexity"]], "isd (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.ISD"]], "lists (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS"]], "lists_size (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.LISTS_SIZE"]], "normal_form (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NORMAL_FORM"]], "nw (cryptographic_estimators.leestimator.le_constants.verboseinformation attribute)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation.NW"]], "verboseinformation (class in cryptographic_estimators.leestimator.le_constants)": [[14, "cryptographic_estimators.LEEstimator.le_constants.VerboseInformation"]], "cryptographic_estimators.leestimator.le_constants": [[14, "module-cryptographic_estimators.LEEstimator.le_constants"]], "leestimator (class in cryptographic_estimators.leestimator.le_estimator)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator"]], "algorithm_names() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.complexity_type"]], "cryptographic_estimators.leestimator.le_estimator": [[15, "module-cryptographic_estimators.LEEstimator.le_estimator"]], "estimate() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimate"]], "estimator_type (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.leestimator.le_estimator.leestimator attribute)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.leestimator.le_estimator.leestimator property)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.reset"]], "table() (cryptographic_estimators.leestimator.le_estimator.leestimator method)": [[15, "cryptographic_estimators.LEEstimator.le_estimator.LEEstimator.table"]], "cost_to_find_random_2dim_subcodes_with_support_w() (in module cryptographic_estimators.leestimator.le_helper)": [[16, "cryptographic_estimators.LEEstimator.le_helper.cost_to_find_random_2dim_subcodes_with_support_w"]], "cryptographic_estimators.leestimator.le_helper": [[16, "module-cryptographic_estimators.LEEstimator.le_helper"]], "leproblem (class in cryptographic_estimators.leestimator.le_problem)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem"]], "cryptographic_estimators.leestimator.le_problem": [[17, "module-cryptographic_estimators.LEEstimator.le_problem"]], "expected_number_solutions() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.leestimator.le_problem.leproblem method)": [[17, "cryptographic_estimators.LEEstimator.le_problem.LEProblem.to_bitcomplexity_time"]], "clawfinding (class in cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding"]], "x() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.X"]], "y() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.Y"]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.complexity_type"]], "cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding": [[18, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding property)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.claw_finding.clawfinding method)": [[18, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.claw_finding.ClawFinding.time_complexity"]], "directattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack"]], "k() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.K"]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.complexity_type"]], "cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack": [[19, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack"]], "get_fastest_mq_algorithm() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.get_fastest_mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack property)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.direct_attack.directattack method)": [[19, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.direct_attack.DirectAttack.time_complexity"]], "intersectionattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack"]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.complexity_type"]], "cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack": [[20, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack property)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.intersection_attack.intersectionattack method)": [[20, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.intersection_attack.IntersectionAttack.time_complexity"]], "kipnisshamir (class in cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir"]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.complexity_type"]], "cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir": [[21, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir property)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.kipnis_shamir.kipnisshamir method)": [[21, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.kipnis_shamir.KipnisShamir.time_complexity"]], "reconciliationattack (class in cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack"]], "attack_type (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.complexity_type"]], "cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack": [[22, "module-cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack property)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayoalgorithms.reconciliation_attack.reconciliationattack method)": [[22, "cryptographic_estimators.MAYOEstimator.MAYOAlgorithms.reconciliation_attack.ReconciliationAttack.time_complexity"]], "mayoalgorithm (class in cryptographic_estimators.mayoestimator.mayo_algorithm)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm"]], "attack_type (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.complexity_type"]], "cryptographic_estimators.mayoestimator.mayo_algorithm": [[23, "module-cryptographic_estimators.MAYOEstimator.mayo_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm property)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mayoestimator.mayo_algorithm.mayoalgorithm method)": [[23, "cryptographic_estimators.MAYOEstimator.mayo_algorithm.MAYOAlgorithm.time_complexity"]], "cryptographic_estimators.mayoestimator.mayo_constants": [[24, "module-cryptographic_estimators.MAYOEstimator.mayo_constants"]], "mayoestimator (class in cryptographic_estimators.mayoestimator.mayo_estimator)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator"]], "algorithm_names() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.complexity_type"]], "cryptographic_estimators.mayoestimator.mayo_estimator": [[25, "module-cryptographic_estimators.MAYOEstimator.mayo_estimator"]], "estimate() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.estimate"]], "estimator_type (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator attribute)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator property)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.reset"]], "table() (cryptographic_estimators.mayoestimator.mayo_estimator.mayoestimator method)": [[25, "cryptographic_estimators.MAYOEstimator.mayo_estimator.MAYOEstimator.table"]], "cryptographic_estimators.mayoestimator.mayo_helper": [[26, "module-cryptographic_estimators.MAYOEstimator.mayo_helper"]], "mayoproblem (class in cryptographic_estimators.mayoestimator.mayo_problem)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem"]], "cost_one_hash (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem property)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.cost_one_hash"]], "cryptographic_estimators.mayoestimator.mayo_problem": [[27, "module-cryptographic_estimators.MAYOEstimator.mayo_problem"]], "expected_number_solutions() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.get_parameters"]], "hashes_to_basic_operations() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.hashes_to_basic_operations"]], "npolynomials() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.order_of_the_field"]], "order_oil_space() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.order_oil_space"]], "theta (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem property)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.to_bitcomplexity_time"]], "whipping_parameter() (cryptographic_estimators.mayoestimator.mayo_problem.mayoproblem method)": [[27, "cryptographic_estimators.MAYOEstimator.mayo_problem.MAYOProblem.whipping_parameter"]], "bjorklund (class in cryptographic_estimators.mqestimator.mqalgorithms.bjorklund)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.bjorklund": [[28, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.has_optimal_parameter"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund property)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.bjorklund.bjorklund method)": [[28, "cryptographic_estimators.MQEstimator.MQAlgorithms.bjorklund.Bjorklund.time_complexity"]], "booleansolvefxl (class in cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl": [[29, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl property)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.time_complexity"]], "variant() (cryptographic_estimators.mqestimator.mqalgorithms.booleansolve_fxl.booleansolvefxl method)": [[29, "cryptographic_estimators.MQEstimator.MQAlgorithms.booleansolve_fxl.BooleanSolveFXL.variant"]], "cgmta (class in cryptographic_estimators.mqestimator.mqalgorithms.cgmta)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.cgmta": [[30, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta property)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.cgmta.cgmta method)": [[30, "cryptographic_estimators.MQEstimator.MQAlgorithms.cgmta.CGMTA.time_complexity"]], "crossbred (class in cryptographic_estimators.mqestimator.mqalgorithms.crossbred)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred"]], "d() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.D"], [31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.d"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.crossbred": [[31, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.linear_algebra_constant"]], "max_d (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.max_D"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred property)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.crossbred.crossbred method)": [[31, "cryptographic_estimators.MQEstimator.MQAlgorithms.crossbred.Crossbred.time_complexity"]], "dinurfirst (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur1)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur1": [[32, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.has_optimal_parameter"]], "kappa() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.kappa"]], "lambda_() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.lambda_"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst property)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur1.dinurfirst method)": [[32, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur1.DinurFirst.time_complexity"]], "dinursecond (class in cryptographic_estimators.mqestimator.mqalgorithms.dinur2)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.dinur2": [[33, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.memory_complexity"]], "n1() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.n1"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond property)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.dinur2.dinursecond method)": [[33, "cryptographic_estimators.MQEstimator.MQAlgorithms.dinur2.DinurSecond.time_complexity"]], "exhaustivesearch (class in cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search": [[34, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch property)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.exhaustive_search.exhaustivesearch method)": [[34, "cryptographic_estimators.MQEstimator.MQAlgorithms.exhaustive_search.ExhaustiveSearch.time_complexity"]], "f5 (class in cryptographic_estimators.mqestimator.mqalgorithms.f5)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.f5": [[35, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 property)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.f5.f5 method)": [[35, "cryptographic_estimators.MQEstimator.MQAlgorithms.f5.F5.time_complexity"]], "hybridf5 (class in cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5": [[36, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5"]], "degree_of_polynomials() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.degree_of_polynomials"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.has_optimal_parameter"]], "k() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.k"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 property)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.hybrid_f5.hybridf5 method)": [[36, "cryptographic_estimators.MQEstimator.MQAlgorithms.hybrid_f5.HybridF5.time_complexity"]], "kpg (class in cryptographic_estimators.mqestimator.mqalgorithms.kpg)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.kpg": [[37, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.kpg"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg property)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.kpg.kpg method)": [[37, "cryptographic_estimators.MQEstimator.MQAlgorithms.kpg.KPG.time_complexity"]], "lokshtanov (class in cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov": [[38, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov"]], "delta() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.delta"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov property)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.lokshtanov.lokshtanov method)": [[38, "cryptographic_estimators.MQEstimator.MQAlgorithms.lokshtanov.Lokshtanov.time_complexity"]], "mht (class in cryptographic_estimators.mqestimator.mqalgorithms.mht)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT"]], "attack_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.complexity_type"]], "cryptographic_estimators.mqestimator.mqalgorithms.mht": [[39, "module-cryptographic_estimators.MQEstimator.MQAlgorithms.mht"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht property)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mqalgorithms.mht.mht method)": [[39, "cryptographic_estimators.MQEstimator.MQAlgorithms.mht.MHT.time_complexity"]], "cryptographic_estimators.mqestimator.degree_of_regularity": [[40, "module-cryptographic_estimators.MQEstimator.degree_of_regularity"]], "generic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[40, "cryptographic_estimators.MQEstimator.degree_of_regularity.generic_system"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[40, "cryptographic_estimators.MQEstimator.degree_of_regularity.quadratic_system"]], "regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[40, "cryptographic_estimators.MQEstimator.degree_of_regularity.regular_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.degree_of_regularity)": [[40, "cryptographic_estimators.MQEstimator.degree_of_regularity.semi_regular_system"]], "mqalgorithm (class in cryptographic_estimators.mqestimator.mq_algorithm)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm"]], "attack_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.complexity_type"]], "cryptographic_estimators.mqestimator.mq_algorithm": [[41, "module-cryptographic_estimators.MQEstimator.mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_optimal_parameters_dict"]], "get_reduced_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.get_reduced_parameters"]], "has_optimal_parameter() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.memory_complexity"]], "npolynomials_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.npolynomials_reduced"]], "nvariables_reduced() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.nvariables_reduced"]], "optimal_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm property)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mqestimator.mq_algorithm.mqalgorithm method)": [[41, "cryptographic_estimators.MQEstimator.mq_algorithm.MQAlgorithm.time_complexity"]], "cryptographic_estimators.mqestimator.mq_constants": [[42, "module-cryptographic_estimators.MQEstimator.mq_constants"]], "mqestimator (class in cryptographic_estimators.mqestimator.mq_estimator)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator"]], "algorithm_names() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.complexity_type"]], "cryptographic_estimators.mqestimator.mq_estimator": [[43, "module-cryptographic_estimators.MQEstimator.mq_estimator"]], "estimate() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimate"]], "estimator_type (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mqestimator.mq_estimator.mqestimator attribute)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mqestimator.mq_estimator.mqestimator property)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.nalgorithms"]], "reset() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.reset"]], "table() (cryptographic_estimators.mqestimator.mq_estimator.mqestimator method)": [[43, "cryptographic_estimators.MQEstimator.mq_estimator.MQEstimator.table"]], "cryptographic_estimators.mqestimator.mq_helper": [[44, "module-cryptographic_estimators.MQEstimator.mq_helper"]], "ngates() (in module cryptographic_estimators.mqestimator.mq_helper)": [[44, "cryptographic_estimators.MQEstimator.mq_helper.ngates"]], "nmonomials_of_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[44, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_of_degree"]], "nmonomials_up_to_degree() (in module cryptographic_estimators.mqestimator.mq_helper)": [[44, "cryptographic_estimators.MQEstimator.mq_helper.nmonomials_up_to_degree"]], "sum_of_binomial_coefficients() (in module cryptographic_estimators.mqestimator.mq_helper)": [[44, "cryptographic_estimators.MQEstimator.mq_helper.sum_of_binomial_coefficients"]], "mqproblem (class in cryptographic_estimators.mqestimator.mq_problem)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem"]], "cryptographic_estimators.mqestimator.mq_problem": [[45, "module-cryptographic_estimators.MQEstimator.mq_problem"]], "expected_number_solutions() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_parameters"]], "get_problem_parameters() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.get_problem_parameters"]], "is_defined_over_finite_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_defined_over_finite_field"]], "is_overdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_overdefined_system"]], "is_square_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_square_system"]], "is_underdefined_system() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.is_underdefined_system"]], "npolynomials() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.npolynomials"]], "nvariables() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.order_of_the_field"]], "theta (cryptographic_estimators.mqestimator.mq_problem.mqproblem property)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mqestimator.mq_problem.mqproblem method)": [[45, "cryptographic_estimators.MQEstimator.mq_problem.MQProblem.to_bitcomplexity_time"]], "hilbertseries (class in cryptographic_estimators.mqestimator.series.hilbert)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries"]], "coefficient_of_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.coefficient_of_degree"]], "coefficient_up_to_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.coefficient_up_to_degree"]], "cryptographic_estimators.mqestimator.series.hilbert": [[46, "module-cryptographic_estimators.MQEstimator.series.hilbert"]], "degrees (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.degrees"]], "first_nonpositive_coefficient() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_coefficient"]], "first_nonpositive_coefficient_up_to_degree() (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries method)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.first_nonpositive_coefficient_up_to_degree"]], "npolynomials (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.npolynomials"]], "nvariables (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.nvariables"]], "precision (cryptographic_estimators.mqestimator.series.hilbert.hilbertseries property)": [[46, "cryptographic_estimators.MQEstimator.series.hilbert.HilbertSeries.precision"]], "nmonomialseries (class in cryptographic_estimators.mqestimator.series.nmonomial)": [[47, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries"]], "cryptographic_estimators.mqestimator.series.nmonomial": [[47, "module-cryptographic_estimators.MQEstimator.series.nmonomial"]], "nmonomials_of_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[47, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_of_degree"]], "nmonomials_up_to_degree() (cryptographic_estimators.mqestimator.series.nmonomial.nmonomialseries method)": [[47, "cryptographic_estimators.MQEstimator.series.nmonomial.NMonomialSeries.nmonomials_up_to_degree"]], "cryptographic_estimators.mqestimator.witness_degree": [[48, "module-cryptographic_estimators.MQEstimator.witness_degree"]], "quadratic_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[48, "cryptographic_estimators.MQEstimator.witness_degree.quadratic_system"]], "semi_regular_system() (in module cryptographic_estimators.mqestimator.witness_degree)": [[48, "cryptographic_estimators.MQEstimator.witness_degree.semi_regular_system"]], "bigk (class in cryptographic_estimators.mrestimator.mralgorithms.big_k)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.big_k": [[49, "module-cryptographic_estimators.MREstimator.MRAlgorithms.big_k"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk property)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.big_k.bigk method)": [[49, "cryptographic_estimators.MREstimator.MRAlgorithms.big_k.BigK.time_complexity"]], "bruteforce (class in cryptographic_estimators.mrestimator.mralgorithms.bruteforce)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.bruteforce": [[50, "module-cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce property)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.bruteforce.bruteforce method)": [[50, "cryptographic_estimators.MREstimator.MRAlgorithms.bruteforce.BruteForce.time_complexity"]], "kernelsearch (class in cryptographic_estimators.mrestimator.mralgorithms.kernel_search)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.kernel_search": [[51, "module-cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch property)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.kernel_search.kernelsearch method)": [[51, "cryptographic_estimators.MREstimator.MRAlgorithms.kernel_search.KernelSearch.time_complexity"]], "minors (class in cryptographic_estimators.mrestimator.mralgorithms.minors)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.minors": [[52, "module-cryptographic_estimators.MREstimator.MRAlgorithms.minors"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.minors.minors property)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.minors.minors method)": [[52, "cryptographic_estimators.MREstimator.MRAlgorithms.minors.Minors.time_complexity"]], "supportminors (class in cryptographic_estimators.mrestimator.mralgorithms.support_minors)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors"]], "a() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.a"]], "attack_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.attack_type"]], "b() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.b"]], "complexity_type (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.cost_reduction"]], "cryptographic_estimators.mrestimator.mralgorithms.support_minors": [[53, "module-cryptographic_estimators.MREstimator.MRAlgorithms.support_minors"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.linear_algebra_constant"]], "lv() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.lv"]], "memory_access (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.memory_complexity"]], "nprime() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.nprime"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors property)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.time_complexity"]], "variant() (cryptographic_estimators.mrestimator.mralgorithms.support_minors.supportminors method)": [[53, "cryptographic_estimators.MREstimator.MRAlgorithms.support_minors.SupportMinors.variant"]], "mralgorithm (class in cryptographic_estimators.mrestimator.mr_algorithm)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm"]], "attack_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.complexity_type"]], "cost_reduction() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.cost_reduction"]], "cryptographic_estimators.mrestimator.mr_algorithm": [[54, "module-cryptographic_estimators.MREstimator.mr_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_optimal_parameters_dict"]], "get_problem_parameters_reduced() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.get_problem_parameters_reduced"]], "has_optimal_parameter() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.has_optimal_parameter"]], "hybridization_factor() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.hybridization_factor"]], "linear_algebra_constant() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm property)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.mrestimator.mr_algorithm.mralgorithm method)": [[54, "cryptographic_estimators.MREstimator.mr_algorithm.MRAlgorithm.time_complexity"]], "cryptographic_estimators.mrestimator.mr_constants": [[55, "module-cryptographic_estimators.MREstimator.mr_constants"]], "mrestimator (class in cryptographic_estimators.mrestimator.mr_estimator)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator"]], "algorithm_names() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.algorithms"]], "bit_complexities (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.complexity_type"]], "cryptographic_estimators.mrestimator.mr_estimator": [[56, "module-cryptographic_estimators.MREstimator.mr_estimator"]], "estimate() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimate"]], "estimator_type (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.mrestimator.mr_estimator.mrestimator attribute)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.mrestimator.mr_estimator.mrestimator property)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.nalgorithms"]], "reset() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.reset"]], "table() (cryptographic_estimators.mrestimator.mr_estimator.mrestimator method)": [[56, "cryptographic_estimators.MREstimator.mr_estimator.MREstimator.table"]], "variant (class in cryptographic_estimators.mrestimator.mr_helper)": [[57, "cryptographic_estimators.MREstimator.mr_helper.Variant"]], "block_wiedemann (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[57, "cryptographic_estimators.MREstimator.mr_helper.Variant.block_wiedemann"]], "cryptographic_estimators.mrestimator.mr_helper": [[57, "module-cryptographic_estimators.MREstimator.mr_helper"]], "deteterminant_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[57, "cryptographic_estimators.MREstimator.mr_helper.deteterminant_of_A"]], "entry_i_j_of_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[57, "cryptographic_estimators.MREstimator.mr_helper.entry_i_j_of_A"]], "matrix_a() (in module cryptographic_estimators.mrestimator.mr_helper)": [[57, "cryptographic_estimators.MREstimator.mr_helper.matrix_A"]], "minors_polynomial() (in module cryptographic_estimators.mrestimator.mr_helper)": [[57, "cryptographic_estimators.MREstimator.mr_helper.minors_polynomial"]], "minors_series() (in module cryptographic_estimators.mrestimator.mr_helper)": [[57, "cryptographic_estimators.MREstimator.mr_helper.minors_series"]], "strassen (cryptographic_estimators.mrestimator.mr_helper.variant attribute)": [[57, "cryptographic_estimators.MREstimator.mr_helper.Variant.strassen"]], "mrproblem (class in cryptographic_estimators.mrestimator.mr_problem)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem"]], "cryptographic_estimators.mrestimator.mr_problem": [[58, "module-cryptographic_estimators.MREstimator.mr_problem"]], "expected_number_solutions() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.get_parameters"]], "length_solution_vector() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.length_solution_vector"]], "ncolumns() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.ncolumns"]], "nmatrices() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nmatrices"]], "nrows() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.nrows"]], "order_of_the_field() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.order_of_the_field"]], "target_rank() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.target_rank"]], "theta (cryptographic_estimators.mrestimator.mr_problem.mrproblem property)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.mrestimator.mr_problem.mrproblem method)": [[58, "cryptographic_estimators.MREstimator.mr_problem.MRProblem.to_bitcomplexity_time"]], "beullens (class in cryptographic_estimators.peestimator.pealgorithms.beullens)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.beullens": [[59, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.beullens"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens property)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.beullens.beullens method)": [[59, "cryptographic_estimators.PEEstimator.PEAlgorithms.beullens.Beullens.w"]], "leon (class in cryptographic_estimators.peestimator.pealgorithms.leon)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.leon": [[60, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.leon"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.leon.leon property)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.time_complexity"]], "w() (cryptographic_estimators.peestimator.pealgorithms.leon.leon method)": [[60, "cryptographic_estimators.PEEstimator.PEAlgorithms.leon.Leon.w"]], "ssa (class in cryptographic_estimators.peestimator.pealgorithms.ssa)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA"]], "attack_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.complexity_type"]], "cryptographic_estimators.peestimator.pealgorithms.ssa": [[61, "module-cryptographic_estimators.PEEstimator.PEAlgorithms.ssa"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa property)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pealgorithms.ssa.ssa method)": [[61, "cryptographic_estimators.PEEstimator.PEAlgorithms.ssa.SSA.time_complexity"]], "pealgorithm (class in cryptographic_estimators.peestimator.pe_algorithm)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm"]], "attack_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.complexity_type"]], "cryptographic_estimators.peestimator.pe_algorithm": [[62, "module-cryptographic_estimators.PEEstimator.pe_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm property)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.peestimator.pe_algorithm.pealgorithm method)": [[62, "cryptographic_estimators.PEEstimator.pe_algorithm.PEAlgorithm.time_complexity"]], "lists_size (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LISTS_SIZE"]], "list_computation (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.LIST_COMPUTATION"]], "normal_form (cryptographic_estimators.peestimator.pe_constants.verboseinformation attribute)": [[63, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation.NORMAL_FORM"]], "verboseinformation (class in cryptographic_estimators.peestimator.pe_constants)": [[63, "cryptographic_estimators.PEEstimator.pe_constants.VerboseInformation"]], "cryptographic_estimators.peestimator.pe_constants": [[63, "module-cryptographic_estimators.PEEstimator.pe_constants"]], "peestimator (class in cryptographic_estimators.peestimator.pe_estimator)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator"]], "algorithm_names() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.complexity_type"]], "cryptographic_estimators.peestimator.pe_estimator": [[64, "module-cryptographic_estimators.PEEstimator.pe_estimator"]], "estimate() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimate"]], "estimator_type (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.peestimator.pe_estimator.peestimator attribute)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.peestimator.pe_estimator.peestimator property)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.nalgorithms"]], "reset() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.reset"]], "table() (cryptographic_estimators.peestimator.pe_estimator.peestimator method)": [[64, "cryptographic_estimators.PEEstimator.pe_estimator.PEEstimator.table"]], "cryptographic_estimators.peestimator.pe_helper": [[65, "module-cryptographic_estimators.PEEstimator.pe_helper"]], "gv_distance() (in module cryptographic_estimators.peestimator.pe_helper)": [[65, "cryptographic_estimators.PEEstimator.pe_helper.gv_distance"]], "hamming_ball() (in module cryptographic_estimators.peestimator.pe_helper)": [[65, "cryptographic_estimators.PEEstimator.pe_helper.hamming_ball"]], "median_size_of_random_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[65, "cryptographic_estimators.PEEstimator.pe_helper.median_size_of_random_orbit"]], "number_of_weight_d_codewords() (in module cryptographic_estimators.peestimator.pe_helper)": [[65, "cryptographic_estimators.PEEstimator.pe_helper.number_of_weight_d_codewords"]], "random_sparse_vec_orbit() (in module cryptographic_estimators.peestimator.pe_helper)": [[65, "cryptographic_estimators.PEEstimator.pe_helper.random_sparse_vec_orbit"]], "peproblem (class in cryptographic_estimators.peestimator.pe_problem)": [[66, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem"]], "cryptographic_estimators.peestimator.pe_problem": [[66, "module-cryptographic_estimators.PEEstimator.pe_problem"]], "expected_number_solutions() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[66, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[66, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[66, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.peestimator.pe_problem.peproblem method)": [[66, "cryptographic_estimators.PEEstimator.pe_problem.PEProblem.to_bitcomplexity_time"]], "kmp (class in cryptographic_estimators.pkestimator.pkalgorithms.kmp)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP"]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.kmp": [[67, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.kmp"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp property)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.time_complexity"]], "u() (cryptographic_estimators.pkestimator.pkalgorithms.kmp.kmp method)": [[67, "cryptographic_estimators.PKEstimator.PKAlgorithms.kmp.KMP.u"]], "sbc (class in cryptographic_estimators.pkestimator.pkalgorithms.sbc)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC"]], "attack_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.complexity_type"]], "cryptographic_estimators.pkestimator.pkalgorithms.sbc": [[68, "module-cryptographic_estimators.PKEstimator.PKAlgorithms.sbc"]], "d() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.d"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc property)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.time_complexity"]], "w() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w"]], "w1() (cryptographic_estimators.pkestimator.pkalgorithms.sbc.sbc method)": [[68, "cryptographic_estimators.PKEstimator.PKAlgorithms.sbc.SBC.w1"]], "pkalgorithm (class in cryptographic_estimators.pkestimator.pk_algorithm)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm"]], "attack_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.complexity_type"]], "cryptographic_estimators.pkestimator.pk_algorithm": [[69, "module-cryptographic_estimators.PKEstimator.pk_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm property)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.pkestimator.pk_algorithm.pkalgorithm method)": [[69, "cryptographic_estimators.PKEstimator.pk_algorithm.PKAlgorithm.time_complexity"]], "kmp_final_list (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[70, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_FINAL_LIST"]], "kmp_l1 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[70, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L1"]], "kmp_l2 (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[70, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.KMP_L2"]], "sbc_isd (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[70, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_ISD"]], "sbc_u (cryptographic_estimators.pkestimator.pk_constants.verboseinformation attribute)": [[70, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation.SBC_U"]], "verboseinformation (class in cryptographic_estimators.pkestimator.pk_constants)": [[70, "cryptographic_estimators.PKEstimator.pk_constants.VerboseInformation"]], "cryptographic_estimators.pkestimator.pk_constants": [[70, "module-cryptographic_estimators.PKEstimator.pk_constants"]], "pkestimator (class in cryptographic_estimators.pkestimator.pk_estimator)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator"]], "algorithm_names() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.complexity_type"]], "cryptographic_estimators.pkestimator.pk_estimator": [[71, "module-cryptographic_estimators.PKEstimator.pk_estimator"]], "estimate() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimate"]], "estimator_type (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.pkestimator.pk_estimator.pkestimator attribute)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.pkestimator.pk_estimator.pkestimator property)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.nalgorithms"]], "reset() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.reset"]], "table() (cryptographic_estimators.pkestimator.pk_estimator.pkestimator method)": [[71, "cryptographic_estimators.PKEstimator.pk_estimator.PKEstimator.table"]], "beullens_lee_brickell_adaptation() (in module cryptographic_estimators.pkestimator.pk_helper)": [[72, "cryptographic_estimators.PKEstimator.pk_helper.beullens_lee_brickell_adaptation"]], "cost_for_finding_subcode() (in module cryptographic_estimators.pkestimator.pk_helper)": [[72, "cryptographic_estimators.PKEstimator.pk_helper.cost_for_finding_subcode"]], "cryptographic_estimators.pkestimator.pk_helper": [[72, "module-cryptographic_estimators.PKEstimator.pk_helper"]], "gauss_binomial() (in module cryptographic_estimators.pkestimator.pk_helper)": [[72, "cryptographic_estimators.PKEstimator.pk_helper.gauss_binomial"]], "lof() (in module cryptographic_estimators.pkestimator.pk_helper)": [[72, "cryptographic_estimators.PKEstimator.pk_helper.lof"]], "pkproblem (class in cryptographic_estimators.pkestimator.pk_problem)": [[73, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem"]], "cryptographic_estimators.pkestimator.pk_problem": [[73, "module-cryptographic_estimators.PKEstimator.pk_problem"]], "expected_number_solutions() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[73, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[73, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[73, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.pkestimator.pk_problem.pkproblem method)": [[73, "cryptographic_estimators.PKEstimator.pk_problem.PKProblem.to_bitcomplexity_time"]], "ccj (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj": [[74, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.ell"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj property)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj.ccj method)": [[74, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj.CCJ.time_complexity"]], "ccjlin (class in cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin": [[75, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin property)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.ccj_lin.ccjlin method)": [[75, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.ccj_lin.CCJLin.time_complexity"]], "regularisdenum (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum": [[76, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.ell"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.optimal_parameters"]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.p"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum property)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_enum.regularisdenum method)": [[76, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_enum.RegularISDEnum.time_complexity"]], "regularisdperm (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm": [[77, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm property)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_perm.regularisdperm method)": [[77, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_perm.RegularISDPerm.time_complexity"]], "regularisdrep (class in cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep": [[78, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep"]], "ell() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.ell"]], "eps_x() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_x"]], "eps_y() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.eps_y"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.optimal_parameters"]], "p() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.p"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep property)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.regisd_rep.regularisdrep method)": [[78, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.regisd_rep.RegularISDRep.time_complexity"]], "sdattack (class in cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack"]], "attack_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.complexity_type"]], "cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack": [[79, "module-cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack property)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsdalgorithms.sd_attack.sdattack method)": [[79, "cryptographic_estimators.RegSDEstimator.RegSDAlgorithms.sd_attack.SDAttack.time_complexity"]], "regsdalgorithm (class in cryptographic_estimators.regsdestimator.regsd_algorithm)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm"]], "attack_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.complexity_type"]], "cryptographic_estimators.regsdestimator.regsd_algorithm": [[80, "module-cryptographic_estimators.RegSDEstimator.regsd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm property)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.regsdestimator.regsd_algorithm.regsdalgorithm method)": [[80, "cryptographic_estimators.RegSDEstimator.regsd_algorithm.RegSDAlgorithm.time_complexity"]], "cryptographic_estimators.regsdestimator.regsd_constants": [[81, "module-cryptographic_estimators.RegSDEstimator.regsd_constants"]], "regsdestimator (class in cryptographic_estimators.regsdestimator.regsd_estimator)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator"]], "algorithm_names() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.complexity_type"]], "cryptographic_estimators.regsdestimator.regsd_estimator": [[82, "module-cryptographic_estimators.RegSDEstimator.regsd_estimator"]], "estimate() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimate"]], "estimator_type (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator attribute)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator property)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.reset"]], "table() (cryptographic_estimators.regsdestimator.regsd_estimator.regsdestimator method)": [[82, "cryptographic_estimators.RegSDEstimator.regsd_estimator.RegSDEstimator.table"]], "cryptographic_estimators.regsdestimator.regsd_helper": [[83, "module-cryptographic_estimators.RegSDEstimator.regsd_helper"]], "r_int() (in module cryptographic_estimators.regsdestimator.regsd_helper)": [[83, "cryptographic_estimators.RegSDEstimator.regsd_helper.r_int"]], "regsdproblem (class in cryptographic_estimators.regsdestimator.regsd_problem)": [[84, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem"]], "cryptographic_estimators.regsdestimator.regsd_problem": [[84, "module-cryptographic_estimators.RegSDEstimator.regsd_problem"]], "expected_number_solutions() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[84, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[84, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[84, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.regsdestimator.regsd_problem.regsdproblem method)": [[84, "cryptographic_estimators.RegSDEstimator.regsd_problem.RegSDProblem.to_bitcomplexity_time"]], "ballcollision (class in cryptographic_estimators.sdestimator.sdalgorithms.ball_collision)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.ball_collision": [[85, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.has_optimal_parameter"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision property)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.parameter_ranges"]], "pl() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.pl"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.ball_collision.ballcollision method)": [[85, "cryptographic_estimators.SDEstimator.SDAlgorithms.ball_collision.BallCollision.time_complexity"]], "bjmm (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM"]], "bjmmd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2"]], "bjmmd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm": [[86, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 property)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmm method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMM.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd2 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm.bjmmd3 method)": [[86, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm.BJMMd3.time_complexity"]], "bjmmdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw": [[87, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw property)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w1"]], "w11() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w11"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_dw.bjmmdw method)": [[87, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_dw.BJMMdw.w2"]], "bjmmpdw (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw": [[88, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.initialize_parameter_ranges"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw property)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.time_complexity"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_pdw.bjmmpdw method)": [[88, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_pdw.BJMMpdw.w2"]], "bjmmplus (class in cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus": [[89, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l"]], "l1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.l1"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus property)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.bjmm_plus.bjmmplus method)": [[89, "cryptographic_estimators.SDEstimator.SDAlgorithms.bjmm_plus.BJMMplus.time_complexity"]], "bothmay (class in cryptographic_estimators.sdestimator.sdalgorithms.both_may)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.both_may": [[90, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.both_may"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.p1"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay property)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.time_complexity"]], "w1() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w1"]], "w2() (cryptographic_estimators.sdestimator.sdalgorithms.both_may.bothmay method)": [[90, "cryptographic_estimators.SDEstimator.SDAlgorithms.both_may.BothMay.w2"]], "dumer (class in cryptographic_estimators.sdestimator.sdalgorithms.dumer)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.dumer": [[91, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.dumer"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer property)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.dumer.dumer method)": [[91, "cryptographic_estimators.SDEstimator.SDAlgorithms.dumer.Dumer.time_complexity"]], "mayozerov (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov"]], "mayozerovd2 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2"]], "mayozerovd3 (class in cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.attack_type"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.complexity_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov": [[92, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov"]], "depth() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.depth"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.get_optimal_parameters_dict"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.has_optimal_parameter"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.initialize_parameter_ranges"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.l"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_access_cost"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.memory_complexity"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.optimal_parameters"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.p1"]], "p1() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p1"]], "p2() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.p2"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_names"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.parameter_ranges"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 property)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.r"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.reset"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameter_ranges"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.set_parameters"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerov method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerov.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd2 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD2.time_complexity"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.may_ozerov.mayozerovd3 method)": [[92, "cryptographic_estimators.SDEstimator.SDAlgorithms.may_ozerov.MayOzerovD3.time_complexity"]], "prange (class in cryptographic_estimators.sdestimator.sdalgorithms.prange)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.prange": [[93, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange property)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.prange.prange method)": [[93, "cryptographic_estimators.SDEstimator.SDAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdestimator.sdalgorithms.stern)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern"]], "attack_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdestimator.sdalgorithms.stern": [[94, "module-cryptographic_estimators.SDEstimator.SDAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.has_optimal_parameter"]], "initialize_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.initialize_parameter_ranges"]], "l() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern property)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.r"]], "reset() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sdalgorithms.stern.stern method)": [[94, "cryptographic_estimators.SDEstimator.SDAlgorithms.stern.Stern.time_complexity"]], "ballcollisionscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision)": [[95, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision": [[95, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.ball_collision.ballcollisionscipymodel method)": [[95, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.ball_collision.BallCollisionScipyModel.get_time_memory_and_parameters"]], "bjmmscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm)": [[96, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm": [[96, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.bjmm.bjmmscipymodel method)": [[96, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.bjmm.BJMMScipyModel.get_time_memory_and_parameters"]], "bothmayscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.both_may)": [[97, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.both_may": [[97, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.both_may.bothmayscipymodel method)": [[97, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.both_may.BothMayScipyModel.get_time_memory_and_parameters"]], "dumerscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.dumer)": [[98, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.dumer": [[98, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.dumer.dumerscipymodel method)": [[98, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.dumer.DumerScipyModel.get_time_memory_and_parameters"]], "mayozerovscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov)": [[99, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov": [[99, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.may_ozerov.mayozerovscipymodel method)": [[99, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.may_ozerov.MayOzerovScipyModel.get_time_memory_and_parameters"]], "prangescipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.prange)": [[100, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.prange": [[100, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.prange.prangescipymodel method)": [[100, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.prange.PrangeScipyModel.get_time_memory_and_parameters"]], "sternscipymodel (class in cryptographic_estimators.sdestimator.sdworkfactormodels.stern)": [[101, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.stern": [[101, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern"]], "get_time_memory_and_parameters() (cryptographic_estimators.sdestimator.sdworkfactormodels.stern.sternscipymodel method)": [[101, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.stern.SternScipyModel.get_time_memory_and_parameters"]], "binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binary_entropy"]], "binomial_approximation() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.binomial_approximation"]], "cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper": [[102, "module-cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper"]], "inverse_binary_entropy() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.inverse_binary_entropy"]], "list_of_random_tuples() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.list_of_random_tuples"]], "may_ozerov_near_neighbor_time() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.may_ozerov_near_neighbor_time"]], "representations_asymptotic() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.representations_asymptotic"]], "wrap() (in module cryptographic_estimators.sdestimator.sdworkfactormodels.workfactor_helper)": [[102, "cryptographic_estimators.SDEstimator.SDWorkfactorModels.workfactor_helper.wrap"]], "sdalgorithm (class in cryptographic_estimators.sdestimator.sd_algorithm)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm"]], "attack_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.complexity_type"]], "cryptographic_estimators.sdestimator.sd_algorithm": [[103, "module-cryptographic_estimators.SDEstimator.sd_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm property)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.parameter_ranges"]], "r() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.r"]], "reset() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdestimator.sd_algorithm.sdalgorithm method)": [[103, "cryptographic_estimators.SDEstimator.sd_algorithm.SDAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdestimator.sd_constants.verboseinformation attribute)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdestimator.sd_constants)": [[104, "cryptographic_estimators.SDEstimator.sd_constants.VerboseInformation"]], "cryptographic_estimators.sdestimator.sd_constants": [[104, "module-cryptographic_estimators.SDEstimator.sd_constants"]], "sdestimator (class in cryptographic_estimators.sdestimator.sd_estimator)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator"]], "algorithm_names() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.complexity_type"]], "cryptographic_estimators.sdestimator.sd_estimator": [[105, "module-cryptographic_estimators.SDEstimator.sd_estimator"]], "estimate() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimate"]], "estimator_type (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.sdestimator.sd_estimator.sdestimator attribute)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdestimator.sd_estimator.sdestimator property)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.reset"]], "table() (cryptographic_estimators.sdestimator.sd_estimator.sdestimator method)": [[105, "cryptographic_estimators.SDEstimator.sd_estimator.SDEstimator.table"]], "binom() (in module cryptographic_estimators.sdestimator.sd_helper)": [[106, "cryptographic_estimators.SDEstimator.sd_helper.binom"]], "cryptographic_estimators.sdestimator.sd_helper": [[106, "module-cryptographic_estimators.SDEstimator.sd_helper"]], "min_max() (in module cryptographic_estimators.sdestimator.sd_helper)": [[106, "cryptographic_estimators.SDEstimator.sd_helper.min_max"]], "sdproblem (class in cryptographic_estimators.sdestimator.sd_problem)": [[107, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem"]], "cryptographic_estimators.sdestimator.sd_problem": [[107, "module-cryptographic_estimators.SDEstimator.sd_problem"]], "expected_number_solutions() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[107, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[107, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[107, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdestimator.sd_problem.sdproblem method)": [[107, "cryptographic_estimators.SDEstimator.sd_problem.SDProblem.to_bitcomplexity_time"]], "leebrickell (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell": [[108, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell property)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.leebrickell.leebrickell method)": [[108, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.leebrickell.LeeBrickell.time_complexity"]], "prange (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange": [[109, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange property)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.prange.prange method)": [[109, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.prange.Prange.time_complexity"]], "stern (class in cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern": [[110, "module-cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.has_optimal_parameter"]], "l() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.l"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.optimal_parameters"]], "p() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.p"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern property)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfqalgorithms.stern.stern method)": [[110, "cryptographic_estimators.SDFqEstimator.SDFqAlgorithms.stern.Stern.time_complexity"]], "sdfqalgorithm (class in cryptographic_estimators.sdfqestimator.sdfq_algorithm)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm"]], "attack_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_algorithm": [[111, "module-cryptographic_estimators.SDFqEstimator.sdfq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm property)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.sdfqestimator.sdfq_algorithm.sdfqalgorithm method)": [[111, "cryptographic_estimators.SDFqEstimator.sdfq_algorithm.SDFqAlgorithm.time_complexity"]], "constraints (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.CONSTRAINTS"]], "gauss (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.GAUSS"]], "lists (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.LISTS"]], "permutations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.PERMUTATIONS"]], "representations (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.REPRESENTATIONS"]], "tree (cryptographic_estimators.sdfqestimator.sdfq_constants.verboseinformation attribute)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation.TREE"]], "verboseinformation (class in cryptographic_estimators.sdfqestimator.sdfq_constants)": [[112, "cryptographic_estimators.SDFqEstimator.sdfq_constants.VerboseInformation"]], "cryptographic_estimators.sdfqestimator.sdfq_constants": [[112, "module-cryptographic_estimators.SDFqEstimator.sdfq_constants"]], "sdfqestimator (class in cryptographic_estimators.sdfqestimator.sdfq_estimator)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator"]], "algorithm_names() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.complexity_type"]], "cryptographic_estimators.sdfqestimator.sdfq_estimator": [[113, "module-cryptographic_estimators.SDFqEstimator.sdfq_estimator"]], "estimate() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimate"]], "estimator_type (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator attribute)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator property)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.nalgorithms"]], "reset() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.reset"]], "table() (cryptographic_estimators.sdfqestimator.sdfq_estimator.sdfqestimator method)": [[113, "cryptographic_estimators.SDFqEstimator.sdfq_estimator.SDFqEstimator.table"]], "binom() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[114, "cryptographic_estimators.SDFqEstimator.sdfq_helper.binom"]], "cryptographic_estimators.sdfqestimator.sdfq_helper": [[114, "module-cryptographic_estimators.SDFqEstimator.sdfq_helper"]], "min_max() (in module cryptographic_estimators.sdfqestimator.sdfq_helper)": [[114, "cryptographic_estimators.SDFqEstimator.sdfq_helper.min_max"]], "sdfqproblem (class in cryptographic_estimators.sdfqestimator.sdfq_problem)": [[115, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem"]], "cryptographic_estimators.sdfqestimator.sdfq_problem": [[115, "module-cryptographic_estimators.SDFqEstimator.sdfq_problem"]], "expected_number_solutions() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[115, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[115, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[115, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.sdfqestimator.sdfq_problem.sdfqproblem method)": [[115, "cryptographic_estimators.SDFqEstimator.sdfq_problem.SDFqProblem.to_bitcomplexity_time"]], "collisionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.collision_attack)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack"]], "x() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.X"]], "y() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.Y"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.collision_attack": [[116, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack property)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.collision_attack.collisionattack method)": [[116, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.collision_attack.CollisionAttack.time_complexity"]], "directattack (class in cryptographic_estimators.uovestimator.uovalgorithms.direct_attack)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.direct_attack": [[117, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack"]], "get_fastest_mq_algorithm() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_fastest_mq_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack property)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.direct_attack.directattack method)": [[117, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.direct_attack.DirectAttack.time_complexity"]], "intersectionattack (class in cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack": [[118, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.has_optimal_parameter"]], "k() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.k"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack property)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.intersection_attack.intersectionattack method)": [[118, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.intersection_attack.IntersectionAttack.time_complexity"]], "kipnisshamir (class in cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir"]], "attack_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.complexity_type"]], "cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir": [[119, "module-cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir property)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uovalgorithms.kipnis_shamir.kipnisshamir method)": [[119, "cryptographic_estimators.UOVEstimator.UOVAlgorithms.kipnis_shamir.KipnisShamir.time_complexity"]], "uovalgorithm (class in cryptographic_estimators.uovestimator.uov_algorithm)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm"]], "attack_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.complexity_type"]], "cryptographic_estimators.uovestimator.uov_algorithm": [[120, "module-cryptographic_estimators.UOVEstimator.uov_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.has_optimal_parameter"]], "linear_algebra_constant() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.linear_algebra_constant"]], "memory_access (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.memory_complexity"]], "optimal_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm property)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.uovestimator.uov_algorithm.uovalgorithm method)": [[120, "cryptographic_estimators.UOVEstimator.uov_algorithm.UOVAlgorithm.time_complexity"]], "cryptographic_estimators.uovestimator.uov_constants": [[121, "module-cryptographic_estimators.UOVEstimator.uov_constants"]], "uovestimator (class in cryptographic_estimators.uovestimator.uov_estimator)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator"]], "algorithm_names() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.complexity_type"]], "cryptographic_estimators.uovestimator.uov_estimator": [[122, "module-cryptographic_estimators.UOVEstimator.uov_estimator"]], "estimate() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimate"]], "estimator_type (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.uovestimator.uov_estimator.uovestimator attribute)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.uovestimator.uov_estimator.uovestimator property)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.nalgorithms"]], "reset() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.reset"]], "table() (cryptographic_estimators.uovestimator.uov_estimator.uovestimator method)": [[122, "cryptographic_estimators.UOVEstimator.uov_estimator.UOVEstimator.table"]], "uovproblem (class in cryptographic_estimators.uovestimator.uov_problem)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem"]], "cost_one_hash (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.cost_one_hash"]], "cryptographic_estimators.uovestimator.uov_problem": [[123, "module-cryptographic_estimators.UOVEstimator.uov_problem"]], "expected_number_solutions() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.get_parameters"]], "hashes_to_basic_operations() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.hashes_to_basic_operations"]], "npolynomials() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.npolynomials"]], "nvariables() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.nvariables"]], "order_of_the_field() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.order_of_the_field"]], "theta (cryptographic_estimators.uovestimator.uov_problem.uovproblem property)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.theta"]], "to_bitcomplexity_memory() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.uovestimator.uov_problem.uovproblem method)": [[123, "cryptographic_estimators.UOVEstimator.uov_problem.UOVProblem.to_bitcomplexity_time"]], "basealgorithm (class in cryptographic_estimators.base_algorithm)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm"]], "attack_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.attack_type"]], "complexity_type (cryptographic_estimators.base_algorithm.basealgorithm property)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.complexity_type"]], "cryptographic_estimators.base_algorithm": [[124, "module-cryptographic_estimators.base_algorithm"]], "get_optimal_parameters_dict() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.get_optimal_parameters_dict"]], "has_optimal_parameter() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.has_optimal_parameter"]], "memory_access (cryptographic_estimators.base_algorithm.basealgorithm property)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access"]], "memory_access_cost() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_access_cost"]], "memory_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.memory_complexity"]], "optimal_parameter() (in module cryptographic_estimators.base_algorithm)": [[124, "cryptographic_estimators.base_algorithm.optimal_parameter"]], "optimal_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.optimal_parameters"]], "parameter_names() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_names"]], "parameter_ranges (cryptographic_estimators.base_algorithm.basealgorithm property)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.parameter_ranges"]], "reset() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.reset"]], "set_parameter_ranges() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameter_ranges"]], "set_parameters() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.set_parameters"]], "time_complexity() (cryptographic_estimators.base_algorithm.basealgorithm method)": [[124, "cryptographic_estimators.base_algorithm.BaseAlgorithm.time_complexity"]], "cryptographic_estimators.base_constants": [[125, "module-cryptographic_estimators.base_constants"]], "baseestimator (class in cryptographic_estimators.base_estimator)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator"]], "algorithm_names() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.algorithm_names"]], "algorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.algorithms"]], "bit_complexities (cryptographic_estimators.base_estimator.baseestimator property)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.bit_complexities"]], "complexity_type (cryptographic_estimators.base_estimator.baseestimator property)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.complexity_type"]], "cryptographic_estimators.base_estimator": [[126, "module-cryptographic_estimators.base_estimator"]], "estimate() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.estimate"]], "estimator_type (cryptographic_estimators.base_estimator.baseestimator property)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.estimator_type"]], "excluded_algorithms_by_default (cryptographic_estimators.base_estimator.baseestimator attribute)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.excluded_algorithms_by_default"]], "fastest_algorithm() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.fastest_algorithm"]], "memory_access (cryptographic_estimators.base_estimator.baseestimator property)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.memory_access"]], "nalgorithms() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.nalgorithms"]], "reset() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.reset"]], "table() (cryptographic_estimators.base_estimator.baseestimator method)": [[126, "cryptographic_estimators.base_estimator.BaseEstimator.table"]], "baseproblem (class in cryptographic_estimators.base_problem)": [[127, "cryptographic_estimators.base_problem.BaseProblem"]], "cryptographic_estimators.base_problem": [[127, "module-cryptographic_estimators.base_problem"]], "expected_number_solutions() (cryptographic_estimators.base_problem.baseproblem method)": [[127, "cryptographic_estimators.base_problem.BaseProblem.expected_number_solutions"]], "get_parameters() (cryptographic_estimators.base_problem.baseproblem method)": [[127, "cryptographic_estimators.base_problem.BaseProblem.get_parameters"]], "to_bitcomplexity_memory() (cryptographic_estimators.base_problem.baseproblem method)": [[127, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_memory"]], "to_bitcomplexity_time() (cryptographic_estimators.base_problem.baseproblem method)": [[127, "cryptographic_estimators.base_problem.BaseProblem.to_bitcomplexity_time"]], "estimationrenderer (class in cryptographic_estimators.estimation_renderer)": [[128, "cryptographic_estimators.estimation_renderer.EstimationRenderer"]], "as_table() (cryptographic_estimators.estimation_renderer.estimationrenderer method)": [[128, "cryptographic_estimators.estimation_renderer.EstimationRenderer.as_table"]], "cryptographic_estimators.estimation_renderer": [[128, "module-cryptographic_estimators.estimation_renderer"]], "complexitytype (class in cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.ComplexityType"]], "estimate (cryptographic_estimators.helper.complexitytype attribute)": [[129, "cryptographic_estimators.helper.ComplexityType.ESTIMATE"]], "tildeo (cryptographic_estimators.helper.complexitytype attribute)": [[129, "cryptographic_estimators.helper.ComplexityType.TILDEO"]], "concat_all_tables() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.concat_all_tables"]], "concat_pretty_tables() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.concat_pretty_tables"]], "cryptographic_estimators.helper": [[129, "module-cryptographic_estimators.helper"]], "gf_order_to_characteristic() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.gf_order_to_characteristic"]], "gf_order_to_degree() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.gf_order_to_degree"]], "is_power_of_two() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.is_power_of_two"]], "is_prime_power() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.is_prime_power"]], "round_or_truncate() (in module cryptographic_estimators.helper)": [[129, "cryptographic_estimators.helper.round_or_truncate"]]}})